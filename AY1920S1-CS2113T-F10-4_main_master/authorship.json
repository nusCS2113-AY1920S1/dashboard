[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    archiveBaseName \u003d \"gazeeebo\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    archiveVersion \u003d \"1.3.2\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    mainClassName \u003d \"Gazeeebo\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 3,
      "yueyuu": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/Gazeeebo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NotePageStorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.ParserManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Gazeeebo {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Returns main function for duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param args a String array that takes in input from the command line"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003cArrayList\u003cTask\u003e\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        store.startUp();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(store);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            list \u003d store.readFromSaveFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteDaily.txt\", NoteList.daily);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteWeekly.txt\", NoteList.weekly);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteMonthly.txt\", NoteList.monthly);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NotePageStorage.readFromGoalFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NotePageStorage.readFromModulesFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.upcomingTask(list);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.MajorCategories();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String command \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Command c \u003d ParserManager.parse(command, ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (c !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    c.execute(list, ui, store, CommandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.showDateFormatError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (e instanceof IOException) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.showIOErrorMessage(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"System exiting\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 14,
      "mononokehime14": 3,
      "e0309463": 31,
      "yueyuu": 13,
      "-": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/TriviaManager/TriviaManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.TriviaManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString, ArrayList\u003cString\u003e\u003e CommandMemory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    static {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        CommandMemory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TriviaManager(Storage storage) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.CommandMemory \u003d storage.Read_Trivia();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void learnInput(String InputCommand,Storage storage) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(CommandMemory.containsKey(InputCommand.split(\" \")[0])) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e oldlist \u003d new ArrayList\u003cString\u003e(CommandMemory.get(InputCommand.split(\" \")[0]));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(!oldlist.contains(InputCommand)){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                oldlist.add(InputCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                CommandMemory.put(InputCommand.split(\" \")[0], oldlist);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.Storage_Trivia(InputCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e newlist \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            newlist.add(InputCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            CommandMemory.put(InputCommand.split(\" \")[0],newlist);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.Storage_Trivia(InputCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showPossibleInputs(String key){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Could it be one of the below inputs?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(CommandMemory.get(key));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showAllMap(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        CommandMemory.entrySet().forEach(entry-\u003e{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(entry.getKey() + \"\\n\" +entry.getValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 43,
      "e0309463": 1,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/UI/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void readCommand() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        fullCommand \u003d reader.readLine().trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method prompts the user to input the password to login into GAZEEEBO and print a logo and message to welcome the user when he successfully log in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the logo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String showWelcome() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Input password to enter Gazeeebo:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String logo \u003d \" ___   ___  ___  ___  ___  ___  ___   ___ \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|     |   |   / |    |    |    |   \\\\ |   |\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|  __ |__ |  /  |___ |___ |___ |___| |   |\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|___| |   | /__ |___ |___ |___ |___/ |___|\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String welcomemessage \u003d \"\\nWelcome to Gazeeebo\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            readCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cStringBuilder\u003e password_list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            password_list \u003d store.readFromPasswordFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (fullCommand.equals(password_list.get(0).toString())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(welcomemessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                LocalDate a \u003d LocalDate.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Today is \" + a.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Incorrect password, please try again:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return welcomemessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * List of major features"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void MajorCategories() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cString\u003e majorCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"help\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"contacts\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"expenses\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"places\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"tasks\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"cap\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        majorCategories.add(\"spec\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        majorCategories.add(\"moduleplanner\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        majorCategories.add(\"notes\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"\\nContent Page:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"------------------ \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c majorCategories.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(i + 1 + \". \" + majorCategories.get(i));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"To exit: bye\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void upcomingTask(final ArrayList\u003cTask\u003e list) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.tasks.Deadline\") \u0026\u0026 !task.isDone) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description, task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                deadline.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                deadlineList.add(deadline);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.tasks.Event\") \u0026\u0026 !task.isDone) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event event \u003d new Event(task.description, task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                event.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                eventList.add(event);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Collections.sort(deadlineList, Comparator.comparing(u -\u003e u.by));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Collections.sort(eventList, Comparator.comparing(u -\u003e u.date));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Upcoming deadlines:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlineList.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(i + 1 + \".\" + deadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Upcoming events:\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(i + 1 + \".\" + eventList.get(i).listFormat());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void showProgessiveBar(final ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int undoneNumber \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int doneNumber \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (list.get(i).isDone) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                doneNumber++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                undoneNumber++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        System.out.println(undoneNumber+\" \"+doneNumber);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double progressPercentageTemp \u003d (doneNumber * 1.00 / (doneNumber + undoneNumber) * 1.00) * 100.000;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int progressPercentage \u003d (int) progressPercentageTemp;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        System.out.println(progressPercentageTemp+\" \"+progressPercentage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StringBuilder progressivebar \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c progressPercentage / 2; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            progressivebar.append(\"/\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c (100 - progressPercentage) / 2; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            progressivebar.append(\"_\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Task progressive: \" + progressivebar.toString() + \"(\" + progressPercentage + \"%)\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showDateFormatError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.err.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void showDeadlineDateFormatError() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static void showEventDateFormatError() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss-HH:mm:ss format\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void showIOErrorMessage(final Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.err.println(\"An IOException was caught :\" + e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void showErrorMessage(final Exception e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void showDontKnowErrorMessage() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 105,
      "mononokehime14": 19,
      "e0309463": 20,
      "yueyuu": 17
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * A base abstract class of all the gazeeebo.commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public abstract void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 4,
      "mononokehime14": 1,
      "e0309463": 11,
      "yueyuu": 6
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capCalculator/AddCAPCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capCalculator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Adds a new module to the CAP list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class AddCAPCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Index of the grade."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int GRADE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Add a new module into GPAList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      prints things to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist deals stores"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public AddCAPCommand(final Ui ui, final Map\u003cString,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cCAPCommandParser\u003e\u003e caplist) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toAdd \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\"Input in this format: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            + \"semNumber,Module_Code,total_MC,CAP\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toAdd \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toAdd \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitAddInput \u003d toAdd.split(\",\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String semNumber \u003d splitAddInput[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleCode \u003d splitAddInput[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int moduleCredit \u003d Integer.parseInt(splitAddInput[2]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String grade \u003d splitAddInput[GRADE_INDEX];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            CAPCommandParser newCAP \u003d new CAPCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (caplist.containsKey(semNumber)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                caplist.get(semNumber).add(newCAP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ArrayList\u003cCAPCommandParser\u003e semInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                semInfo.add(newCAP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                caplist.put(semNumber, semInfo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Successfully added: \" + moduleCode + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 59,
      "e0309463": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capCalculator/CalculateCAPCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capCalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Calculate the cap by using a formula."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class CalculateCAPCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Modules without a grade score (S/US/CS) \u003d 0.1."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double DONT_COUNT_SCORE \u003d 0.1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Calculate the CAP of all the modules."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist the object that deals"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                stores semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the CAP."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public double calculateCAP(final Map\u003cString,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cCAPCommandParser\u003e\u003e caplist) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double sumGPAMCS \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int sumMCS \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double scoreNotToCount \u003d DONT_COUNT_SCORE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                double score \u003d new ConvertGradeToScoreCommand()."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        converter(caplist.get(key).get(i).grade);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (score !\u003d scoreNotToCount) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sumGPAMCS +\u003d caplist.get(key).get(i).moduleCredit * score;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sumMCS +\u003d caplist.get(key).get(i).moduleCredit;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double cap \u003d sumGPAMCS / sumMCS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Calculate the GPA of the particular sem."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   the object that deals stores"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and GPA."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param semNumber the sem which you want to find the GPA."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the GPA."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public double calculateCAPPerSem(final Map\u003cString,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cCAPCommandParser\u003e\u003e caplist, final String semNumber) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double sumGPAMCS \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int sumMCS \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (key.equals(semNumber)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    double score \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            new ConvertGradeToScoreCommand()."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                    converter(caplist.get(key).get(i).grade);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (score !\u003d DONT_COUNT_SCORE) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        sumGPAMCS +\u003d caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                * score;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        sumMCS +\u003d caplist.get(key).get(i).moduleCredit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double cap \u003d sumGPAMCS / sumMCS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 68,
      "e0309463": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capCalculator/ConvertGradeToScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capCalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Coverts Grade to Integer score."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ConvertGradeToScoreCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * A/A+ \u003d 5.0."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double A_SCORE \u003d 5.0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * A- \u003d 4.5."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double A_MINUS_SCORE \u003d 4.5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * B+ \u003d 4.0."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double B_PLUS_SCORE \u003d 4.0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * B \u003d 3.5."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double B_SCORE \u003d 3.5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * B- \u003d 3.0."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double B_MINUS_SCORE \u003d 3.0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * C+ \u003d 2.5."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double C_PLUS_SCORE \u003d 2.5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * C \u003d 2.0."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double C_SCORE \u003d 2.0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * D+ \u003d 1.5."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double D_PLUS_SCORE \u003d 1.5;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * D \u003d 1.0."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double D_SCORE \u003d 1.0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * F \u003d 0.0."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double F_SCORE \u003d 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Modules without a grade score (S/US/CS) \u003d 0.1."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double DONT_COUNT_SCORE \u003d 0.1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Converts the alphabetical score to integer score."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param grade alphabetical score of the module"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the integer score of the grade according to NUS score syytem"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public double converter(final String grade) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double score;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"A+\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"A\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d A_SCORE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"A-\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d A_MINUS_SCORE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"B+\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d B_PLUS_SCORE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"B\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d B_SCORE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"B-\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d B_MINUS_SCORE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"C+\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d C_PLUS_SCORE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"C\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d C_SCORE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"D+\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d D_PLUS_SCORE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d D_SCORE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case \"F\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d F_SCORE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                score \u003d DONT_COUNT_SCORE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 98
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capCalculator/DeleteCAPCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capCalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Deletes a module from the CAP list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteCAPCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Delete the module from CAPList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      prints to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist deals stores"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                semNumber, moduleCode, moduleCredits and GPA score."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DeleteCAPCommand(final Ui ui,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            final Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleName \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\"Which module do you want to delete?\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    moduleName \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    moduleName \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean haveDeleted \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                /*Only one element in the array */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (moduleName.equals(caplist.get(key).get(0).moduleCode)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u0026\u0026 (caplist.get(key).size() \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    caplist.remove(key); //Remove the entire key"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    haveDeleted \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        if (moduleName.equals(caplist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                get(key).get(i).moduleCode)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            caplist.get(key).remove(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            haveDeleted \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!haveDeleted) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(ui.fullCommand.split(\" \")[1]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Successfully deleted: \" + moduleName + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 65,
      "e0309463": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capCalculator/FindCAPCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capCalculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Find a module by semNumber or moduleCode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindCAPCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Printing blank spaces."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int BLANK_SPACING \u003d 12;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Finds modules base on moduleCode and list it out."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        prints things to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public FindCAPCommand(final Ui ui,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                          final Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final String lineBreak) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String findInput \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case (1):"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\"Which modules do you want to find?\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    findInput \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case (2):"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    findInput \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isExist \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (caplist.get(key).get(i)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            moduleCode.equals(findInput)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        int noBlankSpacing \u003d BLANK_SPACING"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                - caplist.get(key).get(i).moduleCode.length();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toPrint +\u003d key + \"   | \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).moduleCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        for (int j \u003d 0; j \u003c noBlankSpacing; j++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            toPrint +\u003d \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toPrint +\u003d \"| \" + caplist.get(key)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                get(i).moduleCredit + \"  | \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).grade"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"\\n\" + lineBreak;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        isExist \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isExist) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(findInput + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Sem | Module code | MC | CAP\\n\" + lineBreak);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(toPrint);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 73,
      "e0309463": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capCalculator/ListCAPCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capCalculator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * List out the modules in the semester"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * or list out all modules and the CAP score will be shown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListCAPCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * For formatting the spacing between module name and vertical line."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int BLANK_SPACING \u003d 12;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Upper bound of the number of semesters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int UPPER_BOUNDARY \u003d 8;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Lower bound of the number of semesters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int LOWER_BOUNDARY \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * list out the modules and"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * show the CAP of all the modules or a particular sem."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        prints things to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ListCAPCommand(final Ui ui,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                          final Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final String lineBreak) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            CalculateCAPCommand calculatedGPA \u003d new CalculateCAPCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String listWhat \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            double cap;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\"Which sem do you want to list? \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            + \"all,1,2,3,4,5,6,7,8\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    listWhat \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    listWhat \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (\"all\".equals(listWhat)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                cap \u003d calculatedGPA.calculateCAP(caplist);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                listAll(caplist, lineBreak, cap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (Integer.parseInt(listWhat) \u003c\u003d UPPER_BOUNDARY"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(listWhat) \u003e\u003d LOWER_BOUNDARY) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                cap \u003d calculatedGPA.calculateCAPPerSem(caplist, listWhat);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                listSem(caplist, ui, lineBreak, cap, listWhat);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method list out all the modules and show the accumulative cap."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and GPA score."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param cap       CAP of the modules."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private void listAll(final Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final String lineBreak, final double cap) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Sem | Module code | MC | CAP\\n\" + lineBreak);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int noBlankSpacing \u003d BLANK_SPACING"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        - caplist.get(key).get(i).moduleCode.length();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(key + \"   | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + caplist.get(key).get(i).moduleCode);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int j \u003d 0; j \u003c noBlankSpacing; j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"| \" + caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"  | \" + caplist.get(key).get(i).grade"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Total CAP: \" + cap + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method list out the modules"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * and show the GPA of the a particular sem."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        prints things to the user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and GPA score."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param cap       CAP of the modules."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param semNumber semester that user input"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private void listSem(final Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final Ui ui, final String lineBreak,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final double cap, final String semNumber) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Sem | Module code | MC | CAP\\n\" + lineBreak);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (key.equals(semNumber)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        int noBlankSpacing \u003d BLANK_SPACING"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                - caplist.get(key).get(i).moduleCode.length();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        System.out.print(key + \"   | \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).moduleCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        for (int j \u003d 0; j \u003c noBlankSpacing; j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            System.out.print(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        System.out.print(\"| \" + caplist.get(key)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                get(i).moduleCredit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"  | \" + caplist.get(key).get(i).grade"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        isEmpty \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isEmpty) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Sem \" + semNumber + \" CAP: \" + cap + \"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"No modules in this semester!\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Invalid semester number.\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 142,
      "e0309463": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/AddContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Adds a new contact to the contact list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class AddContactCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Add new contact into the contact page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          deals with printing things to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList map each name to its own phone number"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public AddContactCommand(final Ui ui,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final Map\u003cString, String\u003e contactList)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toAdd \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitInput \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (splitInput.length) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\"Input in this format: Name,Number\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toAdd \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toAdd \u003d splitInput[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitCommand \u003d toAdd.split(\",\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String name \u003d splitCommand[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String number \u003d splitCommand[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            contactList.put(name, number);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Successfully added: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    + toAdd + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 46,
      "e0309463": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/DeleteContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteContactCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Deletes the contact from the contact list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList map each name to its own phone number"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DeleteContactCommand(final Ui ui,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                final Map\u003cString, String\u003e contactList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String nameToDelete \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What is the name you want to delete?\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToDelete \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 1; i \u003c ui.fullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    nameToDelete \u003d nameToDelete."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            concat(ui.fullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToDelete \u003d nameToDelete.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (contactList.containsKey(nameToDelete)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                contactList.remove(nameToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Successfully deleted: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + nameToDelete + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(nameToDelete + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 43,
      "e0309463": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/FindContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Finds a contact frm contact list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindContactCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * space between first"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * alphabelt to first vertical line separator."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int SPACE_NUMBER \u003d 30;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Print the line separator between contacts."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Finds the contact number with the contact name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          deals with printing things to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList map each name to its own phone number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public FindContactCommand(final Ui ui,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                              final Map\u003cString, String\u003e contactList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String nameToFind \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isExist \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What is the name you want to find?\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToFind \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 1; i \u003c ui.fullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    nameToFind \u003d nameToFind."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            concat(ui.fullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToFind \u003d nameToFind.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String keys : contactList.keySet()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (keys.contains(nameToFind)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    isExist \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toPrint.append(keys);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    int l \u003d SPACE_NUMBER - keys.length();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toPrint.append(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toPrint.append(\"| \").append(contactList.get(keys))."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            append(\"\\n\").append(LINEBREAK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isExist) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(nameToFind + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Name:                         \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"| Number:\\n\" + LINEBREAK + toPrint);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 70
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/ListContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * List all the contacts in the list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListContactCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Separates contacts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int SPACE_NUMBER \u003d 30;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Print the line separator between contacts."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * List out all the phone numbers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList to Map each name to its phone number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ListContactCommand(final Map\u003cString, String\u003e contactList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Name:                         \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"| Number:\\n\" + LINEBREAK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!key.contains(\"NUS\") || !key.contains(\"CEG\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                forPrint(contactList, LINEBREAK, key);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"\\nCEG CONTACTS:\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (key.contains(\"CEG\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                forPrint(contactList, LINEBREAK, key);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"\\nNUS CONTACTS:\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (key.contains(\"NUS\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                forPrint(contactList, LINEBREAK, key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * To print the contact list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contact   Map each name to its phone number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param key       gets the key of the contact."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private void forPrint(final Map\u003cString, String\u003e contact,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final String lineBreak, final String key) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(key);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int l \u003d SPACE_NUMBER - key.length();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"| \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(contact.get(key) + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 64
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/UndoContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class UndoContactCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Undo previous commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList to Map each name to its phone number."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param oldcontacts keep deleted contacts"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage     stores"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the contactList"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch error if error during access to file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static Map\u003cString, String\u003e undo(Map\u003cString, String\u003e contactList,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                           final Stack\u003cMap\u003cString, String\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                                   oldcontacts,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                           final Storage storage)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (!oldcontacts.empty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            contactList \u003d oldcontacts.peek();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + contactList.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToContactFile(toStore);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            oldcontacts.pop();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 39
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class adds the expense from the expense list and expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class AddExpenseCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method adds the expense from the expense list and expenses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage  the object that deals with storing data,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                 in this case storing data in the expenses map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public AddExpenseCommand(final Ui ui,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                             final Storage storage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                             final Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"What did you buy:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String item \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"How much did you spend:\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String price \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String itemAndPrice \u003d item + \", \" + price;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Date of purchase:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String date \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate dateOfPurchase \u003d LocalDate.parse(date, fmt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        //Storing expenses value as an array to the date keys."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        //If the item were bought on the same date as a previous item,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        //add the item in the array under the same key."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (dateOfPurchase.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenses.get(key).add(itemAndPrice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                isEqual \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if (!isEqual) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            itemAndPriceList.add(itemAndPrice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            expenses.put(dateOfPurchase,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    itemAndPriceList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Successfully added: \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"\\n\" + itemAndPrice"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \", bought on \" + dateOfPurchase);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /*Stores the updated expenses map after deletion of expenses*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String toStore \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + expenses.get(key).get(i) + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + expenses.get(key).get(0) + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        storage.Storages_Expenses(toStore);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 76,
      "JasonLeeWeiHern": 6,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/DeleteExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class deletes the expense from the expense list and expenses map."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DeleteExpenseCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method deletes the expense from the expense list and expenses map."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage  the object that deals with storing data,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                 in this case storing data in the expenses map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public DeleteExpenseCommand(final Ui ui,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                final Storage storage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                final Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                        expenses)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /* Prints list of expenses*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenseList.add(expenses.get(key).get(i)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" | bought on \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (int j \u003d 0; j \u003c expenseList.size(); j++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println((j + 1) + \". \" + expenseList.get(j));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String expenseIndex \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        int index \u003d Integer.parseInt(expenseIndex) - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Successfully deleted: \" + expenseList.get(index));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String getKeyFromList \u003d expenseList.get(index).split(\"on \")[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate getKey \u003d LocalDate.parse(getKeyFromList, fmt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String getValueFromList \u003d expenseList.get(index).split(\" | \")[0].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (key.equals(getKey)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (expenses.get(key).get(i).contains(getValueFromList)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        expenses.get(key).remove(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenseList.remove(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /*Stores the updated expenses map after deletion of expenses*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String toStore \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + expenses.get(key).get(i)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + expenses.get(key).get(0)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        storage.Storages_Expenses(toStore);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 81,
      "JasonLeeWeiHern": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/ExpenseListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class prints the list of all the expenses."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpenseListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method prints the list of all the expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ExpenseListCommand(final Ui ui,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                              final Map\u003cLocalDate,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                      ArrayList\u003cString\u003e\u003e expenses) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Here is the list of your expenses:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenseList.add(expenses.get(key).get(i)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" | bought on \" + key);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (int j \u003d 0; j \u003c expenseList.size(); j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println((j + 1) + \". \" + expenseList.get(j));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 36
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/FindExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This method finds expenses bought on the same date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class FindExpenseCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method finds expenses bought on the same date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public FindExpenseCommand(final Ui ui,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                              final Map\u003cLocalDate,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                      ArrayList\u003cString\u003e\u003e expenses) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String date \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate dateOfPurchase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            dateOfPurchase \u003d LocalDate.parse(date, fmt);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isExist \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (dateOfPurchase.equals(key)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \".\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + expenses.get(key).get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isExist \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!isExist) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(date + \" is not found in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Wrong date format\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 50,
      "JasonLeeWeiHern": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/UndoExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Undo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * @param"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * @throws IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoExpenseCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e undoExpenses("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            final Stack\u003cMap\u003cLocalDate,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ArrayList\u003cString\u003e\u003e\u003e oldExpenses,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            final Storage storage) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!oldExpenses.empty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            expenses \u003d oldExpenses.peek();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + expenses.get(key).get(i)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + expenses.get(key).get(0)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages_Expenses(toStore);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 19,
      "e0309463": 31
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/help/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.help;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.help.HelpText;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_PAGE \u003d \"tasks page\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_TODO \u003d \"tasks todo\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_DEADLINE \u003d \"tasks deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_EVENT \u003d \"tasks event\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_LIST \u003d \"tasks list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_DELETE \u003d \"tasks delete\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_DONE \u003d \"tasks done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //gazeeebo.help COMMAND or just gazeeebo.help"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //description of a gazeeebo.help can be empty"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        HelpText help \u003d new HelpText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert command.length !\u003d 0 : \"Bug in parser that affects HelpCommand\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            description \u003d HelpText.commandFormat + System.lineSeparator() + System.lineSeparator() +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.commandsHeader + HelpText.pageSeparator +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.tasksPageHeader + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.todo + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.deadline + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.event + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.list + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.delete + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.done + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.tasksFind + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.scheduleDaily + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.scheduleWeekly + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.scheduleMonthly + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.doWithinPeriod + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.addTentativeEvent + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.confirmTentativeEvent + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.tasksEdit + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.fixedDurationTask + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.categorizeTasks + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.monthlyCalendarView + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.annualCalendarView + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.undone + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.doneList + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.doAfterTask + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.snooze + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.reschedule + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.recurringTask + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.undoneList + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.tagging + HelpText.commandSeparator +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    HelpText.undoCommands + HelpText.commandSeparator;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_PAGE: description \u003d help.tasksPageHeader;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_TODO: description \u003d help.todo;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_DEADLINE: description \u003d help.deadline;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_EVENT: description \u003d help.event;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_LIST: description \u003d help.list;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_DELETE: description \u003d help.delete;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS_DONE: description \u003d help.done;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                description \u003d \"OOPS!!! There is no such command.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 95
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Adds a new note to a particular day, week or month."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String DAY \u003d \"day\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String NOTE_DAILY \u003d \"NoteDaily.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String NOTE_WEEKLY \u003d \"NoteWeekly.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String NOTE_MONTHLY \u003d \"NoteMonthly.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Decodes the user\u0027s input and handles incorrect input formats."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param command the command the user inputs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param commandName the name of the command ie. addNote, editNote, deleteNote or listNote"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the date specified by the user as a LocalDate object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException when the users input format is wrong"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate processCommand(String[] command, String commandName) throws DukeException{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //addNote day/week/month yyyy-MM-dd"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //\u003cthe note they want to add\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (!(command[1].equals(DAY) || command[1].equals(WEEK) || command[1].equals(MONTH))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The second word in the command has to be \\\u0027day\\\u0027, \\\u0027week\\\u0027 or \\\u0027month\\\u0027.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException b) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a(n) \" + commandName +\" cannot be empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(MONTH)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                command[2] \u003d command[2] + \"-01\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(command[2], Note.noteFormatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(WEEK) \u0026\u0026 !date.getDayOfWeek().equals(DayOfWeek.MONDAY)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"OOPS!!! The date provided must be a Monday.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a date.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            //return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException a) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(MONTH)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"The date has to been in YYYY-MM format.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"The date has to been in YYYY-MM-DD format.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a new note to the specified day, week or month if there are existing notes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Else creates a new note object with the new note as the first note."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * After that, writes to the text file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listOfNotes the list of Notes to add the new note to depending on if its a day, week or month"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userDate the date specified by the user as a LocalDate object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the new note that the user wants to add"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param date the date specified by the user as a String object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the new note added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected Note addToList(ArrayList\u003cNote\u003e listOfNotes, LocalDate userDate, String usersNote, String date,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                             String fileName) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean hasNote \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteInQuestion \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listOfNotes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(userDate)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                n.notes.add(usersNote);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteInQuestion \u003d n;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                hasNote \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (!hasNote) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Note newNote \u003d new Note(date, usersNote);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            listOfNotes.add(newNote);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteInQuestion \u003d newNote;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteStorage.writeToFile(fileName, listOfNotes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return noteInQuestion;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the new note had been added successfully."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the note that the user wants to add"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param size the number of notes the user has for the specified period after the new note has been added"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printConfirmationMessage(String usersNote, int size, String period) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this note to that \" + period +  \":\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" note(s) for that \" + period + \".\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], NOTE_DAILY);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], NOTE_WEEKLY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], NOTE_MONTHLY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 161
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deletes a note for a particular day, week or month."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class DeleteNoteCommand extends EditNoteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes the note specified if the note exists. Else it throws an exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param noteNumber the index of the note to delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToEdit the list of Notes that contains the note to delete depending on if its a day, week or month"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToEdit the start date of the period of the note to delete"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the note that was deleted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the note to delete does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String deleteNoteInList(int noteNumber, ArrayList\u003cNote\u003e listToEdit, LocalDate dateToEdit,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                String period, String fileName) throws DukeException{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listToEdit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToEdit)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String deletedNote \u003d n.notes.get(noteNumber-1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    n.notes.remove(noteNumber-1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    if (n.notes.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        listToEdit.remove(n);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NoteStorage.writeToFile(fileName, listToEdit);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    return deletedNote;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"OOPS!!! That note number does not exist.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IOException f) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The \" + fileName + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"OOPS!!! There are no notes for this \" + period + \" to delete.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the note has been successfully deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the note that was deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printDeleteSuccess(String usersNote, String period) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve deleted this note for that \" + period +  \":\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //deleteNote day/week/month yyyy-MM-dd \u003cnote_num\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"deleteNote\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String noteToBeDeleted;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.daily, userDate, command[1], NOTE_DAILY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.weekly, userDate, command[1], NOTE_WEEKLY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.monthly, userDate, command[1], NOTE_MONTHLY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: noteToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteToBeDeleted !\u003d null : \"there is a bug in DeleteNoteCommand\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printDeleteSuccess(noteToBeDeleted, command[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 109
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Edits an existing note for a particular day, week or month."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class EditNoteCommand extends AddNoteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the specified note if it exists and writes to the text file. Else throws an exception."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param noteNumber the index of the note that the user wants to edit"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToEdit the list of Notes that contains the note to edit depending on if its a day, week or month"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToEdit the start date of the period of the note to edit"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param editedNote the edited version of the note"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the note to edit does not exist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void editNoteInList(int noteNumber, ArrayList\u003cNote\u003e listToEdit, LocalDate dateToEdit,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                  String editedNote, String period, String fileName) throws DukeException{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listToEdit) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToEdit)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    n.notes.set(noteNumber-1, editedNote);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NoteStorage.writeToFile(fileName, listToEdit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"OOPS!!! That note number does not exist.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IOException f) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The \" + fileName + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"OOPS!!! There are no notes for this \" + period + \" to edit from.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the note has been successfully edited."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the edited version of the note"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printEditSuccess(String usersNote, String period) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve edited this note for that \" + period +  \":\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //editNote day/week/month yyyy-MM-dd \u003cnote_num \u003d index+1\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //\u003cthe note they want to edit to become\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], NOTE_DAILY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], NOTE_WEEKLY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], NOTE_MONTHLY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 105
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out the notes for a particular day, week or month."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ListNoteCommand extends AddNoteCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //listNote day/week/month yyyy-MM-dd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the notes with indexes from a given list of notes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listOFNotes the list of notes for the specified period"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void printOutNoteList(ArrayList\u003cString\u003e listOFNotes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert !listOFNotes.isEmpty() : \"there is an empty note section of a date (bug in DeleteNoteCommand)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c listOFNotes.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i+1) + \". \" + listOFNotes.get(i));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Finds the list of notes for the specified period and prints them out."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param periodList the list of Notes for the specified period depending on if its a day, week or month"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToList the date specified by the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if there are no notes for the specified period"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printNoteList(ArrayList\u003cNote\u003e periodList, LocalDate dateToList, String period) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: periodList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToList)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Here are your notes for that \" + period + \":\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printOutNoteList(n.notes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"There are no notes for that \" + period + \".\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"listNote\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printNoteList(NoteList.daily, userDate, command[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printNoteList(NoteList.weekly, userDate, command[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printNoteList(NoteList.monthly, userDate, command[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in ListNoteCommand\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 83
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/ModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.parsers.GeneralNoteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NotePageStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deals with the commands input on the module page."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_NAME \u003d \"edit name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ADD_ASSMT \u003d \"add assmt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_ASSMT \u003d \"edit assmt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_WEIGHTAGE \u003d \"edit weightage\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE_ASSMT \u003d \"delete assmt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ADD_MSC \u003d \"add msc\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_MSC \u003d \"edit msc\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE_MSC \u003d \"delete msc\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String COMMANDS \u003d \"commands\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ESC \u003d \"esc\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Checks if the module specified exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param moduleName the module to be found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the Module if found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the module does not exist"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Module findModule(String moduleName) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m: GeneralNotePage.modules) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(moduleName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"Sorry there is no such module.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void showListOfCommands() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"1. View module notes: \" + VIEW);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"2. Edit module name: \" + EDIT_NAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"3. Add an assessment: \" + ADD_ASSMT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"4. Edit an assessment name: \" + EDIT_ASSMT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"5. Edit an assessment\u0027s weightage: \" + EDIT_WEIGHTAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"6. Delete an assessment: \" + DELETE_ASSMT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"7. Add a miscellaneous information: \" + ADD_MSC);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"8. Edit a miscellaneous information: \" + EDIT_MSC);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"9. Delete a miscellaneous information: \" + DELETE_MSC);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"10. View list of commands for module page: \" + COMMANDS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"11. View help page: \" + HELP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"12. View individual help: help COMMAND_NAME\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"13. Exit module notes: \" + ESC);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Decodes the commands input on the module page. */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Welcome to your module page! Which module do you want to view/edit?\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module \u003d findModule(ui.fullCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Going back to notes page...\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            GeneralNoteCommandParser.showListOfCommands();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What would you like to do?\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        showListOfCommands();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (!ui.fullCommand.equals(ESC)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (ui.fullCommand.equals(VIEW)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.viewModule();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(EDIT_NAME)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.editName(ui);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(ADD_ASSMT)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.addAssessment(ui);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(EDIT_ASSMT)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.editAssessmentName(ui);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(EDIT_WEIGHTAGE)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.editAssessmentWeightage(ui);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(DELETE_ASSMT)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.deleteAssessment(ui);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(ADD_MSC)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.addMiscellaneous(ui);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(EDIT_MSC)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.editMiscellaneous(ui);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(DELETE_MSC)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                module.deleteMiscellaneous(ui);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(COMMANDS)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                showListOfCommands();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[0].equals(HELP)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                (new HelpCommand()).execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Going back to notes page...\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        GeneralNoteCommandParser.showListOfCommands();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 134
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/AddPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class AddPlacesCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method allows add a new place."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places  Map each place to a location"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public AddPlacesCommand(final Ui ui, final Storage storage, final Map\u003cString, String\u003e places) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] parseInput \u003d ui.fullCommand.split(\"-\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] splitInfo \u003d parseInput[1].split(\",\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String name \u003d splitInfo[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String number \u003d splitInfo[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            places.put(name, number);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Successfully added :\" + parseInput[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\" + places.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.storagesPlaces(toStore);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Please Input in the correct format\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 37
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/DeletePlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeletePlacesCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Delete a place from the list of places."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places  Map each place to a location"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public DeletePlacesCommand(Ui ui, Storage storage, Map\u003cString, String\u003e places) throws IOException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!ui.fullCommand.equals(\"delete\") \u0026\u0026 ui.fullCommand.contains(\"-\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String placeToDelete \u003d ui.fullCommand.split(\"-\")[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (places.containsKey(placeToDelete)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                places.remove(placeToDelete);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Successfully deleted: \" + placeToDelete);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(placeToDelete + \" is not found in the list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Incorrect format: delete-place\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String toStore \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            toStore \u003d toStore.concat(key + \"|\" + places.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        storage.storagesPlaces(toStore);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 39
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/FindPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindPlacesCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Search for a place prints places that you searched for."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each place to a location"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param lineBreak String separator"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public FindPlacesCommand(Ui ui, Map\u003cString,String\u003e places, String lineBreak) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (ui.fullCommand.equals(\"find\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You need to indicate what you want to find, Format: delete name\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String placeSearchingFor \u003d ui.fullCommand.split(\"-\")[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Boolean isFound \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String keys : places.keySet()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (keys.contains(placeSearchingFor)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(keys);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    int whiteSpaces \u003d 50 - keys.length();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    for (int i \u003d 0; i \u003c whiteSpaces; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.print(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\"| \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(places.get(keys) + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (!isFound) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(placeSearchingFor + \" is not found in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 40
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/ListPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListPlacesCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method list out all the places."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each place to a location"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param lineBreak String separator"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ListPlacesCommand(Map\u003cString,String\u003e places, String lineBreak) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Room:                                             | Location:\\n\" + lineBreak);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(key);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int whiteSpaces \u003d 50 - key.length();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c whiteSpaces; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"| \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(places.get(key) + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 26
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/UndoPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoPlacesCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *  Undo places previous command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places map of current places"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldplaces stack of map of previous places"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage object that stores and read from txt files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return previous map before the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static Map\u003cString,String\u003e undoPlaces(Map\u003cString, String\u003e places, Stack\u003cMap\u003cString, String\u003e\u003e oldplaces,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                         Storage storage) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!oldplaces.empty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            places \u003d oldplaces.peek();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String key:places.keySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            toStore \u003d toStore.concat(key + \"|\" + places.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.storagesPlaces(toStore);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldplaces.pop();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return places;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 37
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleDailyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has on the specified day."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleDailyCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String EVENT \u003d \"gazeeebo.tasks.Event\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String DEADLINE \u003d \"gazeeebo.tasks.Deadline\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String TIMEBOUND \u003d \"gazeeebo.tasks.Timebound\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public final static String LIST_NOTE_MESSAGE \u003d \"\\nNotes:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleDaily \u003cyyyy-MM-dd\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleDaily command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param commandStack not used"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param deletedTask not used"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The command should be in the format \\\"scheduleDaily yyyy-MM-dd\\\".\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d LocalDate.parse(command[1], fmt);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a scheduleDaily cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TIMEBOUND:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (userDate.equals(startDate) || userDate.equals(endDate) ||"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        (userDate.isAfter(startDate) \u0026\u0026 userDate.isBefore(endDate))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (userDate.equals(tDate)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled on this day!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + userDate.format(fmt) + \":\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(LIST_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        printNotes(NoteList.daily, userDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printNotes(ArrayList\u003cNote\u003e periodList, LocalDate dateToList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: periodList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToList)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ListNoteCommand lnc \u003d new ListNoteCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                lnc.printOutNoteList(n.notes);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 121
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleMonthlyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has in a specified month."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleMonthlyCommand extends ScheduleDailyCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleMonthly \u003cyyyy-MM\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleMonthly command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws NullPointerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The command should be in the format \\\"scheduleMonthly yyyy-MM\\\".\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate startMonth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate endMonth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            startMonth \u003d LocalDate.parse(command[1]+\"-01\", fmt);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String lengthOfMonth \u003d Integer.toString(startMonth.lengthOfMonth());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            endMonth \u003d LocalDate.parse(command[1] + \"-\" + lengthOfMonth, fmt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM format.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a scheduleMonthly cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TIMEBOUND:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (!(endDate.isBefore(startMonth) || startDate.isAfter(endMonth))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (tDate !\u003d null \u0026\u0026 startMonth.getYear() \u003d\u003d tDate.getYear() \u0026\u0026"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    startMonth.getMonthValue() \u003d\u003d tDate.getMonthValue()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled for this month!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + command[1] + \":\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(LIST_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        printNotes(NoteList.monthly, startMonth);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 97
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleWeeklyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has in a specified week."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleWeeklyCommand extends ScheduleDailyCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleWeekly \u003cyyyy-MM-dd(Mon) yyyy-MM-dd(Sun)\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final int ONE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleWeekly command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws NullPointerException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate mon;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate sun;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] date \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (date.length \u003e 3) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The command should be in the format \\\"scheduleWeekly yyyy-MM-dd yyyy-MM-dd\\\".\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                mon \u003d LocalDate.parse(date[1], fmt);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"OOPS!!! The description of a scheduleWeekly cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                sun \u003d LocalDate.parse(date[2], fmt);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException a) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"OOPS!!! Please specify an end date.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            long numOfDays \u003d DAYS.between(mon, sun) + 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (mon.getDayOfWeek() !\u003d DayOfWeek.MONDAY) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The first date has to be a Monday.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (sun.getDayOfWeek() !\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The second date has to be a Sunday.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (mon.isAfter(sun)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The second date has to be later than the first date.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (numOfDays !\u003d ONE_WEEK) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The duration you have specified is longer than 1 week.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(numOfDays);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                assert numOfDays \u003e 7 : \"numOfDays should be more than 7\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TIMEBOUND:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (endDate.equals(mon) || (startDate.isBefore(mon) \u0026\u0026 endDate.isAfter(mon)) ||"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        startDate.equals(mon) || (startDate.isAfter(mon) \u0026\u0026 startDate.isBefore(sun)) ||"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        startDate.equals(sun)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (tDate !\u003d null \u0026\u0026 (tDate.equals(mon) || (tDate.isAfter(mon) \u0026\u0026"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tDate.isBefore(sun)) || tDate.equals(sun))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled for this week!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for the week:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(LIST_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        printNotes(NoteList.weekly, mon);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 131
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/CompletedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows users to mark a technical elective as completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CompletedCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Communication and Networking specialization."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int COMMS_NETWORKING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Embedded Computing specialization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int EMBEDDED_COMPUTING_INDEX \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Intelligent Systems specialization."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INTELLIGENT_SYSTEMS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Interactive Digital Media specialization."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INTERACTIVE_DIGITAL_MEDIA_INDEX \u003d 4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Large-Scale Computing specialization."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int LARGE_SCALE_COMPUTING_INDEX \u003d 5;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of System-On-A-Chip Design specialization."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int SYS_DESIGN_INDEX \u003d 6;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Allows user to record the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * technical electives they have completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       the object that deals with storing data,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      in this case storing data in the expenses map"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param specMap       the map that map list of"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      technical electives to their"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      respective specializations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param completedEMap the map that maps the completed electives to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      their respective specializations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException throws a custom exception if"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                       module index does not exist"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException   catch any error if read file fails"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public CompletedCommand(final Ui ui,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            final Storage storage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            final Map\u003cString, ArrayList\u003cModuleCategory\u003e\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    specMap,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            final Map\u003cString, ArrayList\u003cString\u003e\u003e completedEMap)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e completedElectiveList \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    new ArrayList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Which specialization number\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"is your module under?\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e specList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Communications \u0026 Networking\"); //index 0"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Embedded Computing\"); //index 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Intelligent Systems\"); //index 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Interactive Digital Media\"); //index 3"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Large-Scale Computing\"); //index 4"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"System-On-A-Chip Design\"); //index 5"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c specList.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \". \" + specList.get(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int specNumber \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specNumber \u003c 0 || specNumber \u003e specList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Specialization index does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String checkKey \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specNumber \u003d\u003d COMMS_NETWORKING_INDEX) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(COMMS_NETWORKING_INDEX - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d EMBEDDED_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(EMBEDDED_COMPUTING_INDEX - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d INTELLIGENT_SYSTEMS_INDEX) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(INTELLIGENT_SYSTEMS_INDEX - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d INTERACTIVE_DIGITAL_MEDIA_INDEX) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(INTERACTIVE_DIGITAL_MEDIA_INDEX - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d LARGE_SCALE_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(LARGE_SCALE_COMPUTING_INDEX - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d SYS_DESIGN_INDEX) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(SYS_DESIGN_INDEX - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Which module have you completed?\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c specMap.get(checkKey).size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + specMap.get(checkKey).get(i).code);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int moduleCodeIndex \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (moduleCodeIndex \u003c 0 || moduleCodeIndex"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \u003e specMap.get(checkKey).size()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"The module index\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"does not exist.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String moduleCode"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \u003d specMap.get(checkKey).get(moduleCodeIndex - 1).code;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (checkKey.equals(key)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    completedEMap.get(key).add(moduleCode);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!isEqual) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedElectiveList.add(moduleCode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedEMap.put(checkKey, completedElectiveList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"You have completed \" + moduleCode + \".\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreCN \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreEC \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIS \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIDM \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreLS \u003d \"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreSC \u003d \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (key.equals(\"Communications \u0026 Networking\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Communications\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"\u0026 Networking\").size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreCN \u003d toStoreCN.concat(\"Communications \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"\u0026 Networking\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Communications \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"\u0026 Networking\").get(i));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Embedded Computing\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Embedded\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreEC \u003d toStoreEC.concat(\"Embedded Computing\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Embedded\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\").get(i));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Intelligent\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Systems\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Systems\").size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"Intelligent\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Systems\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Systems\").get(i));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Interactive\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Digital Media\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Interactive\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Digital Media\").size(); i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"Interactive\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Digital Media\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Interactive\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Digital Media\").get(i));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Large-Scale\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"Large-Scale\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\").get(i));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Design\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Design\").size(); i++) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Design\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Design\").get(i));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String allCompletedE \u003d toStoreCN"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreEC"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreIS"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreIDM"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreLS"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreSC;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                storage.completedElectivesStorage(allCompletedE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 212
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/ListOfSpecializationAndModules.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ListOfSpecializationAndModules {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Communication and Networking specialization."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int COMMS_NETWORKING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Embedded Computing specialization."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int EMBEDDED_COMPUTING_INDEX \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Intelligent Systems specialization."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INTELLIGENT_SYSTEMS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Interactive Digital Media specialization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INTERACTIVE_DIGITAL_MEDIA_INDEX \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Large-Scale Computing specialization."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int LARGE_SCALE_COMPUTING_INDEX \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of System-On-A-Chip Design specialization."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int SYS_DESIGN_INDEX \u003d 6;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Stores all the technical electives and specializations."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * in this case storing data in the expenses map"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param specMap the map that map list of technical electives to their"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                respective specializations"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ListOfSpecializationAndModules(final Map\u003cString,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cModuleCategory\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                                  specMap) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e specList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Communications \u0026 Networking\"); //index 0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Embedded Computing\"); //index 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Intelligent Systems\"); //index 2"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Interactive Digital Media\"); //index 3"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Large-Scale Computing\"); //index 4"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"System-On-A-Chip Design\"); //index 5"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e commsAndNetworkingBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e embComputingBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e intSystemsBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e intDigMediaBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e largeScaleComputingBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e sysDesignBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs2107 \u003d \"CS2107 Introduction to Information System\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3103 \u003d \"CS3103 Computer Networks Practice\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee3131C \u003d \"EE3131C Communication Systems\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4222 \u003d \"CS4222 Wireless Networking\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4226 \u003d \"CS4226 Internet Architecture\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4210 \u003d \"EE4210 Network Protocols and Applications\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs5223 \u003d \"CS5223 Distributed Systems\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs5321 \u003d \"CS5321 Network Security\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String eE5135 \u003d \"EE5135 Digital Communications\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cg3207 \u003d \"CG3207 Computing Architecture\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3211 \u003d \"CS3211 Parallel and Concurrent Programming\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee3731C \u003d \"EE3731C Signal Processing Methods\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4223 \u003d \"CS4223 Multi-core Architectures\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4218 \u003d \"EE4218 Embedded Hardware System Design\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4415 \u003d \"EE4218 Embedded Hardware System Design\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs5272 \u003d \"CS5272 Embedded Software Design\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee5903 \u003d \"EE5903 Real-time Systems\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3243 \u003d \"CS3243 Introduction to Artificial Intelligence\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3244 \u003d \"CS3244 Machine Learning\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee3331C \u003d \"EE3331C Feedback Control Systems\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4244 \u003d \"CS4244 Knowledge-based Systems\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4246 \u003d \"CS4246 AI Planning and Decision Making\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4248 \u003d \"CS4248 Natural Language Processing\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4305 \u003d \"EE4305 Fuzzy/Neural Systems for Intelligent Robotics\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4308 \u003d \"EE4308 Autonomous Robot Systems\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs5242 \u003d \"CS5242 Neural Networks \u0026 Deep Learning\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs5339 \u003d \"CS5339 Theory and Algorithms for Machine Learning\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee5904 \u003d \"EE5904 Neural Networks\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee5907 \u003d \"EE5907 Pattern Recognition\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs2108 \u003d \"CS2108 Introduction to Media Computing\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3240 \u003d \"CS3240 Interaction Design\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3241 \u003d \"CS3241 Computer Graphics\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3242 \u003d \"CS3242 3D Modeling and Animation\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3247 \u003d \"CS3247 Game Development\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4240 \u003d \"CS4240 Interaction Design\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"for Virtual and Augmented Reality\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4243 \u003d \"CS4243 Computer Vision and Pattern Recognition\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4247 \u003d \"CS4247 Graphics Rendering Techniques\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4249 \u003d \"CS4249 Phenomena and Theories of\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Human-Computer Interaction\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4347 \u003d \"CS4347 Sound and Music Computing\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4351 \u003d \"CS4351 Real-Time Graphics\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4212 \u003d \"EE4212 Computer Vision\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4604 \u003d \"EE4604 Biological Perception in Digital Media\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4704 \u003d \"EE4704 Introduction to\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Computer Vision and Image Processing\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs2101 \u003d \"CS2101 Database Systems\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3210 \u003d \"CS3210 Parallel Computing\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3230 \u003d \"CS3230 Design \u0026 Analysis of Algorithms\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3235 \u003d \"CS3235 Computer Security\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs3223 \u003d \"CS3223 Database Systems Implementation\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4211 \u003d \"CS4211 Formal Methods for Software Engineering\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4221 \u003d \"CS4221 Database Applications Design and Tuning\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4224 \u003d \"CS4224 Distributed Databases\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String cs4231 \u003d \"CS4231 Parallel \u0026\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Distributed Algorithms\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee3104C \u003d \"EE3104C Introduction to RF \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"and Microwave Systems \u0026 Circuit\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee3408C \u003d \"EE3408C Integrated Analog Design\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4104 \u003d \"EE4101 Microwave Circuits \u0026 Devices\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4112 \u003d \"EE4112 Radio Frequency Design and Systems\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee4505 \u003d \"EE4505 Power Semiconductor Devices \u0026 ICs\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String ee5518 \u003d \"EE5518 VLSI Digital Circuit Design\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn1 \u003d new ModuleCategory(cs2107);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn2 \u003d new ModuleCategory(cs3103);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn3 \u003d new ModuleCategory(ee3131C);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn4 \u003d new ModuleCategory(cs4222);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn4.isDepth \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn5 \u003d new ModuleCategory(cs4226);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn5.isDepth \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn6 \u003d new ModuleCategory(ee4210);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn6.isDepth \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn7 \u003d new ModuleCategory(cs5223);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn7.isDepth \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn8 \u003d new ModuleCategory(cs5321);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn8.isDepth \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn9 \u003d new ModuleCategory(eE5135);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn9.isDepth \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn4);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn5);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn6);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn7);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn8);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn9);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(COMMS_NETWORKING_INDEX - 1),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                commsAndNetworkingBD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb1 \u003d new ModuleCategory(cg3207);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb2 \u003d new ModuleCategory(cs2107);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb3 \u003d new ModuleCategory(cs3211);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb4 \u003d new ModuleCategory(ee3731C);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb4.isBreadth \u003d true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb5 \u003d new ModuleCategory(cs4222);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb5.isDepth \u003d true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb6 \u003d new ModuleCategory(cs4223);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb6.isDepth \u003d true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb7 \u003d new ModuleCategory(ee4218);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb7.isDepth \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb8 \u003d new ModuleCategory(ee4415);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb8.isDepth \u003d true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb9 \u003d new ModuleCategory(cs5272);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb9.isDepth \u003d true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb10 \u003d new ModuleCategory(ee5903);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb10.isDepth \u003d true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb3);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb4);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb5);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb6);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb7);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb8);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb9);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb10);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(EMBEDDED_COMPUTING_INDEX - 1), embComputingBD);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is1 \u003d new ModuleCategory(cs3243);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is2 \u003d new ModuleCategory(cs3244);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is3 \u003d new ModuleCategory(ee3331C);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is4 \u003d new ModuleCategory(cs4244);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is4.isDepth \u003d true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is5 \u003d new ModuleCategory(cs4246);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is5.isDepth \u003d true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is6 \u003d new ModuleCategory(cs4248);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is6.isDepth \u003d true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is7 \u003d new ModuleCategory(ee4305);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is7.isDepth \u003d true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is8 \u003d new ModuleCategory(ee4308);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is8.isDepth \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is9 \u003d new ModuleCategory(cs5242);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is9.isDepth \u003d true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is10 \u003d new ModuleCategory(cs5339);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is10.isDepth \u003d true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is11 \u003d new ModuleCategory(ee5904);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is11.isDepth \u003d true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is12 \u003d new ModuleCategory(ee5907);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is12.isDepth \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is2);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is3);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is4);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is5);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is6);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is7);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is8);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is9);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is10);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is11);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is12);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(INTELLIGENT_SYSTEMS_INDEX - 1), intSystemsBD);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm1 \u003d new ModuleCategory(cs2108);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm2 \u003d new ModuleCategory(cs3240);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm3 \u003d new ModuleCategory(cs3241);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm4 \u003d new ModuleCategory(cs3242);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm4.isBreadth \u003d true;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm5 \u003d new ModuleCategory(cs3247);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm5.isBreadth \u003d true;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm6 \u003d new ModuleCategory(ee3731C);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm6.isBreadth \u003d true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm7 \u003d new ModuleCategory(cs4240);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm7.isDepth \u003d true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm8 \u003d new ModuleCategory(cs4243);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm8.isDepth \u003d true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm9 \u003d new ModuleCategory(cs4247);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm9.isDepth \u003d true;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm10 \u003d new ModuleCategory(cs4249);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm10.isDepth \u003d true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm11 \u003d new ModuleCategory(cs4347);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm11.isDepth \u003d true;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm12 \u003d new ModuleCategory(cs4351);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm12.isDepth \u003d true;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm13 \u003d new ModuleCategory(ee4212);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm13.isDepth \u003d true;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm14 \u003d new ModuleCategory(ee4604);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm14.isDepth \u003d true;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm15 \u003d new ModuleCategory(ee4704);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm15.isDepth \u003d true;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm1);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm2);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm3);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm4);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm5);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm6);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm7);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm8);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm9);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm10);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm11);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm12);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm13);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm14);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm15);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(INTERACTIVE_DIGITAL_MEDIA_INDEX - 1),"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                intDigMediaBD);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls1 \u003d new ModuleCategory(cs2101);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls2 \u003d new ModuleCategory(cs3210);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls3 \u003d new ModuleCategory(cs3211);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls4 \u003d new ModuleCategory(cs3230);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls4.isBreadth \u003d true;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls5 \u003d new ModuleCategory(cs3235);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls5.isBreadth \u003d true;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls6 \u003d new ModuleCategory(cs3223);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls6.isDepth \u003d true;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls7 \u003d new ModuleCategory(cs4211);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls7.isDepth \u003d true;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls8 \u003d new ModuleCategory(cs4221);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls8.isDepth \u003d true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls9 \u003d new ModuleCategory(cs4223);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls9.isDepth \u003d true;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls10 \u003d new ModuleCategory(cs4224);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls10.isDepth \u003d true;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls11 \u003d new ModuleCategory(cs4231);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls11.isDepth \u003d true;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls12 \u003d new ModuleCategory(ee4210);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls12.isDepth \u003d true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls13 \u003d new ModuleCategory(ee4218);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls13.isDepth \u003d true;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls1);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls2);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls3);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls4);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls5);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls6);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls7);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls8);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls9);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls10);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls11);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls12);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls13);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(LARGE_SCALE_COMPUTING_INDEX - 1),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                largeScaleComputingBD);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s1 \u003d new ModuleCategory(cg3207);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s2 \u003d new ModuleCategory(ee3104C);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s3 \u003d new ModuleCategory(ee3408C);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s4 \u003d new ModuleCategory(cs4223);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s4.isDepth \u003d true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s5 \u003d new ModuleCategory(ee4104);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s5.isDepth \u003d true;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s6 \u003d new ModuleCategory(ee4112);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s6.isDepth \u003d true;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s7 \u003d new ModuleCategory(ee4218);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s7.isDepth \u003d true;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s8 \u003d new ModuleCategory(ee4415);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s8.isDepth \u003d true;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s9 \u003d new ModuleCategory(ee4505);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s9.isDepth \u003d true;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s10 \u003d new ModuleCategory(ee5518);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s10.isDepth \u003d true;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s1);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s2);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s3);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s4);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s5);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s6);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s7);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s8);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s9);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s10);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(SYS_DESIGN_INDEX - 1), sysDesignBD);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 424
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/ListSpecializationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ListSpecializationCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Communication and Networking specialization."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int COMMS_NETWORKING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Embedded Computing specialization."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int EMBEDDED_COMPUTING_INDEX \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Intelligent Systems specialization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INTELLIGENT_SYSTEMS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Interactive Digital Media specialization."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INTERACTIVE_DIGITAL_MEDIA_INDEX \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Large-Scale Computing specialization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int LARGE_SCALE_COMPUTING_INDEX \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of System-On-A-Chip Design specialization."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int SYS_DESIGN_INDEX \u003d 6;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Number of MCs per technical elective."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int MC_OF_ELECTIVES \u003d 4;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Allows the user to show list of technical electives completed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * and number of MCs completed for each specialization."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      with printing things to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       the object that deals with storing data,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      in this case storing data in the expenses map"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param specMap       the map that map list of"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      technical electives to their"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      respective specializations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param completedEMap the map that maps the completed electives to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      their respective specializations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException throws a custom exception if"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                       module index does not exist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException   catch any error if read file fails"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ListSpecializationCommand(final Ui ui,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                     final Storage storage,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                     final Map\u003cString,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                             ArrayList\u003cModuleCategory\u003e\u003e specMap,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                     final Map\u003cString, ArrayList\u003cString\u003e\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                             completedEMap)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            new ListOfSpecializationAndModules(specMap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e specList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Communications \u0026 Networking\"); //index 0"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Embedded Computing\"); //index 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Intelligent Systems\"); //index 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Interactive Digital Media\"); //index 3"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Large-Scale Computing\"); //index 4"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"System-On-A-Chip Design\"); //index 5"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Choose a specialization:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c specList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \". \" + specList.get(i));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Input in this format: SPECIALIZATION_NUMBER\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String specNumber \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int specChosen \u003d Integer.parseInt(specNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specChosen \u003c 0 || specChosen \u003e specList.size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Specialization index does not exist.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"You have chosen \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \".\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specChosen \u003d\u003d COMMS_NETWORKING_INDEX) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Networking\").size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Networking\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \". \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Communications \u0026 \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Networking\").get(i).code);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Networking\").size(); j++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Networking\").get(j).isDepth) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Networking\").get(j).code);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                         i \u003c completedEMap.get("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                         ).size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                         i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ).get(i));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(completedEMap.get("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size() * MC_OF_ELECTIVES + \"/20\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d EMBEDDED_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\").size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \". \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\").get(i).code);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\").size(); j++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").get(j).isDepth) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \". \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\").get(j).code);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size(); i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ).get(i));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(completedEMap.get("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size() * MC_OF_ELECTIVES + \"/20\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d INTELLIGENT_SYSTEMS_INDEX) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Systems\").size(); i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Systems\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Systems\").get(i).code);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Systems\").size(); j++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Systems\").get(j).isDepth) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Systems\").get(j).code);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size(); i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ).get(i));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(completedEMap.get("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size() * MC_OF_ELECTIVES + \"/20\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d INTERACTIVE_DIGITAL_MEDIA_INDEX) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Digital Media\").size(); i++) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Digital Media\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Digital Media\").get(i).code);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Digital Media\").size(); j++) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Digital Media\").get(j).isDepth) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Digital Media\").get(j).code);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size(); i++) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ).get(i));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(completedEMap.get("
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size() * MC_OF_ELECTIVES + \"/20\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d LARGE_SCALE_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\").size(); i++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\").get(i).code);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\").size(); j++) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").get(j).isDepth) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Computing\").get(j).code);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size(); i++) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get("
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ).get(i));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(completedEMap.get("
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size() * MC_OF_ELECTIVES + \"/20\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d SYS_DESIGN_INDEX) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Design\").size(); i++) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Design\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Design\").get(i).code);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Design\").size(); j++) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Design\").get(j).isDepth) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Design\").get(j).code);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get("
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size(); i++) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get("
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ).get(i));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (completedEMap.isEmpty()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"NIL\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(completedEMap.get("
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ).size() * MC_OF_ELECTIVES + \"/20\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreCommsB \u003d \"\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreCommsD \u003d \"\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreEmbB \u003d \"\";"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreEmbD \u003d \"\";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIsB \u003d \"\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIsD \u003d \"\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIdmB \u003d \"\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIdmD \u003d \"\";"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStorelsB \u003d \"\";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStorelsD \u003d \"\";"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreSysChipB \u003d \"\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreSysChipD \u003d \"\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : specMap.keySet()) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (key.equals(\"Communications\""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\u0026 Networking\")) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Communications\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"\u0026 Networking\").size(); i++) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreCommsB \u003d toStoreCommsB.concat(\"commsB|\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + specMap.get(key).get(i).code + \"|b:\""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + specMap.get(key).get(i).isBreadth + \"|d:\""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + specMap.get(key).get(i).isDepth + \" \");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreCommsD \u003d toStoreCommsD.concat(\"commsD|\""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Embedded\""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\")) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").size(); i++) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreEmbB \u003d toStoreEmbB.concat(\"embB|\" + key"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreEmbD \u003d toStoreEmbD.concat(\"embD|\" + key"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Intelligent Systems\")) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Systems\").size(); i++) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIsB \u003d toStoreIsB.concat(\"isB|\" + key"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIsD \u003d toStoreIsD.concat(\"isD|\" + key"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Interactive Digital Media\")) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Digital Media\").size(); i++) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIdmB \u003d toStoreIdmB.concat(\"idmB|\" + key"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIdmD \u003d toStoreIdmD.concat(\"idmD|\" + key"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Large-Scale\""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Computing\")) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Computing\").size(); i++) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStorelsB \u003d toStorelsB.concat(\"lsB|\" + key"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStorelsD \u003d toStorelsD.concat(\"lsD|\" + key"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Design\")) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Design\").size(); i++) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreSysChipB \u003d toStoreSysChipB.concat(\"sysChipB|\""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreSysChipD \u003d toStoreSysChipD.concat(\"sysChipD|\""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String totalStoringOfSpec \u003d toStoreCommsB + \"\\n\" + toStoreCommsD"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + toStoreEmbB + \"\\n\" + toStoreEmbD + \"\\n\""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + toStoreIsB + \"\\n\" + toStoreIsD + \"\\n\""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + toStoreIdmB + \"\\n\" + toStoreIdmD + toStorelsB"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + toStorelsD + \"\\n\" + toStoreSysChipB"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + toStoreSysChipD;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            storage.specializationStorage(totalStoringOfSpec);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 521
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/ModuleCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ModuleCategory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Module code for a technical elective."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public String code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * If breadth is true, the technical elective is a breadth elective."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isBreadth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * If depth is true, the technical elective is a depth elective."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isDepth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Initializing the 3 segments of a technical elective."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param code module code"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ModuleCategory(final String code) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.isBreadth \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.isDepth \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 25
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/StudyPlannerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.beans.Customizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collector;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class StudyPlannerCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cString\u003e\u003e StudyPlan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString,Integer\u003e MCMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString,String\u003e CoreModules;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString,ArrayList\u003cString\u003e\u003e TEs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * this method creates data structure for study plan, as well as"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * creating data structure for information of modules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage this object deals with access,modify and save external"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                files."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public StudyPlannerCommand(Storage storage) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.StudyPlan \u003d storage.Read_StudyPlan();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(StudyPlan.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StudyPlan \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.MCMap \u003d (Map\u003cString, Integer\u003e) Stream.of(new Object[][] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2271\",4}, {\"CG1111\",6}, {\"CS1010E\",4},{\"MA1511\",2},{\"MA1512\",2},{\"CS1231\",4},{\"ES1103\",4},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"EE2026\",4},{\"CG1112\",6},{\"MA1508E\",4},{\"CS2040C\",4},{\"GEQ1000\",4},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2101\",4},{\"CS2113T\",4},{\"GER1000\",4}, {\"CG2023\",4},{\"ST2334\",4},{\"CG2027\",2}, {\"CG2028\",2},{\"GEH1036\",4},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CP3880\",12}, {\"EG2401\",3},{\"EG2401A\",2}, {\"CG4002\",8},{\"EE4204\",4}, {\"GET1013\",4}, {\"CG3207\",4},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }).collect(Collectors.toMap(data-\u003e(String)data[0],data-\u003e(Integer)data[1]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.CoreModules \u003d (Map\u003cString, String\u003e) Stream.of(new String[][] {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2271\",\"Real-time Operating Systems\"}, {\"CG1111\",\"Engineering Principles and Practice I\"},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS1010\",\"Programming Methodology\"},{\"MA1511\",\"Engineering Calculus\"},{\"MA1512\",\"Differential Equations for Engineering\"},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS1231\",\"Discrete Structures\"}, {\"EE2026\",\"Digital Design\"},{\"CG1112\",\"Engineering Principles and Practice II\"},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"MA1508E\",\"Linear Algebra for Engineering\"},{\"CS2040C\",\"Data Structures and Algorithms\"},"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2101\",\"Effective Communication for Computing Professionals\"},{\"CS2113T\",\"Software Engineering \u0026 Object-Oriented Programming\"},"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2023\",\"Signals \u0026 Systems\"},{\"ST2334\",\"Probability \u0026 Statistics\"},{\"CG2027\",\"Transistor-level Digital Circuits\"},"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2028\",\"Computer Organization\"}, {\"CP3880\",\"Advanced Technology Attachment Programme\"},{\"EG2401A\",\"Engineering Professionalism\"},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG4002\",\" Computer Engineering Capstone Project\"},{\"EE4204\",\"Computer Networks\"},  {\"CG3207\",\"Computer Architecture\"},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS3230\",\"Design and Analysis of Algorithms\"},{\"EG3611A\",\"Industrial Attachment\"}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }).collect(Collectors.toMap(data-\u003e(String)data[0],data-\u003e(String)data[1]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.TEs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Communications \u0026 Networking\",new ArrayList\u003cString\u003e(Arrays.asList(\"CS2107\", \"CS3103\",\"EE3131C\",\"CS4222\",\"CS4226\",\"EE4210\",\"CS5223\",\"CS5321\",\"EE5135\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Embedded Computing\",new ArrayList\u003cString\u003e(Arrays.asList(\"CG3207\",\"CS2107\", \"CS3211\", \"EE3731C\",\"CS4222\", \"CS4223\", \"EE4218\", \"EE4415\", \"CS5272\", \"EE5903\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Intelligent Systems\",new ArrayList\u003cString\u003e(Arrays.asList(\"CS3243\",\"CS3244\", \"EE3331C\", \"CS4244\", \"CS4246\", \"CS4248\", \"EE4305\", \"EE4308\", \"CS5242\",\"EE5904\",\"EE5907\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Interactive Digital Media\",new ArrayList\u003cString\u003e(Arrays.asList(\"CS2108\", \"CS3240\", \"CS3241\",\"CS3242\",\"CS3247\",\"CS3249\",\"EE3731C\",\"CS4240\",\"CS4243\",\"CS4247\",\"CS4249\",\"CS4347\",\"CS4351\",\"EE4212\",\"EE4604\",\"EE4704\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Large-Scale Computing\",new ArrayList\u003cString\u003e(Arrays.asList(\"CS2102\", \"CS3210\", \"CS3211\", \"CS3230\", \"CS3235\", \"CS3223\", \"CS4211\", \"CS4221\", \"CS4223\", \"CS4224\", \"CS4231\", \"EE4210\", \"EE4218\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"System-On-A-Chip Design\",new ArrayList\u003cString\u003e(Arrays.asList(\"CG3207\", \"EE3104C\", \"EE3408C\", \"CS4223\", \"EE4104\", \"EE4112\", \"EE4218\", \"EE4415\", \"EE4505\", \"EE5518\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * this method displays the study plan in table form in console."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showPlan() throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\" +-----------------------------------------------------------------------+\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\" | Sem 1  | Sem 2  | Sem 3  | Sem 4  | Sem 5  | Sem 6  | Sem 7  | Sem 8  |\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\" +-----------------------------------------------------------------------+\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int biggestsize \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i\u003d0;i\u003cStudyPlan.size();i++){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "           if(biggestsize \u003c StudyPlan.get(i).size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "               biggestsize \u003d StudyPlan.get(i).size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "           }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.println(biggestsize);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cStringBuilder\u003e printplan \u003d new ArrayList\u003cStringBuilder\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i \u003d 0;i \u003c biggestsize;i++){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StringBuilder temp \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            temp.append(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for(int j \u003d 0;j \u003c StudyPlan.size();j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(StudyPlan.get(j).size() \u003e i){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if(StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 8){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"|\"+StudyPlan.get(j).get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else if(StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 5){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"| \"+StudyPlan.get(j).get(i)+\"  \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else if(StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 6){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"| \"+StudyPlan.get(j).get(i)+\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else if(StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 7){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"|\"+StudyPlan.get(j).get(i)+\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    temp.append(\"|        \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            temp.append(\"|\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            printplan.add(temp);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StringBuilder temp2 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        temp2.append(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i\u003d0;i\u003c8;i++){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int mc \u003d calculateSemMC(i);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(String.valueOf(mc).length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                temp2.append(\"| MCs:\" + mc + \" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }else if(String.valueOf(mc).length() \u003d\u003d 1){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                temp2.append(\"| MCs:\" + mc + \"  \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        temp2.append(\"|\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        printplan.add(temp2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i \u003d0;i\u003cprintplan.size();i++){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(printplan.get(i));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\" +-----------------------------------------------------------------------+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(checkGraduation().size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You have met the graduation requirement! *\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You haven\u0027t reach the graduation requirement! *\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* To meet the graduation requirement, you have to take following modules: *\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            checkGraduation().stream().forEach(System.out::println);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(checkTechnicalElective()\u003c20){"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You need to have at least 20 MCs of Technical Elective Modules! *\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* You need \"+(20-checkTechnicalElective())+\" MCs More. *\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You have reached minimum MCs for Technical Elective Modules! *\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method calculate the total MCs for one column"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param semester this parameter indicate which column it is calculating."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return number of MCs"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int calculateSemMC(int semester){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c StudyPlan.get(semester).size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String key \u003d StudyPlan.get(semester).get(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for(Map.Entry\u003cString,ArrayList\u003cString\u003e\u003e temp: TEs.entrySet()){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if(temp.getValue().contains(key)){"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(flag){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    count +\u003d 4;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (MCMap.get(key) \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        throw new DukeException(\"We cannot find the MC of this module: \" + key);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    count +\u003d MCMap.get(key);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException e){"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * this method check modules planned, verdict whether the plan"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * fulfill graduation requirements"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return boolean judgement"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cString\u003e checkGraduation(){"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003cString\u003e(CoreModules.keySet());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i\u003d0;i\u003cStudyPlan.size();i++){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for(int j\u003d0;j\u003cStudyPlan.get(i).size();j++){"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String modulecode \u003d StudyPlan.get(i).get(j);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(CoreModules.get(modulecode) !\u003d null){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    result.remove(result.indexOf(modulecode));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method  check TE modules planed and verdict whether the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * requirements are fulfilled."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return number of MCs planed for TE."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int checkTechnicalElective(){"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int count  \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i\u003d0;i\u003cStudyPlan.size();i++){"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for(int j\u003d0;j\u003cStudyPlan.get(i).size();j++){"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String modulecode \u003d StudyPlan.get(i).get(j);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for(Map.Entry\u003cString,ArrayList\u003cString\u003e\u003e temp: TEs.entrySet()){"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if(temp.getValue().contains(modulecode)){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if(flag){"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    count +\u003d 4;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 206
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/UndoStudyPlannerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoStudyPlannerCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method undo previous comment input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param oldStudyPlan Data structure that keeps a backup"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param currentPlan Data structure that have been modified"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object deals with access,modify and save external"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                txt files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return Data structure that the system now holds"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e undoStudyPlanner(Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan, ArrayList\u003cArrayList\u003cString\u003e\u003e currentPlan, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!oldStudyPlan.empty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentPlan \u003d oldStudyPlan.peek();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c currentPlan.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                toStore +\u003d currentPlan.get(i).stream().map(Object::toString).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storage_StudyPlan(toStore);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"I\u0027ve undo your previous command\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return currentPlan;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 9,
      "e0309463": 26
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/addModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class addModuleCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /** This method allows user to add module code into study plan, store changes in data structure and external txt files."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param StudyPlan The object contain all needed modules data structure and a showplan method to display plan table"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with access,modify and save files"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui The object that deals with interaction between users and the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(StudyPlannerCommand StudyPlan, Storage storage, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.split(\" \").length !\u003d 4){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Please follow the correct input format~\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String ModuleCode \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ModuleCode.isEmpty()) throw new DukeException(\"Module code could not be null\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(StudyPlan.MCMap.get(ModuleCode)\u003d\u003dnull) throw new DukeException(\"We currently do not support this module.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int Semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(Semester \u003e\u003d8||Semester\u003c0)throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StudyPlan.StudyPlan.get(Semester).add(ModuleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c StudyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d StudyPlan.StudyPlan.get(i).stream().map(Object::toString).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.Storage_StudyPlan(toStore);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"This module \" + ModuleCode + \" has been successfully added to Sem\" + (Semester + 1) + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please input correct Semester number\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 42
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/checkPrerequisiteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class checkPrerequisiteCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows user to check module\u0027s prerequisite modules, display them in a tree structure from left to right."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui The object that deals with interaction between users and the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with modify,access and save external files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e PrerequisiteList \u003d new HashMap\u003cString,ArrayList\u003cString\u003e\u003e(storage.readFromPrerequisiteFile());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ui.fullCommand.split(\" \").length!\u003d2) throw new DukeException(\"Please follow the correct input format~\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(PrerequisiteList.get(ui.fullCommand.split(\" \")[1])\u003d\u003dnull)throw new DukeException(\"We currently do not support this module\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (!PrerequisiteList.get(ui.fullCommand.split(\" \")[1]).isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder buffer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String Prefix \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String ChildrenPrefix \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            test(ui.fullCommand.split(\" \")[1],Prefix,ChildrenPrefix,buffer,PrerequisiteList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                dfsPrerequisite(ui.fullCommand.split(\" \")[1], Prefix, ChildrenPrefix, buffer, PrerequisiteList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(buffer);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"This module \" + ui.fullCommand + \" does not have any pre-requisite~\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows a Depth-First-Search on the prerequisite data structure, finding all prerequisite module and add their"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * name string to string builder for later printing purpose."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ModuleCode the module that we are going to search for its prerequisite"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param Prefix parameter for string builder"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ChildrenPrefix parameter for string builder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param buffer parameter for string builder"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param PrerequisiteList Data structure that stores all prerequisite information."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private void dfsPrerequisite(String ModuleCode,String Prefix, String ChildrenPrefix, StringBuilder buffer, HashMap\u003cString, ArrayList\u003cString\u003e\u003e PrerequisiteList){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        buffer.append(Prefix);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        buffer.append(ModuleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        buffer.append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(PrerequisiteList.get(ModuleCode) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (Iterator\u003cString\u003e it \u003d PrerequisiteList.get(ModuleCode).iterator(); it.hasNext(); ) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String next \u003d it.next();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (it.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Prefix \u003d ChildrenPrefix + \"├── \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ChildrenPrefix +\u003d ChildrenPrefix + \"│   \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    dfsPrerequisite(next, Prefix, ChildrenPrefix, buffer, PrerequisiteList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Prefix \u003d ChildrenPrefix + \"└── \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ChildrenPrefix +\u003d \"    \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    dfsPrerequisite(next, Prefix, ChildrenPrefix, buffer, PrerequisiteList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private void test(String ModuleCode,String Prefix, String ChildrenPrefix, StringBuilder buffer, HashMap\u003cString, ArrayList\u003cString\u003e\u003e PrerequisiteList){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.println(\"Can.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 72,
      "e0309463": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/deleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class deleteModuleCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows users to delete certain module out of the module plan,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * store changes in data structure and also external txt files."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param StudyPlan The object that holds data structure of module plan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with access, modify and save files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui The object that deals with interaction with users and the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(StudyPlannerCommand StudyPlan, Storage storage, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ui.fullCommand.split(\" \").length !\u003d 4) throw new DukeException(\"Please follow the correct input format~\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String ModuleCode \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ModuleCode.isEmpty()) throw new DukeException(\"Module code could not be null\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(StudyPlan.MCMap.get(ModuleCode)\u003d\u003dnull) throw new DukeException(\"We currently do not support this module.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int Semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(Semester \u003e\u003d8||Semester\u003c0)throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StudyPlan.StudyPlan.get(Semester).remove(StudyPlan.StudyPlan.get(Semester).indexOf(ModuleCode));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c StudyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d StudyPlan.StudyPlan.get(i).stream().map(Object::toString).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.Storage_StudyPlan(toStore);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"This module \" + ModuleCode + \" has been successfully deleted from Sem\" + (Semester + 1) + \".\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please input correct Semester number\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 41
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/shiftModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class shiftModuleCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows users to shift certain module from current semester to another"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * semesters, store changes in data structure and external txt files."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param StudyPlan the object that holds data structure of module plan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage the object that deals with access,modify and save files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui the object htat deals with interactions between users and the system."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(StudyPlannerCommand StudyPlan, Storage storage, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ui.fullCommand.split(\" \").length !\u003d 4){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Please follow the correct input format\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String ModuleCode \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(ModuleCode.isEmpty()) throw new DukeException(\"Module code could not be null\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(StudyPlan.MCMap.get(ModuleCode)\u003d\u003dnull) throw new DukeException(\"We currently do not support this module.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int Semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(Semester \u003e\u003d8||Semester\u003c0)throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c StudyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (StudyPlan.StudyPlan.get(i).contains(ModuleCode)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        StudyPlan.StudyPlan.get(i).remove(StudyPlan.StudyPlan.get(i).indexOf(ModuleCode));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (!flag) throw new DukeException(\"This module is not inside the study plan\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StudyPlan.StudyPlan.get(Semester).add(ModuleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c StudyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d StudyPlan.StudyPlan.get(i).stream().map(Object::toString).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.Storage_StudyPlan(toStore);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"This module \" + ModuleCode + \" has been successfully shifted to Sem\" + (Semester + 1) + \".\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please input correct Semester number\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 55
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Exits the program when bye command is called."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Returns void execute function for gazeeebo.commands.ByeCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list         An array list of type gazeeebo.Tasks.Task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui           Class ui"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage      class storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException | ParseException | IOException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program exits when \"bye\" is called."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 18,
      "JasonLeeWeiHern": 9,
      "mononokehime14": 1,
      "e0309463": 21
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/CalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class CalendarView {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int totalNumberDays \u003d 31;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int totalNumberMonths \u003d 12;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int daysInWeek \u003d 7;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int leapYearEvery \u003d 4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int noLeapYear \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int leapYear \u003d 400;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final int determineCurrMonth \u003d 14;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Returns the day of the month."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param month month of the date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param day   date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param year  year"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return int d The day of the start of the month in integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public int startDay(final int month, final int day, final int year) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int y \u003d year - (determineCurrMonth - month) / totalNumberMonths;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int x \u003d y + y / leapYearEvery - y / noLeapYear + y / leapYear;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int m \u003d month + totalNumberMonths * ((determineCurrMonth - month) / totalNumberMonths) - 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int d \u003d (day + x + (totalNumberDays * m) / totalNumberMonths) % daysInWeek;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Check if the year is a leap year or not."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param year year"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return true if it is a leap year, false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if ((year % leapYearEvery \u003d\u003d 0) \u0026\u0026 (year % noLeapYear !\u003d 0)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return year % leapYear \u003d\u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Prints out the calendar in the command line,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * if there is a task on that day the day will be marked with an \u0027*\u0027."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void monthlyView(final ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int month \u003d (now.get(Calendar.MONTH) + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int year \u003d now.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int date \u003d now.get(Calendar.DATE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean[] isBusy \u003d new boolean[totalNumberDays+1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            switch (task.getClass().getName()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Event\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (event.date.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        isBusy[event.date.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Deadline\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (deadline.by.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        isBusy[deadline.by.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Timebound\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate startDate \u003d ((Timebound) task).dateStart;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate endDate \u003d ((Timebound) task).dateEnd;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (endDate.getMonthValue()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \u003d\u003d month \u0026\u0026 startDate.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                             i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[i] \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (endDate.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        assert (startDate.getDayOfMonth() !\u003d month);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d 1; i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[i] \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (startDate.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        assert (endDate.getDayOfMonth() !\u003d month);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth(); i \u003c\u003d totalNumberDays; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[i] \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] months \u003d {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"January\", \"February\", \"March\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"October\", \"November\", \"December\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int[] days \u003d {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            days[month] \u003d 29;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"          \" + months[month] + \" \" + year);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"  S    M    Tu   W    Th   F    S\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int d \u003d startDay(month, 1, year);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c d; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"     \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d days[month]; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (i !\u003d date \u0026\u0026 isBusy[i]) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.printf(\"%4s \", i + \"*\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (i \u003d\u003d date \u0026\u0026 !isBusy[i]) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.printf(\"%5s\", \"|\" + i + \"|\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (i \u003d\u003d date \u0026\u0026 isBusy[i]) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.printf(\"%5s\", \"|\" + i + \"*\" + \"|\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.printf(\"%4s \", i);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (((i + d) % daysInWeek \u003d\u003d 0) || (i \u003d\u003d days[month])) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Prints out the annual calendar in the command line and"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * if there is a task on that day the day will be marked"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * with an \u0027*\u0027."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void annualView(final ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int month \u003d (now.get(Calendar.MONTH) + 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int year \u003d now.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int date \u003d now.get(Calendar.DATE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean[][] isBusy \u003d new boolean[totalNumberMonths + 1][totalNumberDays + 1];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            switch (task.getClass().getName()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Event\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isBusy[event.date.getMonthValue()]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            [event.date.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Deadline\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isBusy[deadline.by.getMonthValue()]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            [deadline.by.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Timebound\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate startDate \u003d ((Timebound) task).dateStart;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate endDate \u003d ((Timebound) task).dateEnd;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (startDate.getMonthValue() \u003d\u003d endDate.getMonthValue()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                             i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[startDate.getMonthValue()][i] \u003d true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth(); i \u003c\u003d totalNumberDays; i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[startDate.getMonthValue()][i] \u003d true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d 1; i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[endDate.getMonthValue()][i] \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        if (endDate.getMonthValue()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                - startDate.getMonthValue() \u003e 1) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            for (int i \u003d startDate.getMonthValue() + 1;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                 i \u003c endDate.getMonthValue(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                for (int k \u003d 1; k \u003c\u003d totalNumberDays; k++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                    isBusy[i][k] \u003d true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String[] months \u003d {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"January\", \"February\", \"March\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"October\", \"November\", \"December\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int[] days \u003d {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        };"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            days[month] \u003d 29;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int j \u003d 1; j \u003c 13; j++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"          \" + months[j] + \" \" + year);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"  S    M    Tu   W    Th   F    S\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int d \u003d startDay(j, 1, year);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c d; i++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"     \");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d days[j]; i++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (i !\u003d date \u0026\u0026 isBusy[j][i]) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%4s \", i + \"*\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (i \u003d\u003d date \u0026\u0026 j \u003d\u003d month \u0026\u0026 !isBusy[j][i]) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%5s\", \"|\" + i + \"|\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (i \u003d\u003d date \u0026\u0026 j \u003d\u003d month \u0026\u0026 isBusy[j][i]) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%5s\", \"|\" + i + \"*\" + \"|\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%4s \", i);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (((i + d) % daysInWeek \u003d\u003d 0) || (i \u003d\u003d days[month])) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 238
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/CategoryListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Shows the categorized list when called."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CategoryListCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of parameter duration on the command is 3."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int INDEX_OF_DURATION \u003d 3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Sorts the different types of tasks into their respective categories."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * It also shows the specified category list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws a custom exception if"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        module index does not exist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cFixedDuration\u003e fdList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTimebound\u003e tbList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.tasks.Deadline\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deadlineList.add(deadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.Event\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event event \u003d new Event(task.description,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                eventList.add(event);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.Todo\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Todo todo \u003d new Todo(task.description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                todoList.add(todo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.FixedDuration\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FixedDuration fixedDuration"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d new FixedDuration(task.description,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[INDEX_OF_DURATION].trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                fdList.add(fixedDuration);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.Timebound\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Timebound timebound \u003d new Timebound(task.description,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[INDEX_OF_DURATION].trim());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                tbList.add(timebound);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (ui.fullCommand.equals(\"deadline list\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of deadlines tasks:\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c deadlineList.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + deadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (ui.fullCommand.equals(\"event list\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of events tasks:\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c eventList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + eventList.get(i).listFormat());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (ui.fullCommand.equals(\"todo list\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of todo tasks:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c todoList.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + todoList.get(i).listFormat());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (ui.fullCommand.equals(\"fixed duration list\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of fixed duration tasks:\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c fdList.size(); i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + fdList.get(i).listFormat());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.fullCommand.equals(\"timebound list\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of timebounded tasks:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c tbList.size(); i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + tbList.get(i).listFormat());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 118,
      "JasonLeeWeiHern": 8,
      "mononokehime14": 1,
      "e0309463": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ChangePasswordCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to change their current password"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * to a new password."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ChangePasswordCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method will verify current password and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * write the new password to the Password.txt file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           deals with printing things to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      deals with storing data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack keep stack of previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list         Task lists"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui           The object that deals"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                     with printing things to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage      The object that deals with storing data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException Catch the error if the read file fails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 7b39e99af9747527697bf0b67af93c7dfcdfe446"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Enter your current password:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    readFromPasswordFile().get(0).toString())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Enter new password:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String realPassword \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                char[] decryption \u003d realPassword.toCharArray();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder decodedPassword \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d realPassword.length() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    decodedPassword.append(decryption[i]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToPasswordFile(decodedPassword.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Password successfully changed.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Wrong password, \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"exit by entering esc or try again:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Exit the program if isExit is true."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 16,
      "JasonLeeWeiHern": 60,
      "mononokehime14": 1,
      "e0309463": 4,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ChangePriority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ChangePriority extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"priority\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"The task number cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int numbercheck \u003d Integer.parseInt("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ui.fullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int numberpriority \u003d Integer.parseInt(ui.fullCommand.split(\" \")[2]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.get(numbercheck).priority \u003d numberpriority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"The priority of the task\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"is successfully changed!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Task \" + list.get(numbercheck).description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \" now has priority \" + list.get(numbercheck).priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 19,
      "JasonLeeWeiHern": 38
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ConfirmTentativeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class ConfirmTentativeCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Event ev;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TentativeEvent tev;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 7) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! The index of tentative event\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                index \u003d Integer.parseInt("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        ui.fullCommand.substring(7).trim()) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (list.get(index).listFormat().getBytes()[1] !\u003d \u0027T\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 list.get(index).listFormat().getBytes()[2]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        !\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    throw new DukeException(\"OOPS!!! You can only\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"confirm tentative event task.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String tempstring \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"You are confirming\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"this tentative event: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + list.get(index).description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(tempstring);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Please indicate which\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"time slot you want to confirm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int whichTimeSlot \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String[] timeslots \u003d list.get(index)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(timeslots[whichTimeSlot + 2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ev \u003d new Event(list.get(index).description,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            timeslots[whichTimeSlot + 2]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    tev \u003d (TentativeEvent) list.get(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Are you sure you want to\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"confirm this time slot: \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (ui.fullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.add(ev);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Confirmed.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (list.get(i).getClass().getName().equals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \"gazeeebo.Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (list.get(i).getClass().getName().equals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \"gazeeebo.Tasks.Event\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 44,
      "JasonLeeWeiHern": 18,
      "mononokehime14": 21,
      "e0309463": 8,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class creates and adds a new deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"deadline\" has 6 characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DEADLINE_CHAR_COUNT \u003d 8;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"deadline \" has 9 characters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DEADLINE_AND_SPACE_CHAR_COUNT \u003d 9;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Adds deadline tasks to the list of tasks when called."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of deadline command is wrong"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d DEADLINE_CHAR_COUNT) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                description \u003d ui.fullCommand.split(\"/by \")[0]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        .substring(DEADLINE_AND_SPACE_CHAR_COUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            Deadline d \u003d new Deadline(description,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ui.fullCommand.split(\"/by \")[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(d);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(d.listFormat());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"deadline\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showDeadlineDateFormatError();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 53,
      "JasonLeeWeiHern": 17,
      "mononokehime14": 2,
      "e0309463": 15,
      "yueyuu": 7
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class allows user to delete existing tasks from list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           deals with printing things to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      deals with storing data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack keep stack of previous commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param deletedTask  keep stack of deleted tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException catch error if parse string to date fails."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"delete\" has 6 characters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DELETE_CHAR_COUNT \u003d 6;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"delete \" has 7 characters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DELETE_AND_SPACE_CHAR_COUNT \u003d 7;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Allows user to delete 1 or more tasks at a time."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of delete command is wrong"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 7b39e99af9747527697bf0b67af93c7dfcdfe446"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if (ui.fullCommand.length() \u003d\u003d DELETE_CHAR_COUNT) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"of a deletion cannot be empty.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.contains(\"all\")) { //delete all tasks at once"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    deletedTask.add(list.get(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed all the tasks.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Now you have \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + list.size()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" tasks in the list.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.contains(\"and\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                //delete multiple tasks at once"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int numOfAnds \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c ui.fullCommand.length(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (ui.fullCommand.charAt(i) \u003d\u003d \u0027a\u0027) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        numOfAnds++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String[] strNumberList \u003d ui.fullCommand.substring("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        DELETE_AND_SPACE_CHAR_COUNT).split("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \" and \", numOfAnds + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int size \u003d strNumberList.length;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int[] intNumberList \u003d new int[size];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    intNumberList[j] \u003d Integer.parseInt(strNumberList[j]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Arrays.sort(intNumberList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    int index \u003d intNumberList[k] - count;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    deletedTask.add(list.get(index));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.println(taskremoved);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" tasks in the list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[1] !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int index \u003d Integer.parseInt(ui.fullCommand.substring("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            DELETE_CHAR_COUNT).trim()) - 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    deletedTask.add(list.get(index));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(taskremoved);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" tasks in the list.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Wrong input for delete command\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Task number not found\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 45,
      "JasonLeeWeiHern": 82,
      "e0309463": 14
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DoAfterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to set a reminder task to be done after a certain task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           the object that deals with printing things to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      the object that deals with storing data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack keep stack of previous commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException catch error if parse string to date fails."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch error if read file fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Creates a task to be done after the previous task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * and sets a reminder when the previous task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list         Task lists"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui           The object that deals with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                     printing things to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage      The object that deals with storing data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of do after command is wrong"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 7b39e99af9747527697bf0b67af93c7dfcdfe446"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String before \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String after \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring \u003d ui.fullCommand.split(\"/after\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        before \u003d splitstring[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        after \u003d splitstring[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter to \u003d new DoAfter(before, before, after);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Now you have \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * the system should not exit and continue running."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 18,
      "JasonLeeWeiHern": 62,
      "mononokehime14": 1,
      "e0309463": 4,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to record which tasks are completed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"done \" has 5 characters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DONE_AND_SPACE_CHAR_COUNT \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string of task initials and status has 9 characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int TASK_INITIALS_AND_STATUS_CHAR_COUNT \u003d 9;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This class marks tasks as done and prints out"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * the next task to be done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of done command is wrong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"The task done number\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"cannot be empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int numbercheck \u003d Integer.parseInt("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ui.fullCommand.substring(DONE_AND_SPACE_CHAR_COUNT)) - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (numbercheck \u003c 0 || numbercheck \u003e list.size() - 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (numbercheck \u003e 0 || numbercheck \u003c list.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list.get(numbercheck).isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(list.get(numbercheck).listFormat());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (list.get(i).description.contains("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            list.get(numbercheck).description)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            \u0026\u0026 list.get(i).listFormat().contains(\"/after\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            \u0026\u0026 i !\u003d numbercheck) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(\"OK! Now you need to\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"do the following:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        String[] temp \u003d list.get(i).listFormat().split("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                \"\\\\(/after\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(temp[0].substring("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                TASK_INITIALS_AND_STATUS_CHAR_COUNT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                RecurringCommand rc \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                rc.addRecurring(list, numbercheck,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        list.get(numbercheck).toString(), storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.showProgessiveBar(list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 64,
      "JasonLeeWeiHern": 15,
      "mononokehime14": 3,
      "e0309463": 21,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DoneListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to see which tasks are done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DoneListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This class shows the list done tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * that are completed when called."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of done list command is wrong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e doneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Command for \u0027done\u0027 cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (task.isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    doneList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"done list\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"List of tasks that are done:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c doneList.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + doneList.get(i).listFormat());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 72,
      "JasonLeeWeiHern": 7,
      "mononokehime14": 1,
      "e0309463": 2,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class creates and adds a new event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"event\" has 5 characters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int EVENT_CHAR_COUNT \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"event \" has 6 characters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int EVENT_AND_SPACE_CHAR_COUNT \u003d 6;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Calls in the Event object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final String EVENT \u003d \"gazeeebo.tasks.Event\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This class adds event tasks to the list of tasks when called."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of event command is wrong"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d EVENT_CHAR_COUNT) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"an event cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                description \u003d ui.fullCommand.split(\"/at \")[0]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        .substring(EVENT_AND_SPACE_CHAR_COUNT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String at \u003d ui.fullCommand.split(\"/at \")[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Event ev \u003d new Event(description, at);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //CHECKING FOR SCHEDULE ANOMALIES-----------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cEvent\u003e clash \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //to store events that clash with the incoming event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (t.getClass().getName().equals(EVENT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ((Event) t).date.equals(ev.date)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ((ev.start.isBefore(((Event) t).start)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ev.end.isAfter(((Event) t).start))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        || ev.start.equals(((Event) t).start)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        || (ev.start.isAfter(((Event) t).start)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ev.start.isBefore(((Event) t).end)))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    clash.add((Event) t);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (!clash.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"The following event(s) \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"clash with your current event:\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (int i \u003d 0; i \u003c clash.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println((i + 1) + \".\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + clash.get(i).listFormat());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(ev);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"event\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showEventDateFormatError();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 69,
      "JasonLeeWeiHern": 17,
      "mononokehime14": 2,
      "e0309463": 16,
      "yueyuu": 18
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to find a task via a keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"find\" has 4 characters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int FIND_CHAR_COUNT \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"find \" has 5 characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int FIND_AND_SPACE_CHAR_COUNT \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This class finds a task from the list of tasks when called."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d FIND_AND_SPACE_CHAR_COUNT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            || ui.fullCommand.length() \u003d\u003d FIND_CHAR_COUNT) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"search cannot be empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ArrayList\u003cTask\u003e searchedlist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (Task it : list) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (it.description.contains("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            ui.fullCommand.substring(FIND_CHAR_COUNT).trim())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        searchedlist.add(it);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Here are the\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"matching tasks in your list:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c searchedlist.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + searchedlist.get(i).listFormat());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 57,
      "JasonLeeWeiHern": 11,
      "mononokehime14": 1,
      "e0309463": 17,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/FixDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class creates and adds a new fixed duration task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Adds task that has a fixed duration when called."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          Task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      storing data to the Save.txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of fixed duration command is wrong"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String duration \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        splitstring \u003d ui.fullCommand.split(\"/require\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        description \u003d splitstring[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        duration \u003d splitstring[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration to \u003d new FixedDuration(description, duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Now you have \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 26,
      "JasonLeeWeiHern": 44,
      "mononokehime14": 1,
      "e0309463": 4,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Shows the list of tasks recorded."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Displays the list of tasks when called."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          Task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      storing data to the Save.txt file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws ParseException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(i + 1 + \".\" + list.get(i).listFormat());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.showProgessiveBar(list);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 31,
      "JasonLeeWeiHern": 9,
      "mononokehime14": 2,
      "e0309463": 13,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Automatically replaces the task and adds the new task with the new date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RecurringCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Number of dates to add for weekly task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int ADD_WEEKLY_DATE \u003d 7;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Replace the task to the next week/month/year base on the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * word weekly/monthly/yearly when the it is marked as done[D]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list            task lists"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param numbercheck     the index of the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listDescription description of the index of the list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage         the object that deals with storing data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if read fails."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void addRecurring(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final int numbercheck,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final String listDescription,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final Storage storage) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitDescriptionandDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] getDescription;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (listDescription.contains(\"weekly\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listDescription.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        plusMonths(0).plusDays(ADD_WEEKLY_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newWeeklyEvent \u003d new Event(description, (concTime));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newWeeklyEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this weekly task again:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newWeeklyEvent.listFormat()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (listDescription.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        plusMonths(0).plusDays(ADD_WEEKLY_DATE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newWeeklyDeadline"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d new Deadline(description, (concTime));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newWeeklyDeadline);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this weekly task again:\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newWeeklyDeadline.listFormat() + \"\\nNow you have \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (listDescription.contains(\"monthly\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listDescription.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newMonthlyEvent \u003d new Event(description, (concTime));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newMonthlyEvent);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this monthly task again:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newMonthlyEvent.listFormat() + \"\\nNow you have \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (listDescription.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newMonthlyDeadline"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d new Deadline(description, (concTime));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newMonthlyDeadline);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this monthly task again:\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newMonthlyDeadline.listFormat()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (listDescription.contains(\"yearly\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listDescription.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newYearlyEvent \u003d new Event(description, (concTime));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newYearlyEvent);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this yearly task again:\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newYearlyEvent.listFormat() + \"\\nNow you have \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (listDescription.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newYearlyDeadline"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d new Deadline(description, (concTime));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newYearlyDeadline);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this yearly task again:\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newYearlyDeadline.listFormat()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 163
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 10) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The object of a rescheduling cannot be null.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int index \u003d Integer.parseInt(ui.fullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String Decription \u003d list.get(index).description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"You are rescheduling this task: \" + Decription);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Please type in your new timeline\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String time \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Are you sure you want to reschedule this task? (yes/no)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (ui.fullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        Task RescheduledDeadline \u003d new Deadline(Decription, time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        list.add(RescheduledDeadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        System.out.println(RescheduledDeadline.listFormat());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        Event RescheduledEvent \u003d new Event(Decription, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        list.add(RescheduledEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        System.out.println(RescheduledEvent.listFormat());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.println(\"It\u0027s fine. Nothing has been changed.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Enter the task number instead of the name\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 16,
      "JasonLeeWeiHern": 43,
      "mononokehime14": 4,
      "e0309463": 6,
      "yueyuu": 8
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The object of a snoozing cannot be null.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int index \u003d Integer.parseInt(ui.fullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String Description \u003d list.get(index).description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You are snoozing this task: \" + list.get(index).description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Please indicate how much time you want to snooze\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int year \u003d Integer.parseInt(ui.fullCommand.split(\" \")[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int day \u003d Integer.parseInt(ui.fullCommand.split(\" \")[2]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int month \u003d Integer.parseInt(ui.fullCommand.split(\" \")[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int hour \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    LocalDateTime newDate \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String newBy \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Task snoozedDeadline \u003d new Deadline(Description, newBy);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.add(snoozedDeadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s deadline: \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(snoozedDeadline.listFormat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String start \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[1].split(\"-\")[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String end \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[1].split(\"-\")[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalDate newDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalTime newStart \u003d LocalTime.parse(start, DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalTime newEnd \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newStart \u003d newStart.plusHours(hour);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newEnd \u003d newEnd.plusHours(hour);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String newAt \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \" \" + newStart.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\")) + \"-\" + newEnd.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    Event snoozedEvent \u003d new Event(Description, newAt);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.add(snoozedEvent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s time: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(snoozedEvent.listFormat());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"snooze\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 18,
      "JasonLeeWeiHern": 13,
      "mononokehime14": 47,
      "e0309463": 3,
      "yueyuu": 10
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if(ui.fullCommand.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please enter method of sorting.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cTask\u003e SortedList \u003d new ArrayList\u003cTask\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if(ui.fullCommand.split(\" \")[1].equals(\"name\")){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(SortedList,new CustomNameComparator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for(int i \u003d0;i\u003cSortedList.size();i++){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(SortedList.get(i).listFormat());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }else if(ui.fullCommand.split(\" \")[1].equals(\"date\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Following is the sorted list of deadlines:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    SortedList \u003d SortedList.stream().filter(data-\u003edata.toString().split(\"\\\\|\")[0].equals(\"D\") || data.toString().split(\"\\\\|\")[0].equals(\"E\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                                                    .collect(Collectors.toCollection(ArrayList\u003cTask\u003e::new));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(SortedList,new CustomeDateComparator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        for(int i \u003d0;i\u003cSortedList.size();i++){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            System.out.println(SortedList.get(i).listFormat());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }else if(ui.fullCommand.split(\" \")[1].equals(\"priority\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(SortedList,new CustomPriorityComparator());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for(int i \u003d0;i\u003cSortedList.size();i++){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(SortedList.get(i).listFormat()+\" priority: \"+SortedList.get(i).priority);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Gazeeebo currently does not support this sorting method.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomPriorityComparator implements Comparator\u003cTask\u003e{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return b.priority-a.priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomNameComparator implements Comparator\u003cTask\u003e{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a, Task b){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return a.description.compareTo(b.description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomeDateComparator implements Comparator\u003cTask\u003e{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a,Task b){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(a.toString().split(\"\\\\|\")[0].equals(\"E\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"E\")){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ea \u003d (Event)a;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event eb \u003d (Event)b;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(ea.date,ea.start).compareTo(LocalDateTime.of(eb.date,eb.start));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(a.toString().split(\"\\\\|\")[0].equals(\"D\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"D\")){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline da \u003d (Deadline)a;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline db \u003d (Deadline)b;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return da.by.compareTo(db.by);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(a.toString().split(\"\\\\|\")[0].equals(\"E\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"D\")){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ea \u003d (Event)a;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline db \u003d (Deadline)b;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            LocalDateTime temp \u003d LocalDateTime.of(ea.date,ea.start);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int result \u003dtemp.compareTo(db.by);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(ea.date,ea.start).compareTo(db.by);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if(a.toString().split(\"\\\\|\")[0].equals(\"D\") \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"E\")){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event eb \u003d (Event)b;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline da \u003d (Deadline)a;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            LocalDateTime temp \u003dLocalDateTime.of(eb.date,eb.start);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int result \u003d temp.compareTo(da.by);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(eb.date,eb.start).compareTo(da.by);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if((a.toString().split(\"\\\\|\")[0].equals(\"E\")||a.toString().split(\"\\\\|\")[0].equals(\"D\"))\u0026\u0026 !(b.toString().split(\"\\\\|\")[0].equals(\"E\")||b.toString().split(\"\\\\|\")[0].equals(\"D\"))){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else if((b.toString().split(\"\\\\|\")[0].equals(\"E\")||b.toString().split(\"\\\\|\")[0].equals(\"D\"))\u0026\u0026 !(a.toString().split(\"\\\\|\")[0].equals(\"E\")||a.toString().split(\"\\\\|\")[0].equals(\"D\"))){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 6,
      "mononokehime14": 84,
      "e0309463": 3,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Groups tasks of the same tags together after"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * a task is tagged."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Adds a tag e.g. #study to a task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list         Task lists"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui           The object that deals with"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                     printing things to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage      The object that deals with storing data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of tag command is wrong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"#\") || ui.fullCommand.equals(\"# \")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"The tag description cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cTask\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String tag \u003d ui.fullCommand.substring(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (Task it : list) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (it.description.contains(\"#\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (it.description.split(\"#\")[1].trim().equals(tag)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            tagList.add(it);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Here are the matching tags in your list:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c tagList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + tagList.get(i).listFormat());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 65,
      "JasonLeeWeiHern": 6,
      "mononokehime14": 1,
      "e0309463": 2,
      "yueyuu": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TentativeEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 9) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an tentative event cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                description \u003d ui.fullCommand.substring(10);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You are creating a tentative event: \" + description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Please enter possible time slots of the event\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"When you are done, key in \u0027/\u0027.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                while (!ui.fullCommand.equals(\"/\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    tentativetimes.add(ui.fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TentativeEvent newtentative \u003d new TentativeEvent(description, tentativetimes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this tentative event:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(newtentative.listFormat());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You could confirm one of the slots later.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.add(newtentative);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 14,
      "JasonLeeWeiHern": 17,
      "mononokehime14": 25,
      "e0309463": 4,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TimeboundCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class TimeboundCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String duration \u003d ui.fullCommand.split(\"/\")[1];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (duration.length() \u003e 6 \u0026\u0026 duration.length() \u003c 33) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! There is no proper duration of time allocated for this task.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                description \u003d ui.fullCommand.split(\"/between \")[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String period \u003d ui.fullCommand.split(\"/between \")[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Timebound tb \u003d new Timebound(description, period);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.add(tb);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(tb.listFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 15,
      "JasonLeeWeiHern": 34,
      "mononokehime14": 1,
      "e0309463": 4,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, final Ui ui, final Storage storage, final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, final ArrayList\u003cTask\u003e deletedTask, final TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                description \u003d ui.fullCommand.substring(5);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Todo to \u003d new Todo(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(to);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            triviaManager.showPossibleInputs(\"todo\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            //triviaManager.showAllMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 57
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/UndoTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoTaskCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Undo previous task command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack stack of previous commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage object to store and read from txt file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return Previous Arraylist of Task before command executed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static ArrayList\u003cTask\u003e undo(Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e list, Storage storage)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!commandStack.empty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list \u003d commandStack.peek();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You cannot undo the previous command.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 37
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/UndoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        int numberCheck \u003d Integer.parseInt(ui.fullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"undone\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"The undo task number cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.contains(\"undone\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (numberCheck \u003c 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    throw new DukeException(\"Task number cannot be negative.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (numberCheck \u003e list.size() - 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    throw new DukeException(\"Task number does not exist.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                // int numberCheck \u003d Integer.parseInt(ui.fullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (list.get(numberCheck).isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    list.get(numberCheck).isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as undone: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(list.get(numberCheck).listFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 21,
      "JasonLeeWeiHern": 5,
      "mononokehime14": 1,
      "e0309463": 30,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/UndoneListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoneListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e UndoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"undone\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Command for \u0027undone\u0027 cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (task.isDone \u003d\u003d false) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    UndoneList.add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"undone list\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"List of tasks that are undone:\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c UndoneList.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\" + UndoneList.get(i).listFormat());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 44,
      "JasonLeeWeiHern": 7,
      "mononokehime14": 1,
      "e0309463": 3,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditBothCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditBothCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will receive the user new description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * and time and edit the old description and time in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list      task lists"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        the object that deals with printing things to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listIndex the index of the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch read file error."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public EditBothCommand(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                           final Ui ui, final int listIndex)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Type your description \u0026 date:\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] breakListWords \u003d list.get(listIndex).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (breakListWords[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakDeadline \u003d ui.fullCommand.split(\"/by \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d breakDeadline[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String by \u003d breakDeadline[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newdeadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Deadline description and time.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newdeadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakEvent \u003d ui.fullCommand.split(\"/at \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d breakEvent[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String at \u003d breakEvent[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newEvent \u003d new Event(description, at);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Event description and time.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newEvent);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakFD \u003d ui.fullCommand.split(\" /require \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration newFD \u003d new FixedDuration(breakFD[0], breakFD[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"FixDuration description and time.\\n\\tFrom: \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.get(listIndex).listFormat() + \"\\n\\tTo:   \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newFD.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newFD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakP \u003d ui.fullCommand.split(\" /between \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Timebound newP \u003d new Timebound(breakP[0], breakP[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Timebound description and time.\\n\\tFrom: \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"That input has \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"no time/description to be edited.\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 75,
      "e0309463": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Receive the user\u0027s input on which"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * list index to edit and then receive another"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * user\u0027s input, checking he/she wants to edit the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * task\u0027s description or time or both and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * execute them in the following methods respectively."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           the object that"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                     deals with printing things to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      the object that d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                     eals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            IOException, NullPointerException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] input \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Edit description/time/both ?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int listnoIndex \u003d Integer.parseInt(input[1]) - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (ui.fullCommand.equals(\"description\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            new EditDescriptionCommand(list, ui, listnoIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (ui.fullCommand.equals(\"time\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            new EditTimeCommand(list, ui, listnoIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            new EditBothCommand(list, ui, listnoIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * system should not exit and continue running."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 65,
      "mononokehime14": 1,
      "e0309463": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditDescriptionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditDescriptionCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will receive the user\u0027s"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * new description and edit the old description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list      task lists"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        the object that deals with printing things to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listIndex the index of the list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch error in read file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public EditDescriptionCommand(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                  final int listIndex) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Type your description:\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String newDescription \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] breakListWords \u003d list.get(listIndex).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (breakListWords[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Todo newtodo \u003d new Todo(newDescription);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your ToDo description.\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newtodo.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newtodo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] by \u003d breakListWords[3].split(\"by: \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newdeadline \u003d new Deadline(newDescription, by[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Deadline description.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newdeadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] at \u003d breakListWords[3].split(\"at: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newEvent \u003d new Event(newDescription, at[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Event description.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] splitter \u003d newDescription.split(\" /after \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                DoAfter newDA \u003d new DoAfter(splitter[1], splitter[1], splitter[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your DoAfter description.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newDA.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newDA);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String by \u003d breakListWords[3];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration newFA \u003d new FixedDuration(newDescription, by);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"FixedDuration description.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newFA.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newFA);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Timebound newP \u003d new Timebound(newDescription, breakListWords[3]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Timebound description.\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"That input has \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"description to be edited.\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 84,
      "e0309463": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditTimeCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will receive the user\u0027s"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * new time and edit the old time in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list        task lists"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          the object that deals with printing things to the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listnoIndex the index of the list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the read file error."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public EditTimeCommand(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                           final int listnoIndex) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Type your time:\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String newTime \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] breakListWords \u003d list.get(listnoIndex).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (breakListWords[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newdeadline \u003d new Deadline(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Deadline time.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newdeadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newEvent \u003d new Event(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Event time.\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newEvent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration newFD \u003d new FixedDuration(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your FixDuration time.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newFD.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newFD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Timebound newP \u003d new Timebound(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Timebound time.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"That input has no time to be edited.\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 63,
      "e0309463": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.exception;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**This method is a custom Exception that would throw our custom error message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param errorMessage String of error message that will display in console"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DukeException(final String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 3,
      "mononokehime14": 4,
      "e0309463": 5,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/help/HelpText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.help;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class HelpText {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String commandSeparator \u003d System.lineSeparator() +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"-----------------------------------------------------------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.lineSeparator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String commandSeparatorShort \u003d System.lineSeparator() +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t--------------------------------------------------------------------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.lineSeparator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String pageSeparator \u003d System.lineSeparator() +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"___________________________________________________________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String commandFormat \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"# Command Format #\\n\"+"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Words in UPPER_CASE are the parameters to be supplied by the\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"user e.g. in todo TASK_DESCRIPTION, TASK_DESCRIPTION is a\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"parameter which can be used as todo eat.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String commandsHeader \u003d \"# Commands #\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String tasksPageHeader \u003d \"********** Tasks page: tasks **********\\n\"+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"Brings you to your tasks page from the main menu page.\\n\"+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"In your tasks page, you can add different kinds of tasks to your schedule and view your upcoming tasks.\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"The following commands in this section can only be used in the tasks page.\\n\"+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\"+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"How to get to the tasks page: \\n\"+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- Type in the command tasks in the main menu page and press ENTER as shown in Figure 3.2.1 above.\\n\"+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t- You can only go to the tasks page from the main menu.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String todo \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a todo: todo ]\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tAdds a todo task to the task list.\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tFormat: todo TASK_DESCRIPTION\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- todo eat\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- todo watch TV\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String deadline \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a deadline: deadline ]\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tAdds a deadline task to the task list.\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tFormat: deadline TASK_DESCRIPTION /by YYYY-MM-DD HH:MM:SS\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- deadline assignment /by 2019-12-04 12:07:08\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- deadline watch TV /by 1988-06-27 08:46:37\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String event \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding an event: event ]\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tAdds an event task to the task list.\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tFormat: event TASK_DESCRIPTION /at YYYY-MM-DD HH:MM:SS-HH:SS:MM\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tExamples: \\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- event party /at 2019-12-04 12:07:08-12:50:00\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- event project meeting /at 1988-06-27 08:46:37-09:50:10\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String list \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Listing out the task list: list ]\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tList out all the tasks in the task list.\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tFormat: list\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String delete \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Delete task(s): delete ]\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tDeletes n number of tasks at once from the list or delete all tasks at once.\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tFormat: delete TASK_NUM1 and TASK_NUM2...OR delete all\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- delete 3 and 5\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- delete 6\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- delete all\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String done \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Set a task as done: done]\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tMarks a task as done.\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tFormat: done TASK_NUM\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- done 1\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t\\t- done 6\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String tasksFind  \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Find tasks based on a keyword: find ]\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tSearches for tasks based on a specified keyword.\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: find KEYWORD\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- find read\\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- find eat\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String scheduleDaily \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the schedule for a day: scheduleDaily ]\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tLists out your schedule and your notes for the specified date. \\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: scheduleDaily YYYY-MM-DD\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- scheduleDaily 2019-08-09\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- scheduleDaily 2022-10-26\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String scheduleWeekly \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the schedule for a week: scheduleWeekly ]\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tLists out your schedule and your notes for the specified week. \\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: scheduleWeekly YYYY-MM-DD YYYY-MM-DD\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat details:\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- The first date in the format above must be a Monday and the second date must be a Sunday.\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- The first date must be before the second date.\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- The number of days between the two dates must be 7.\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples: \\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- scheduleWeekly 2019-10-07 2019-10-13\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- scheduleWeekly 2019-09-02 2019-09-08\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String scheduleMonthly \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the schedule for a month: scheduleMonthly ]\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tLists out your schedule and your notes for the specified month. \\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: scheduleMonthly YYYY-MM\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples: \\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- scheduleMonthly 2020-10\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- scheduleMonthly 2019-09\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String doWithinPeriod \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a \u0027do-within-a-period\u0027 task: /between ]\\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tAdding tasks that need to be done within a certain period to the list.\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: TASK_DESCRIPTION /between YYYY-MM-DD and YYYY-MM-DD\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples: \\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- collect book /between 2019-12-04 and 2019-12-05\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- order food /between 2017-12-04 and 2017-12-05 \\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String addTentativeEvent \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a Tentative Event base on a keyword: tentative ]\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tCreating a tentative event with description of the event.\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: tentative TASK_DESCRIPTION\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- Tentative return book\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tKey in all possible time slots, ends input with a keyword: /\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: YYYY-MM-DD HH:MM:SS-HH:MM:SS\\n\" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t        YYYY-MM-DD HH:MM:SS-HH:MM:SS\\n\" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t        /\\n\" +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- 2019-08-04 05:04:03-01:01:01\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t  2019-09-18 07:11:44-10:10:10\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t  /\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tEnsure your creation with a keyword: yes\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: yes\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String confirmTentativeEvent \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Confirming a Tentative Event base on a keyword: confirm ]\\n\" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tConfirming one if the timeslots of the exact tentative event with its INDEX.\\n\" +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: confirm INDEX\\n\" +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: \\n\" +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- confirm \\n\" +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tChoosing which time slot to confirm with its SEQUENCE_NUMBER\\n\" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: SEQUENCE_NUMBER\\n\" +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- 1\\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tEnsure your confirmation with a keyword: yes\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: yes\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String tasksEdit \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Editing a task: edit ]\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tEdit task with task’s INDEX.\\n\" +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: edit INDEX\\n\" +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- edit 1    \\n\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tChoose time/description/both to edit\\n\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: time\\n\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- 2019-10-10 10:10:10\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String fixedDurationTask \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a task with a fixed duration: /require ]\\n\" +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tAdding a task takes a fixed amount of time but does not have a fixed start/end time to the list.\\n\" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: TASK_DESCRIPTION /require FIXED_AMOUNT_OF_TIME\\n\" +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: \\n\" +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- reading the sales report /require 2 hours\\n\" +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- project meeting /require 4 hours\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String categorizeTasks \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Categorize tasks: CATEGORY_NAME ]\\n\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tList out all the categorized tasks in the category task list.\\n\" +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: CATEGORY_NAME list\\n\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- event list\\n\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- deadline list\\n\" +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- todo list\\n\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String monthlyCalendarView \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View current month in a calendar view: calendar monthly view ]\\n\" +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tShows the dates and current month in a calendar view.\\n\" +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tDates with tasks will be demarcated with a ‘ * ’.\\n\" +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tCurrent date will be demarcated between ‘ | ’.\\n\" +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: calendar monthly view\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String annualCalendarView \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View current year in a calendar view: calendar annual view ]\\n\" +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tShows the dates and months in a calendar view.\\n\" +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tDates with tasks will be demarcated with a ‘ * ’.\\n\" +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tCurrent date will be demarcated between ‘ | ’.\\n\" +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: calendar annual view\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String undone \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Set a ‘done’ task as undone: undone ]\\n\" +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tMarks a task as undone.\\n\" +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: undone TASK_NUM\\n\" +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- undone 1\\n\" +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- undone 6\\n\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String doneList \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ See all the tasks that are marked as done: done list ]\\n\" +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tList out all the tasks that are done in a list\\n\" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: done list\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String doAfterTask \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a do-after task: /after ]\\n\" +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tAdd a follow-up task when a task is marked as done.\\n\" +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: FOLLOW_UP_TASK /after COMPLETED_TASK\\n\" +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\n\" +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExamples:\\n\" +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- return book /after read book\\n\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String snooze \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Snooze a task based on a keyword: reschedule ]\\n\" +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tSnooze a task’s timeline with task’s INDEX\\n\" +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: reschedule INDEX\\n\" +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: \\n\" +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- reschedule 1\\n\" +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tKey in your new timeline with the DATA\\n\" +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: YYYY-MM-DD HH:MM:SS\\n\" +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: \\n\" +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- 1998-04-05 08:09:14\\n\" +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tEnsure your rescheduling with a keyword: yes\\n\" +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\n\" +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: \\n\" +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- Yes\\n\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String reschedule \u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Reschedule a task based on a keyword: snooze ]\\n\" +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tReschedule a task’s timeline with task’s INDEX\\n\" +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: snooze INDEX\\n\" +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- snooze 1    \\n\" +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tKey in how much time you want to prolong\\n\" +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat:  Y M D H\\n\" +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample: \\n\" +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- 1 2 3 4\\n\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String recurringTask \u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Create recurring tasks based on a keyword: weekly/monthly/yearly ]\\n\" +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tA recurring task has any of the keywords.\\n\" +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: TASK_DESCRIPTION\\n\" +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- event weekly seminar /at 2019-10-10 10:10:10-11:11:11\\n\" +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: done INDEX\\n\" +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- done 1\\n\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String undoneList \u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ See all the tasks that are marked as undone: undone list ]\\n\" +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tList out all the tasks that are undone in a list\\n\" +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: undone list\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String tagging \u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Tagging tasks: #TAG_NAME ]\\n\" +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tTag tasks using the hashtag, and see the same tagged tasks in a list\\n\" +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: #TAG_NAME\\n\" +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tExample:\\n\" +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\tTo tag:\\n\" +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t\\t- todo running #fit\\n\" +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t\\t- event basketball match #fit /at 2019-04-05 12:00:00-14:00:00\\n\" +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t\\t- deadline claim voucher #food /by 2019-04-03 13:00:00\\n\" +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\tTo see the tasks with the same tags:\\n\" +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t\\t- #fit\\n\" +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t\\t- #food\\n\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String undoCommands \u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Undo commands: undo ]\\n\" +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tUndo previous tasks commands\\n\" +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tFormat: undo\\n\" +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\n\" +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\tPrevious commands that you can undo:\\n\" +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- EventCommand\\n\" +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- TodoCommand\\n\" +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- DeadlineCommand\\n\" +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- TentativeEventCommand\\n\" +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- DoneCommand\\n\" +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- DeleteCommand\\n\" +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- DoAfterCommand\\n\" +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- TimeBoundCommand\\n\" +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- FixDurationCommand\\n\" +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- ConfirmTentativeCommand\\n\" +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \"\\t\\t- UndoneCommand\\n\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 328
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * An assessment object that can be added to a module note."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Must be a positive number*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public int weightage; //as a percentage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Assessment(String name, int percentage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.weightage \u003d percentage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return name + \" (\" + weightage + \"%)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 22
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/GeneralNotePage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * A note page that can record a goal and module information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class GeneralNotePage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static String goal \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the goal and the list of existing module names."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void viewGeneralNotePage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Goal: \" + goal);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Modules:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i+1) + \". \" + modules.get(i).name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the goal to what the user specifies."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editGoal(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What is your new goal?\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        goal \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully updated your goal to:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(goal);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a module to the general note page. Prevents duplicate modules from being added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addModule(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What module do you want to add?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m: modules) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(ui.fullCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"You already have a module with the same name. Please add a module with a different name.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        modules.add(new Module(ui.fullCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully added this module:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(ui.fullCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes a module and all its content, if it exists, from the general note page."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteModule(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Which module do you want to delete?\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand(); //input module name here"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m: modules) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(ui.fullCommand)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                modules.remove(m);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Okay we have successfully deleted this module:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(ui.fullCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Sorry there is no such module.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 81
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deals with all the commands related to the module notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cAssessment\u003e assessments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cString\u003e miscellaneousInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Constructor that creates a module given the module name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param name of the module being created"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Module(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.miscellaneousInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the module\u0027s notes: name + assessments + miscellaneous information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void viewModule() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"[ \" + name + \" ]\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Assessments:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c assessments.size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i+1) + \". \" + assessments.get(i).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Miscellaneous:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c miscellaneousInfo.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i+1) + \". \" + miscellaneousInfo.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the name of the module to that specified by the user if the name is not already used."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * The name of the module can be changed to the name that is currently being used for the module."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editName(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What do you want to edit the name to?\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m: GeneralNotePage.modules) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(ui.fullCommand) \u0026\u0026 !ui.fullCommand.equals(this.name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"You already have a module with the same name. Please use a different name.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        name \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully updated the module name to:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //ASSESSMENT FEATURES-------------------------------------------------------------------------"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds an assessment to the module being viewed/edited."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addAssessment(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What assessment do you want to add?\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String name \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What is the weightage of the assessment?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean isInt \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int percentage \u003d -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                percentage \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (percentage \u003e\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    isInt \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input a positive number.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Please input a number.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } while (!isInt);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Assessment newAssessment \u003d new Assessment(name, percentage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assessments.add(newAssessment);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully added this assessment:\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(newAssessment.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the name of an existing assessment."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editAssessmentName(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Which assessment do you want to edit?\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndOldName \u003d checkIfValidIndexAssmt(ui);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d Integer.parseInt(indexAndOldName[0]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String oldName \u003d indexAndOldName[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert oldName !\u003d null: \"Bug in notes.Module: editAssessment: oldName\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert assmtNum !\u003d -1 : \"Bug in notes.Module: editAssessment: assmtNum\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What do you want to change the name to?\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assessments.get(assmtNum).name \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully changed the name of \\\"\" + oldName + \"\\\" to:\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(ui.fullCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Makes the user input a valid index in the assessments list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return String[] which contains the valid index and the name of the assessment that corresponds to that index"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String[] checkIfValidIndexAssmt(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d -1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String assmtName \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean isValidIndex \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                assmtNum \u003d Integer.parseInt(ui.fullCommand)-1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    assmtName \u003d assessments.get(assmtNum).name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    isValidIndex \u003d true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Sorry there is no such index.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Please input the index of the assessment.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } while (!isValidIndex);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return new String[]{Integer.toString(assmtNum), assmtName};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the weightage of the assessment corresponding to the index specified by the user."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editAssessmentWeightage(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Which assessment do you want to edit?\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndOldName \u003d checkIfValidIndexAssmt(ui);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d Integer.parseInt(indexAndOldName[0]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String oldName \u003d indexAndOldName[1];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert oldName !\u003d null: \"Bug in notes.Module: editAssessment: oldName\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert assmtNum !\u003d -1 : \"Bug in notes.Module: editAssessment: assmtNum\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What do you want to change the weightage to?\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean isInt \u003d false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                assessments.get(assmtNum).weightage \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (assessments.get(assmtNum).weightage \u003e\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    isInt \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input a positive number.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Please input a number.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } while (!isInt);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully changed the weightage to:\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(ui.fullCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes an assessment corresponding to the index specified by the user."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteAssessment(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Which assessment do you want to delete?\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndAssmtToDelete \u003d checkIfValidIndexAssmt(ui);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d Integer.parseInt(indexAndAssmtToDelete[0]);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert assmtNum !\u003d -1 : \"Bug in notes.Module: deleteAssessment: assmtNum\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assessments.remove(assmtNum);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully deleted this assessment:\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(assessments.get(assmtNum).toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //MISCELLANEOUS INFORMATION FEATURES-----------------------------------------------------------------"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a miscellaneous information to the module being edited/viewed."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addMiscellaneous(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What miscellaneous information do you want to add?\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        miscellaneousInfo.add(ui.fullCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully added this miscellaneous information:\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(ui.fullCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Makes the user input a valid index in the miscellaneous information list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return String[] which contains the valid index and the name of the miscellaneous information that corresponds to that index"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String[] checkIfValidIndexMsc(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int mscNum \u003d -1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String mscName \u003d null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean isValidIndex \u003d false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                mscNum \u003d Integer.parseInt(ui.fullCommand)-1;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    mscName \u003d miscellaneousInfo.get(mscNum);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    isValidIndex \u003d true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Sorry there is no such index.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Please input the index of the miscellaneous information.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } while (!isValidIndex);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return new String[]{Integer.toString(mscNum), mscName};"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits a miscellaneous information corresponding to the index specified by the user."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editMiscellaneous(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Which miscellaneous information do you want to edit?\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndMscToEdit \u003d checkIfValidIndexMsc(ui);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int mscNum \u003d Integer.parseInt(indexAndMscToEdit[0]);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String mscToEdit \u003d indexAndMscToEdit[1];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscToEdit !\u003d null: \"Bug in notes.Module: editMiscellaneous: mscToEdit\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscNum !\u003d -1 : \"Bug in notes.Module: editMiscellaneous: mscNum\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"What do you want to change the miscellaneous information to?\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        miscellaneousInfo.set(mscNum, ui.fullCommand);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully changed \\\"\" + mscToEdit + \"\\\" to:\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(ui.fullCommand);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes a miscellaneous information corresponding to the index specified by the user."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui to read the user\u0027s input"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the command input by the user cannot be read"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteMiscellaneous(Ui ui) throws IOException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Which miscellaneous information do you want to delete?\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndMscToDelete \u003d checkIfValidIndexMsc(ui);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int mscNum \u003d Integer.parseInt(indexAndMscToDelete[0]);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String mscToDelete \u003d indexAndMscToDelete[1];"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscToDelete !\u003d null: \"Bug in notes.Module: deleteMiscellaneous: mscToDelete\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscNum !\u003d -1 : \"Bug in notes.Module: deleteMiscellaneous: mscNum\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        miscellaneousInfo.remove(mscNum);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully deleted this miscellaneous information:\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(mscToDelete);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 279
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Maps notes to a particular date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Stores the date of the note"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular day, it will store that day\u0027s date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular week, it will store the date of that week\u0027s Monday."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular month, it will store the first date of that month."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDate noteDate; //yyyy-MM-dd"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list that contains all the notes for a particular period ie day, week or month. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cString\u003e notes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter noteFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Constructor that maps a date to the first note for that date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateOfNote the starting date of the period"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param firstNote the first note to be added to the specified period"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Note(String dateOfNote, String firstNote) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        noteDate \u003d LocalDate.parse(dateOfNote, noteFormatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        notes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        notes.add(firstNote);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 33
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/NoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Contains the list of Note objects for a particular period."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for day. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e daily \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for week. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e weekly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for month. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e monthly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/CAPCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.capCalculator.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Deals with the user in the main CAP page."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class CAPCommandParser extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * module name of the module."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Modular Credit of the module."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public int moduleCredit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Alphabetical score for the module."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String grade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Constructor for CAPCommandParser."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param moduleCode   name of the module"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param moduleCredit about of Modular Credit of the module"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param grade        Alphabetical score attained"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public CAPCommandParser(final String moduleCode,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            final int moduleCredit, final String grade) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Decodes the command input in the CAP page."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            IOException, NullPointerException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String helpCAP \u003d \"__________________\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"________________________________________\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. Add module: add semester number,\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"module\u0027s code, module\u0027s credit, module\u0027s grade\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. Find module: find moduleCode\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. Delete a module: delete module\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. See your CAP list: list all/semester number\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. List of commands for CAP page: commands\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. Help page: help\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. Exit CAP page: esc\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_________________\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_________________________________________\\n\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Welcome to your CAP Calculator page! \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"What would you like to do?\\n\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(helpCAP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e map"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                \u003d storage.readFromCAPFile(); //Read the file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String lineBreak \u003d \"------------------------------\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (!(ui.fullCommand.equals(\"esc\") || ui.fullCommand.equals(\"7\"))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                double cap \u003d new CalculateCAPCommand().calculateCAP(caplist);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (ui.fullCommand.split(\" \")[0].equals(\"add\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"1\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new AddCAPCommand(ui, caplist);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"find\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"2\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new FindCAPCommand(ui, caplist, lineBreak);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"list\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"4\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new ListCAPCommand(ui, caplist, lineBreak);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"delete\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"3\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new DeleteCAPCommand(ui, caplist);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"help\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"6\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    (new HelpCommand()).execute(null, ui, null,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            null, null, null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"commands\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"5\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.println(helpCAP);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Command not found:\\n\" + helpCAP);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String toStore \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).moduleCode"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"|\" + caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"|\" + caplist.get(key).get(i).grade + \"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                storage.writeToCAPFile(toStore);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What do you want to do next ?\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.print(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 136,
      "e0309463": 10,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/ContactCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.contact.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Deals with the user input in the contacts page."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ContactCommandParser extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Print the line separator between contacts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method is the list of all the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * contact numbers and you got add/find/delete contacts."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         list of all tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           printing things to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      the object that deals with storing data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack store the commands in stack"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException Catch error if the read file fails"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException, DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                \u003d storage.readFromContactFile(); //Read the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contactList \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldcontacts \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Welcome to your contacts page! \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"What would you like to do?\\n\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String helpContact \u003d \"_________________________\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_________________________________\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. Add contacts: add name,number\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. Find contacts base on name: find name\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. Delete a contact: delete name\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. See your contacts list: list\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. Undo Command: undo\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. List of commands for contacts page: commands\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. Help page: help\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. Exit contact page: esc\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_____________________________\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_____________________________\\n\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(helpContact);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.split(\" \")[0].equals(\"add\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"1\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                copyMap(contactList, oldcontacts);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new AddContactCommand(ui, contactList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[0].equals(\"find\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"2\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new FindContactCommand(ui, contactList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[0].equals(\"delete\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"3\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                copyMap(contactList, oldcontacts);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new DeleteContactCommand(ui, contactList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.equals(\"list\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"4\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new ListContactCommand(contactList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.equals(\"undo\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"5\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                contactList \u003d UndoContactCommand."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        undo(contactList, oldcontacts, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.equals(\"commands\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"6\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(helpContact);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.equals(\"help\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"7\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                (new HelpCommand()).execute(null, ui, null,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        null, null, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Command not found:\\n\" + helpContact);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toStore \u003d toStore.concat(key"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"|\" + contactList.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToContactFile(toStore);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"What do you want to do next ?\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.print(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Copy of old contacts."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contacts    current contacts list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param oldcontacts store deleted contacts."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private void copyMap(final Map\u003cString, String\u003e contacts,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final Stack\u003cMap\u003cString, String\u003e\u003e oldcontacts) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e currentcontacts \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contacts.keySet()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            currentcontacts.put(key, contacts.get(key));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        oldcontacts.push(currentcontacts);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * When isExit is true, it will stop the system."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 132,
      "mononokehime14": 1,
      "e0309463": 7,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/ExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.expenses.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to call commands to record and manage their expenses."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ExpenseCommandParser extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method is allows user to call commands to add expenses,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * find expenses on a certain date, delete a chosen expense,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * see the expense list and exit the expense page."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          list of all tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       the object that deals with storing data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /*Read file from storage*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d storage.Expenses();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TreeMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e(map);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean isExitExpenses \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.print(\"Welcome to your expenses record!\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \" What would you like to do?\\n\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"_________________________\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_________________________________\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"1. Add expenses command: add\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"2. Find expenses on a certain date: \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"find yyyy-MM-dd\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"3. Delete a certain expense: delete\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"4. See your expense list: list\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"5. Exit Expense page: esc\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"_________________________\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_________________________________\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (!isExitExpenses) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"add\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyMap(expenses, oldExpenses);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new AddExpenseCommand(ui, storage, expenses);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.equals(\"delete\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyMap(expenses, oldExpenses);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeleteExpenseCommand(ui, storage, expenses);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ExpenseListCommand(ui, expenses);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenses \u003d UndoExpenseCommand.undoExpenses(expenses,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        oldExpenses, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                isExitExpenses \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Content Page:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"------------------ \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"1. help\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"2. contacts\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"3. expenses\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"4. places\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"5. tasks\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"6. cap\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"7. spec\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"9. notes\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        + \"To exit: bye\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Command not found, please re-enter!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * copy map of places into a stack of maps."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param expenses    map of current expenses"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldExpenses stack of map of previous expenses"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void copyMap(final Map\u003cLocalDate,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e\u003e expenses,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                         final Stack\u003cMap\u003cLocalDate,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 ArrayList\u003cString\u003e\u003e\u003e oldExpenses) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e currentExpenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cString\u003e listNameExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                listNameExpenses.add(expenses.get(key).get(i));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentExpenses.put(key, listNameExpenses);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldExpenses.push(currentExpenses);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 99,
      "JasonLeeWeiHern": 2,
      "e0309463": 31,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/GeneralNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.ModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NotePageStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import javax.swing.text.View;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deals with the commands input at the note page."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class GeneralNoteCommandParser extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ESC \u003d \"esc\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_GOAL \u003d \"edit goal\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ADD_MODULE \u003d \"add module\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE_MODULE \u003d \"delete module\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String COMMANDS \u003d \"commands\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void showListOfCommands() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"1. View goal and list of modules: \" + VIEW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"2. Edit goal: \" + EDIT_GOAL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"3. Add a module: \" + ADD_MODULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"4. Delete a module: \" + DELETE_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"5. View/edit a particular module: \" + MODULE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"6. View list of commands for note page: \" + COMMANDS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"7. View help page: \" + HELP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"8. View individual help: help COMMAND_NAME\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"9. Exit note page: \" + ESC);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Decodes the command input in the note page. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Welcome to your note page! What would you like to do?\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        showListOfCommands();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        GeneralNotePage gnp \u003d new GeneralNotePage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (!ui.fullCommand.equals(ESC)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (ui.fullCommand.equals(VIEW)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                gnp.viewGeneralNotePage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(EDIT_GOAL)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                gnp.editGoal(ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToGoalFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(ADD_MODULE)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                gnp.addModule(ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(DELETE_MODULE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                gnp.deleteModule(ui);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(MODULE)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                (new ModuleCommand()).execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.equals(COMMANDS)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                showListOfCommands();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[0].equals(HELP)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                (new HelpCommand()).execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Go back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"------------------ \\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"1. help\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"4. places\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"6. cap\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"7. spec\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"9. notes\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 98
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/ParserManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public static Command parse(final String command,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                final Ui ui)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (splitCommand[0].equals(\"help\") || command.equals(\"1\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"contacts\") || command.equals(\"2\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ContactCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"expenses\") || command.equals(\"3\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ExpenseCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"places\") || command.equals(\"4\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new PlacesCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"spec\") || command.equals(\"7\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new SpecializationCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"tasks\") || command.equals(\"5\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new TaskCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"moduleplanner\") || command.equals(\"8\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new studyassistCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"cap\") || command.equals(\"6\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int moduleCredit \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String grade \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new CAPCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"notes\") || command.equals(\"9\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new GeneralNoteCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "JasonLeeWeiHern": 22,
      "mononokehime14": 2,
      "e0309463": 14,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/PlacesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesCommandParser extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Parses the user input and return a command object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list the list of all tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException exception thrown when there is an input error."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException parse exception from help command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String helpPlaces \u003d \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"1. Add location: add-room,location\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"2. Find a place in SOC: find-place\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"3. Delete a place: delete-place\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"4. See all places in SOC: list\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"5. Undo previous command: undo\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"6. See all commands: commands\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"7. Help command: help\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"8. Exit places: esc\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"__________________________________________________________\\n\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Welcome to your places in SOC! What would you like to do?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(helpPlaces);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.readPlaces();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String lineBreak \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean isExitFromPlaces \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (!isExitFromPlaces) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (ui.fullCommand.contains(\"add\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    copyMap(places,oldplaces);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new AddPlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.split(\"-\")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new FindPlacesCommand(ui, places, lineBreak);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new ListPlacesCommand(places, lineBreak);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.contains(\"delete\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    copyMap(places,oldplaces);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new DeletePlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"commands\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(helpPlaces);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"help\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new HelpCommand().execute(list,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Going back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"------------------ \\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"1. help\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"4. places\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"6. cap\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"7. spec\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"9. notes\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isExitFromPlaces \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    places \u003d UndoPlacesCommand.undoPlaces(places,oldplaces,storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"There is no such command in Places.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"What do you want to do next ?\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"Check input format again\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * copy map of places into a stack of maps."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places map of current places"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldplaces stack of map of previous places"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private void copyMap(Map\u003cString, String\u003e places, Stack\u003cMap\u003cString, String\u003e\u003e oldplaces) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e currentplaces \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentplaces.put(key, places.get(key));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(currentplaces);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return true to exit"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 123
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/SpecializationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.CompletedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.ListOfSpecializationAndModules;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.ListSpecializationCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.ModuleCategory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class SpecializationCommandParser extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method is allows user to call commands to add expenses,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * find expenses on a certain date, delete a chosen expense,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * see the expense list and exit the expense page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          list of all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       the object that deals with storing data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException   Catch error if the read file fails"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException throws a custom exception if"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                       module index does not exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException, DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cModuleCategory\u003e\u003e sMap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \u003d storage.Specialization(); //Read the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cString, ArrayList\u003cModuleCategory\u003e\u003e specMap \u003d new TreeMap\u003c\u003e(sMap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e eMap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \u003d storage.completedElectives(); //Read the file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e completedEMap \u003d new TreeMap\u003c\u003e(eMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new ListOfSpecializationAndModules(specMap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.print(\"Welcome to your specialization page!\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"What would you like to do?\\n\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"____________________________\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_____________________________\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"1. Show list of specializations\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"and technical electives : list\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"2. Key in completed electives: complete\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"3. Exit contact page: esc\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"____________________________\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"______________________________\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ListSpecializationCommand(ui, storage,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        specMap, completedEMap);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.equals(\"complete\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CompletedCommand(ui, storage, specMap, completedEMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 92,
      "e0309463": 6,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/TaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleDailyCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleMonthlyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleWeeklyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class TaskCommandParser extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Parses the user input and return a command object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Welcome to your Tasks page!\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"What would you like to do?\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        calendarView.monthlyView(list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String commandList \u003d \"___________________________________________________________________________________\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a todo: todo task_description\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a deadline: deadline task_description /by YYYY-MM-DD HH:MM:SS\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding an event: event task_description /at YYYY-MM-DD HH:MM:SS-HH:SS:MM\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"See all your task list: list\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"See your task based on category: category_name list\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Delete task(s): delete task_number1 and task_number2 and...\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Delete all tasks: delete all\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Mark task as done: done task_number\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Search for a task: find keyword\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"View daily schedule: scheduleDaily YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"View weekly schedule: scheduleWeekly YYYY-MM-DD YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"View monthly schedule: scheduleMonthly YYYY-MM\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a \u0027do-within-a-period\u0027 task: task_description /between YYYY-MM-DD and YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a tentative event: tentative task_description\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Confirming a tentative event: confirm task_number\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Editing a task: edit task_number\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a task with fixed duration: task_description /require amount_of_time\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Ranking your task: task_number rank rank_number\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"View monthly calendar: calendar monthly view\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"View annual calendar: calendar annual view\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Marking a task as undone: undone task_number\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a do-after task: follow_up_task /after completed_task\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Reschedule a task: reschedule task_number\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Prolong a task: snooze task_number\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Create recurring tasks: task_description weekly/monthly/yearly\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Tagging a task: #tagname\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Undo previous commands: undo\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Adding a note to a day/week/month: addNote day/week/month YYYY-MM-DD/YYYY-MM-DD/YYYY-MM\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Editing a note: editNote day/week/month YYYY-MM-DD/YYYY-MM-DD/YYYY-MM note_number\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Deleting a note: deleteNote day/week/month YYY-MM-DD/YYYY-MM-DD/YYYY-MM note_number\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Listing all notes: listNote day/week/month YYY-MM-DD/YYYY-MM-DD/YYYY-MM note_number\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Show all commands: commands\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Return to main page: esc\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"________________________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(commandList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e oldList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String command \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (splitCommand[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new HelpCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"event list\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"commands\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(commandList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"deadline list\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"todo list\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"fixed list\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"timebound list\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.equals(\"done list\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DoneListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"undone list\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new UndoneListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DoneCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeleteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeadlineCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"/after\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DoAfterCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new EventCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TodoCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"/between\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TimeboundCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new FindCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"/require\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new FixDurationCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"reschedule\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new RescheduleCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"sort\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new SortCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"scheduleDaily\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ScheduleDailyCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"scheduleWeekly\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ScheduleWeeklyCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"scheduleMonthly\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ScheduleMonthlyCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"snooze\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new SnoozeCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"tentative\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TentativeEventCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"confirm\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ConfirmTentativeCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].contains(\"undone\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new UndoneCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"undo\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list \u003d UndoTaskCommand.undo(commandStack, list, storage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"edit\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new EditCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"addNote\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new AddNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"editNote\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new EditNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"deleteNote\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeleteNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"listNote\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ListNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.equals(\"change password\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ChangePasswordCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"priority\")) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ChangePriority().execute(list, ui, storage,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"#\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TagCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"calendar monthly view\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new CalendarView().monthlyView(list);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"calendar annual view\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new CalendarView().annualView(list);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"esc\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Content Page:\\n\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"------------------ \\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"1. help\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"2. contacts\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"3. expenses\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"4. places\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"5. tasks\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"6. cap\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"7. spec\\n\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        + \"9. notes\\n\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"OOPS!!! I\u0027m sorry,\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Copy an Arraylist of task."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldList"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static void copyOldList(final ArrayList\u003cTask\u003e oldList,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                   ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.tasks.Deadline\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                deadline.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(deadline);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.Event\")) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event event \u003d new Event(task.description,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                event.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(event);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.Todo\")) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Todo todo \u003d new Todo(task.description);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                todo.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(todo);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.FixedDuration\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FixedDuration fixedDuration"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d new FixedDuration(task.description,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[3].trim());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                fixedDuration.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(fixedDuration);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.Timebound\")) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Timebound timebound"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d new Timebound(task.description,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[3].trim());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                timebound.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(timebound);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 125,
      "JasonLeeWeiHern": 65,
      "mononokehime14": 1,
      "e0309463": 133,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/parsers/studyassistCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.studyassist.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class studyassistCommandParser extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /** This method allows user to enter the module planner page,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Delete/shift/add/view their 4 year study plan, view prerequisite tree of modules"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * the method keeps repeating in while loop unless esc command is given."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          list of all tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       the object that deals with storing data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException   Catch error if the read file fails"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException throws a custom exception if"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                       module index does not exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Welcome to Module Planner!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"1. Add module to your plan: add CSXXXX to n(Semester number)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"2. Delete module from your plan: Delete CSXXXX from n(Semester number)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"3. Shift module to other semester: shift CSXXXX to n(Semester number)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"4. See your Study Plan: plan\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"5. See your Prerequisite of a module: prerequisite CSXXXX(module code)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"6. Undo Previous Command: undo\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"7. Exit Module Planner page: esc\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d  new StudyPlannerCommand(storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while(!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String command \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (splitCommand[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new HelpCommand().execute(list,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"plan\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StudyPlan.showPlan();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyStudyPlan(oldStudyPlan,StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new addModuleCommand().execute(StudyPlan,storage,ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new deleteModuleCommand().execute(StudyPlan,storage,ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"shift\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new shiftModuleCommand().execute(StudyPlan,storage,ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"prerequisite\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new checkPrerequisiteCommand().execute(ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "               StudyPlan.StudyPlan \u003d new UndoStudyPlannerCommand().undoStudyPlanner(oldStudyPlan,StudyPlan.StudyPlan, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if(!ui.fullCommand.equals(\"moduleplanner\")){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Invalid input that i could not understand~\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Going back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"------------------ \\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1. help\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"4. places\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"6. cap\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"7. spec\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"9. notes\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private void copyStudyPlan(Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan, ArrayList\u003cArrayList\u003cString\u003e\u003e currentMods) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e currentPlan \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (ArrayList\u003cString\u003e mods : currentMods) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String name : mods) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                arrayList.add(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentPlan.add(arrayList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldStudyPlan.push(currentPlan);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 10,
      "mononokehime14": 65,
      "e0309463": 22,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/NotePageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Assessment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NotePageStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String FILE_GOAL \u003d \"goal.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String FILE_MODULES \u003d \"modules.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToGoalFile() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        FileWriter file \u003d new FileWriter(FILE_GOAL);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.write(GeneralNotePage.goal);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.flush();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromGoalFile() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File f \u003d new File(FILE_GOAL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Scanner txtFile \u003d new Scanner(f);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            GeneralNotePage.goal \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToModulesFile() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        FileWriter file \u003d new FileWriter(FILE_MODULES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m : GeneralNotePage.modules) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(m.name + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(m.assessments.size() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (Assessment a : m.assessments) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(a.name + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(a.weightage + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(m.miscellaneousInfo.size() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (String s : m.miscellaneousInfo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(s + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.flush();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromModulesFile() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File f \u003d new File(FILE_MODULES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Scanner txtFile \u003d new Scanner(f);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Module m \u003d new Module(txtFile.nextLine()); //read in module name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            int numOfAssmt \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c numOfAssmt; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                m.assessments.add(new Assessment(txtFile.nextLine(), Integer.parseInt(txtFile.nextLine())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            int numOfMsc \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int j \u003d 0; j \u003c numOfMsc; j++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                m.miscellaneousInfo.add(txtFile.nextLine());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            GeneralNotePage.modules.add(m);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 68
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/NoteStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Reads and writes data for the NoteCommands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NoteStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Writes the whole list of Notes to the specified text file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Overrides the existing data in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param fileName the text file to write the data to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToWrite the list of Notes to be written to the text file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the file specified cannot be written to or is not a file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToFile(String fileName, ArrayList\u003cNote\u003elistToWrite) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        FileWriter file \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n : listToWrite) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(Note.noteFormatter.format(n.noteDate) + \"\\n\"); //date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(n.notes.size() + \"\\n\"); //size of individual note list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (String s: n.notes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(s + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Reads the list of Notes from a text file and stores it into the given ArrayList\u003c\u003eNotes\u003c/\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param fileName the text file the data is to be read from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToReadTo the ArrayList\u003c\u003eNotes\u003c/\u003e that the data is to be stored in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws IOException if the file specified cannot be created or is not a file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromFile(String fileName, ArrayList\u003cNote\u003e listToReadTo) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        InputStream inputStream \u003d NoteStorage.class.getResourceAsStream(\"/\" + fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Scanner txtFile \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String date \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            int sizeOfNotes \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String firstNote \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Note newNote \u003d new Note(date, firstNote);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfNotes-1; i++) { //sizeOfNotes-1 as the first note has already been added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                newNote.notes.add(txtFile.nextLine());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            listToReadTo.add(newNote);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 58
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.specialization.ModuleCategory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relative_Path \u003d \"Save.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_password \u003d \"Password.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_Contact \u003d \"Contact.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_Expenses \u003d \"Expenses.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_Places \u003d \"Places.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_Trivia \u003d \"Trivia.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_CAP \u003d \"CAP.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_Specialization \u003d \"Specialization.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_StudyPlanner \u003d \"Study_Plan.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_CompletedElectives \u003d \"CompletedElectives.txt\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private String relativePath_Prerequisite \u003d \"Prerequisite.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePath"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Save.txt\", \"/Save.txt\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathPassword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Password.txt\", \"/Password.txt\"};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathContact"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Contact.txt\", \"/Contact.txt\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathExpenses"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Expenses.txt\", \"/Expenses.txt\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathPlaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Places.txt\", \"/Places.txt\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathTrivia"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Trivia.txt\", \"/Trivia.txt\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathCAP"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"CAP.txt\", \"/CAP.txt\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathSpecialization"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Specialization.txt\", \"/Specialization.txt\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathStudyPlanner"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Study_Plan.txt\", \"/Study_Plan.txt\"};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathCompletedElectives"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"CompletedElectives.txt\", \"/CompletedElectives.txt\"};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathPrerequisite"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Prerequisite.txt\", \"/Prerequisite.txt\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativePathGoal"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"goal.txt\", \"/goal.txt\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativePathModule"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"modules.txt\", \"/modules.txt\"};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativeNoteDaily"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"NoteDaily.txt\", \"/NoteDaily.txt\"};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativeNoteWeekly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"NoteMonthly.txt\", \"/NoteMonthly.txt\"};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativeNoteMonthly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"NoteWeekly.txt\", \"/NoteWeekly.txt\"};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathResource"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Save.txt\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathPasswordResource"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Password.txt\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathContactResource"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Contact.txt\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathExpensesResource"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Expenses.txt\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathPlacesResource"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Places.txt\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathTriviaResource"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Trivia.txt\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathCAPResource"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"CAP.txt\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathSpecializationResource"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Specialization.txt\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathStudyPlannerResource"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Study_Plan.txt\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathCompletedElectivesResource"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"CompletedElectives.txt\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathPrerequisiteResource"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Prerequisite.txt\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void startUp() throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cString[]\u003e resourcelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathPassword);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathContact);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathExpenses);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathExpenses);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathPlaces);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathTrivia);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathCAP);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathSpecialization);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathStudyPlanner);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathCompletedElectives);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathPrerequisite);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativePathGoal);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativeNoteDaily);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativeNoteWeekly);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativeNoteMonthly);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativePathModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String[] path : resourcelist) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            File tmpDir \u003d new File(path[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean exists \u003d tmpDir.exists();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (!exists) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                InputStream inputStream"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d Storage.class.getResourceAsStream(path[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Scanner sc \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                FileWriter fw \u003d new FileWriter(path[0], true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String s;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    s \u003d sc.nextLine() + \"\\n\"; // read a line"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    fw.write(s); // write to output file"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    fw.flush();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToSaveFile(final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathResource);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cTask\u003e readFromSaveFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathResource);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] details \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (details[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Todo t \u003d new Todo(details[2].trim());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    t.isDone \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    t.isDone \u003d false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tList.add(t);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Deadline d \u003d new Deadline(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    d.isDone \u003d true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    d.isDone \u003d false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tList.add(d);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (details[0].equals(\"E)\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    e.isDone \u003d true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    e.isDone \u003d false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                tList.add(e);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (details[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Timebound tb \u003d new Timebound(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    tb.isDone \u003d true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    tb.isDone \u003d false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tList.add(tb);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (details[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration fd \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    fd.isDone \u003d true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    fd.isDone \u003d false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                tList.add(fd);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (details[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                DoAfter da \u003d new DoAfter(details[3].trim(), details[3].trim(), details[2].trim());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    da.isDone \u003d true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    da.isDone \u003d false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                tList.add(da);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (details[0].equals(\"TE\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e timeslots \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 3; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    timeslots.add(details[i]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                TentativeEvent te \u003d new TentativeEvent(details[2].trim(), timeslots);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    te.isDone \u003d true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    te.isDone \u003d false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                tList.add(te);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (details[3].contains(\"at:\") || details[3].contains(\"by:\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        e.isDone \u003d true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        e.isDone \u003d false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(e);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (details[0].contains(\"P\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    Timebound tb \u003d new Timebound(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        tb.isDone \u003d true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        tb.isDone \u003d false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    tList.add(tb);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    FixedDuration fd \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        fd.isDone \u003d true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        fd.isDone \u003d false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    tList.add(fd);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return tList;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Write the encoded password into the Password.txt file."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent string to put into the txt file."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToPasswordFile(final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathPasswordResource);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Read from the Password.txt file, decode the passwords and put it into an array."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the arrays of password"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ArrayList\u003cStringBuilder\u003e readFromPasswordFile()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cStringBuilder\u003e passwordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathPasswordResource);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String decodedPassword \u003d sc.nextLine();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            char[] decryption \u003d decodedPassword.toCharArray();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder realPassword \u003d new StringBuilder();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d decodedPassword.length() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                realPassword.append(decryption[i]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            passwordList.add(realPassword);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return passwordList;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * THis method writes to the file Contact.txt."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent save the contact information into this file"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToContactFile(final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathContactResource);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method read from the file Contact.txt and put the details into a HashMap"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return Returns the HashMap of contacts, key is the contact name and the value is the phone number."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public HashMap\u003cString, String\u003e readFromContactFile()"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e contactList \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathContactResource);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            contactList.put(split[0], split[1]);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void Storages_Expenses(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathExpensesResource);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void storagesPlaces(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathPlacesResource);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e Expenses() throws FileNotFoundException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathExpensesResource);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e itemAndPriceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            LocalDate dateOfPurchase \u003d LocalDate.parse(split[0], fmt);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (dateOfPurchase.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    expenses.get(key).add(split[1]);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (isEqual \u003d\u003d false) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                itemAndPriceList.add(split[1]);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenses.put(dateOfPurchase, itemAndPriceList);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public HashMap\u003cString, String\u003e readPlaces() throws IOException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e placesList \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathPlacesResource);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            placesList.put(split[0], split[1]);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return placesList;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public Map\u003cString, ArrayList\u003cString\u003e\u003e Read_Trivia() throws FileNotFoundException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e CommandMemory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathTriviaResource);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String InputCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (CommandMemory.containsKey(InputCommand.split(\" \")[0])) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e oldlist \u003d new ArrayList\u003cString\u003e(CommandMemory.get(InputCommand.split(\" \")[0]));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (!oldlist.contains(InputCommand)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    oldlist.add(InputCommand);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    CommandMemory.put(InputCommand.split(\" \")[0], oldlist);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e newlist \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newlist.add(InputCommand);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                CommandMemory.put(InputCommand.split(\" \")[0], newlist);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return CommandMemory;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void Storage_Trivia(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File file \u003d new File(relativePathTriviaResource);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (file.exists() \u0026\u0026 !file.canWrite()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"File exists and it is read only, making it writable\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            file.setWritable(true);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathTriviaResource);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        bufferedWriter.newLine();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        bufferedWriter.write(fileContent);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        bufferedWriter.flush();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Write to the CAP.txt file (save in the file)."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent string to put into the file."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToCAPFile(final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathCAPResource);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Read from the file CAP.txt and put the details into a HashMap"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return Returns the HashMap of contacts, key is the contact name and the value is the phone number"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e readFromCAPFile()"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e caplist \u003d new HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathCAPResource);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cCAPCommandParser\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitStringTxtFile \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String semNumber \u003d splitStringTxtFile[0];"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleCode \u003d splitStringTxtFile[1];"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int mc \u003d Integer.parseInt(splitStringTxtFile[2]);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String grade \u003d splitStringTxtFile[3];"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            CAPCommandParser newCAP \u003d new CAPCommandParser(moduleCode, mc, grade);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (semNumber.equals(key)) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    caplist.get(key).add(newCAP);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            /* semNumber doesn\u0027t exist in the list */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isEqual) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                moduleList.add(newCAP);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                caplist.put(semNumber, moduleList);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return caplist;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void specializationStorage(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathSpecializationResource);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cModuleCategory\u003e\u003e Specialization() throws IOException {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cModuleCategory\u003e\u003e specMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File file \u003d new File(relativePathSpecializationResource);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        InputStream inputStream \u003d Storage.class.getResourceAsStream(relativePathSpecialization);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Scanner sc \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cModuleCategory\u003e moduleBD \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ModuleCategory mC \u003d new ModuleCategory(split[2]);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            moduleBD.add(mC);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specMap.put(split[1], moduleBD);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return specMap;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void completedElectivesStorage(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathCompletedElectivesResource);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e completedElectives() throws IOException {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e completedEMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        InputStream inputStream \u003d Storage.class.getResourceAsStream(relativePathCompletedElectives);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Scanner sc \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        if (new File(relativePathCompletedElectives).exists()) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File file \u003d new File(relativePathCompletedElectivesResource);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e completedElectiveList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String checkKey \u003d split[0];"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (checkKey.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    completedEMap.get(key).add(split[1]);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (isEqual \u003d\u003d false) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    completedElectiveList.add(split[1]);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    completedEMap.put(checkKey, completedElectiveList);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return completedEMap;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e Read_StudyPlan() throws IOException {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e studyplan \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        InputStream inputStream \u003d Storage.class.getResourceAsStream(relativePath_StudyPlanner);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Scanner sc \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        //  if (new File(relativePath_StudyPlanner).exists()) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File file \u003d new File(relativePathStudyPlannerResource);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (sc.hasNext()) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String[] split \u003d sc.nextLine().split(\" \");"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e temp \u003d Arrays.stream(split).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                studyplan.add(temp);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e temp \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                studyplan.add(temp);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return studyplan;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void Storage_StudyPlan(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        BufferedWriter fileWriter \u003d new BufferedWriter(new FileWriter(relativePathStudyPlannerResource));"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFromPrerequisiteFile() throws IOException {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e PrerequisiteList \u003d new HashMap\u003cString, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        InputStream inputStream \u003d Storage.class.getResourceAsStream(relativePath_Prerequisite);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Scanner sc \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File file \u003d new File(relativePathPrerequisiteResource);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String WholeSentence \u003d sc.nextLine();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String head \u003d WholeSentence.split(\" \")[0];"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e Prerequisites \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 1; i \u003c WholeSentence.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                Prerequisites.add(WholeSentence.split(\" \")[i]);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            PrerequisiteList.put(head, Prerequisites);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return PrerequisiteList;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 99,
      "JasonLeeWeiHern": 198,
      "mononokehime14": 60,
      "e0309463": 177,
      "yueyuu": 20
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDateTime by ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");//24h clock"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, fmtD);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"D\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"by: \" + by.format(fmtD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(by:\" + by.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy HH:mm:ss\")) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 4,
      "e0309463": 11,
      "yueyuu": 10
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String after;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfter(String description, String before, String after) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.before \u003d before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"DA\" + \"|\" + super.getStatusIcon() + \"|\" + after + \"|\" + before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[DA]\" + \"[\" + super.getStatusIcon() + \"] \" + after + \"(/after:\" + before + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 5,
      "yueyuu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalTime start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalTime end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"); //formatter for date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\"); //formatter for time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException, ArrayIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTime[0], fmtED);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.start \u003d LocalTime.parse(time[0], fmtET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.end \u003d LocalTime.parse(time[1], fmtET);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"E\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"at: \" + fmtED.format(date)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \" \" + this.start.format(fmtET) + \"-\" + this.end.format(fmtET);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\"));// You can change to this format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"]\" + super.description + \"(at:\" + dateString + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + this.start.format(fmtET) + \"-\" + this.end.format(fmtET) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 1,
      "yueyuu": 38
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String duration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, String duration) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"FD\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[FD]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(requires:\" + duration + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 4,
      "yueyuu": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.priority \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return (isDone ? \"D\" : \"ND\"); //return tick or X symbols"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 1,
      "yueyuu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/TentativeEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEvent extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cString\u003e tentativetimes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TentativeEvent(String description,ArrayList\u003cString\u003e tentativetimes) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.tentativetimes \u003d tentativetimes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"TE\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            timeslots +\u003d  \"|\" + tentativetimes.get(i);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"[TE]\"+ \"[\" + super.getStatusIcon() + \"] \"+description+\"\\n\" ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED).format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \"+  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(i\u003d\u003d0){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \"+output+\"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \"+output+\"\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 42,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Timebound.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class Timebound extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public LocalDate dateStart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public LocalDate dateEnd;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public Timebound (String description, String period) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] date \u003d period.split(\" and \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.dateStart \u003d LocalDate.parse(date[0], fmtD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.dateEnd \u003d LocalDate.parse(date[1], fmtD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"P\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + dateStart.format(fmtD) + \" and \" + dateEnd.format(fmtD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[P]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(between: \" + dateStart.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")) + \" and \" + dateEnd.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 20,
      "JasonLeeWeiHern": 12,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"T\"+ \"|\" + super.getStatusIcon() + \"| \" + super.description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description ;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "yueyuu": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/CalendarViewTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.CalendarView;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class CalendarViewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void LeapYearTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertTrue(calendarView.isLeapYear(2020));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertFalse(calendarView.isLeapYear(2019));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void StartDayTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(3, calendarView.startDay(10,23,2019));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void MonthlyViewTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"test\",\"2019-10-12 12:12:12\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        calendarView.monthlyView(list);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"          November 2019\\r\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                            1    2 \\r\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   3    4    5   |6|   7    8    9 \\r\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  10   11   12   13   14   15   16 \\r\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  17   18   19   20   21   22   23 \\r\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  24   25   26   27   28   29   30 \\r\\n\", output.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void AnnualViewTest() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"test\",\"2019-10-12 12:12:12\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        calendarView.annualView(list);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"          January 2019\\r\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"             1    2    3    4    5 \\r\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   6    7    8    9   10   11   12 \\r\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  13   14   15   16   17   18   19 \\r\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  20   21   22   23   24   25   26 \\r\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  27   28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          February 2019\\r\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                            1    2 \\r\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   3    4    5    6    7    8    9 \\r\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  10   11   12   13   14   15   16 \\r\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  17   18   19   20   21   22   23 \\r\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  24   25   26   27   28 \\r\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          March 2019\\r\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                            1    2 \\r\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   3    4    5    6    7    8    9 \\r\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  10   11   12   13   14   15   16 \\r\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  17   18   19   20   21   22   23 \\r\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  24   25   26   27   28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          April 2019\\r\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"        1    2    3    4    5    6 \\r\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   7    8    9   10   11   12   13 \\r\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  14   15   16   17   18   19   20 \\r\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  21   22   23   24   25   26   27 \\r\\n\" +"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          May 2019\\r\\n\" +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                  1    2    3    4 \\r\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   5    6    7    8    9   10   11 \\r\\n\" +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  12   13   14   15   16   17   18 \\r\\n\" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  19   20   21   22   23   24   25 \\r\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  26   27   28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          June 2019\\r\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                                 1 \\r\\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   2    3    4    5    6    7    8 \\r\\n\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   9   10   11   12   13   14   15 \\r\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  16   17   18   19   20   21   22 \\r\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  23   24   25   26   27   28   29 \\r\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  30 \\r\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          July 2019\\r\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"        1    2    3    4    5    6 \\r\\n\" +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   7    8    9   10   11   12   13 \\r\\n\" +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  14   15   16   17   18   19   20 \\r\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  21   22   23   24   25   26   27 \\r\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          August 2019\\r\\n\" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                       1    2    3 \\r\\n\" +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   4    5    6    7    8    9   10 \\r\\n\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  11   12   13   14   15   16   17 \\r\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  18   19   20   21   22   23   24 \\r\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  25   26   27   28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          September 2019\\r\\n\" +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   1    2    3    4    5    6    7 \\r\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   8    9   10   11   12   13   14 \\r\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  15   16   17   18   19   20   21 \\r\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  22   23   24   25   26   27   28 \\r\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          October 2019\\r\\n\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"             1    2    3    4    5 \\r\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   6    7    8    9   10   11  12* \\r\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  13   14   15   16   17   18   19 \\r\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  20   21   22   23   24   25   26 \\r\\n\" +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  27   28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          November 2019\\r\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"                            1    2 \\r\\n\" +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   3    4    5   |6|   7    8    9 \\r\\n\" +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  10   11   12   13   14   15   16 \\r\\n\" +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  17   18   19   20   21   22   23 \\r\\n\" +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  24   25   26   27   28   29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"          December 2019\\r\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  S    M    Tu   W    Th   F    S\\r\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   1    2    3    4    5    6    7 \\r\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"   8    9   10   11   12   13   14 \\r\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  15   16   17   18   19   20   21 \\r\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  22   23   24   25   26   27   28 \\r\\n\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  29   30 \\r\\n\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"  31 \\r\\n\", output.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 161
    }
  },
  {
    "path": "src/test/java/CatergoryListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import gazeeebo.commands.CategoryListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//public class CategoryListCommandTest  {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    void restoreStream(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    void testCategory() throws ParseException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        CategoryListCommand testC \u003d new CategoryListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        Deadline newD \u003d new Deadline(\"yearly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        Event newE \u003d new Event(\"project meeting\", \"2019-09-09 12:12:12-13:13:13\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        list.add(newD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        list.add(newE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        //testC.Ca(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        assertEquals(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      }
    ],
    "authorContributionMap": {
      "e0323290": 51
    }
  },
  {
    "path": "src/test/java/DoAfterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    DoAfter testdoAfter \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"DA|ND|return book|read book\", testdoAfter.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[DA][ND] return book(/after:read book)\", testdoAfter.listFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 2,
      "JasonLeeWeiHern": 16,
      "e0309463": 1,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/EditCommandTest/EditBothTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package EditCommandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditBothCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditBothTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEventBoth() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"banner rev\", \"2019-12-12 10:10:10-11:00:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"basketball trg /at 2019-12-12 09:00:00-11:00:00\".getBytes());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Event description and time.\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [E][ND]banner rev(at:12 Dec 2019 10:10:10-11:00:00)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [E][ND]basketball trg (at:12 Dec 2019 09:00:00-11:00:00)\\n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeadlineBoth() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testE \u003d new Deadline(\"banner rev\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"assignment /by 2019-12-12 09:00:00\".getBytes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Deadline description and time.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [D][ND] banner rev(by:12 Dec 2019 10:10:10)\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [D][ND] assignment (by:12 Dec 2019 09:00:00)\\n\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFixDurationBoth() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration testE \u003d new FixedDuration(\"banner rev\", \"1 hour\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"assignment /require 2 hours\".getBytes());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your FixDuration description and time.\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [FD][ND] banner rev(requires:1 hour)\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [FD][ND] assignment(requires:2 hours)\\n\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testTimeboundBoth() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Timebound testE \u003d new Timebound(\"banner rev\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"assignment /between 2019-08-12 and 2019-09-13\".getBytes());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Timebound description and time.\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [P][ND] banner rev(between: 12 Aug 2019 and 13 Aug 2019)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [P][ND] assignment(between: 12 Aug 2019 and 13 Sep 2019)\\n\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testNotAbleToEditBoth() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter testE \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"assignment /between 2019-08-12 and 2019-09-13\".getBytes());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"That input has \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"no time/description to be edited.\\n\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 104
    }
  },
  {
    "path": "src/test/java/EditCommandTest/EditDescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package EditCommandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditDescriptionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditDescriptionTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditTodoDescription() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Todo testT \u003d new Todo(\"tutorial homework\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your ToDo description.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [T][ND] tutorial homework\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [T][ND] tutorial assignment\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditDeadlineDescription() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Deadline description.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [D][ND] tutorial homework(by:12 Dec 2019 10:10:10)\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [D][ND] tutorial assignment(by:12 Dec 2019 10:10:10)\\n\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditEventDescription() throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"Career Talk\", \"2019-12-12 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"Career GE Talk\".getBytes());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Event description.\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [E][ND]Career Talk(at:12 Dec 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [E][ND]Career GE Talk(at:12 Dec 2019 10:10:10-11:11:11)\\n\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditDoAfterDescription() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter testd \u003d new DoAfter(\"brush teeth\", \"brush teeth\", \"sleep\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"bathe /after brush teeth\".getBytes());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your DoAfter description.\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [DA][ND] sleep(/after:brush teeth)\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [DA][ND] bathe(/after:brush teeth)\\n\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditFixDurationDescription() throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration testF \u003d new FixedDuration(\"tutorial homework\", \"2 hours\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testF);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your FixedDuration description.\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [FD][ND] tutorial homework(requires:2 hours)\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [FD][ND] tutorial assignment(requires:2 hours)\\n\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditTimeBoundDescription() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Timebound testT \u003d new Timebound(\"tutorial homework\", \"2019-10-10 and 2019-11-10\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Timebound description.\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [P][ND] tutorial homework(between: 10 Oct 2019 and 10 Nov 2019)\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [P][ND] tutorial assignment(between: 10 Oct 2019 and 10 Nov 2019)\\n\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 119
    }
  },
  {
    "path": "src/test/java/EditCommandTest/EditTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package EditCommandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditTimeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditTimeTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeadlineEditTime() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2020-12-12 11:11:11\".getBytes());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Deadline time.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [D][ND] tutorial homework(by:12 Dec 2019 10:10:10)\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [D][ND] tutorial homework(by:12 Dec 2020 11:11:11)\\n\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEventEditTime() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"trg\", \"2019-12-12 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2020-12-12 11:11:11-12:12:12\".getBytes());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Event time.\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [E][ND]trg(at:12 Dec 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [E][ND]trg(at:12 Dec 2020 11:11:11-12:12:12)\\n\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFixDurationEditTime() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration testF \u003d new FixedDuration(\"trg\", \"2 hours\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testF);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"3 hours\".getBytes());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your FixDuration time.\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [FD][ND] trg(requires:2 hours)\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [FD][ND] trg(requires:3 hours)\\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testTimeBoundEditTime() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Timebound testT \u003d new Timebound(\"trg\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2019-08-12 and 2019-09-13\".getBytes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Timebound time.\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [P][ND] trg(between: 12 Aug 2019 and 13 Aug 2019)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [P][ND] trg(between: 12 Aug 2019 and 13 Sep 2019)\\n\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testUnableToEditEditTime() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter testT \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2019-08-12 and 2019-09-13\".getBytes());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"That input has no time to be edited.\\n\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 99
    }
  },
  {
    "path": "src/test/java/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.EventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class EventCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash1() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of clashing events are the same"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 03:03:03-04:04:04\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash2() throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is earlier than old event but clash still occurs"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 02:03:03-03:10:04\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 02:03:03-03:10:04)\\r\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash3() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is after that of old event but clash still occurs"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 03:10:03-03:50:04\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 03:10:03-03:50:04)\\r\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_noClash() throws IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 12:03:03-14:10:04\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ec.execute(tasks, ui, storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \"[E][ND]sleep(at:12 Dec 2019 12:03:03-14:10:04)\\r\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 7,
      "JasonLeeWeiHern": 5,
      "mononokehime14": 8,
      "e0309463": 31,
      "yueyuu": 46,
      "-": 40
    }
  },
  {
    "path": "src/test/java/FixDurationCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    FixedDuration testFD \u003d new FixedDuration(\"playing basketball\", \"4 hours\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"FD|ND|playing basketball|4 hours\", testFD.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[FD][ND] playing basketball(requires:4 hours)\", testFD.listFormat());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 2,
      "JasonLeeWeiHern": 15,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/GazeeeboTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class GazeeeboTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void test() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(\"An IOException was caught :\" + e.getStackTrace()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    + \"The system cannot find the path specified\", e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\",e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void testUpcomingTasks() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.upcomingTask(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\",e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 4,
      "JasonLeeWeiHern": 27,
      "e0309463": 21
    }
  },
  {
    "path": "src/test/java/GeneralNotePageTest/GeneralNotePageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package GeneralNotePageTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class GeneralNotePageTest extends GeneralNotePage{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //goal \u003d \"i want to be a rock star\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "       // modules.add(new Module(\"cs2101\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void createNewNotePage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        goal \u003d \"i want to be a rock star\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        modules.add(new Module(\"cs2101\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void viewGeneralNotePageTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        viewGeneralNotePage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Goal: i want to be a rock star\\r\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Modules:\\r\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"1. cs2101\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editGoal() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        goal \u003d \"hello\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully updated your goal to:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(goal);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully updated your goal to:\\r\\n\" + \"hello\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addModule_addingAnExistingModule_errorMessageShown() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"cs2101\".getBytes());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        addModule(ui);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"What module do you want to add?\\r\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"You already have a module with the same name. Please add a module with a different name.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addModule_addingANotExistingModule_success() throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ByteArrayInputStream in \u003d new ByteArrayInputStream(\"cs2113t\".getBytes());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            addModule(ui);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"What module do you want to add?\\r\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Okay we have successfully added this module:\\r\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"cs2113t\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteModule_moduleNonExistent_errorMessageShown() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"cg2028\".getBytes());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        deleteModule(ui);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Which module do you want to delete?\\r\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Sorry there is no such module.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteModule_moduleExists_success() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"cs2101\".getBytes());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        deleteModule(ui);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Which module do you want to delete?\\r\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Okay we have successfully deleted this module:\\r\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"cs2101\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 107
    }
  },
  {
    "path": "src/test/java/PlacesAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.AddPlacesCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesAddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testAddPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.readPlaces(); //Read the file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"add-Test,COM3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        AddPlacesCommand test \u003d new AddPlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Successfully added :Test,COM3\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testAddWrongPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.readPlaces(); //Read the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"add-TestCOM3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        AddPlacesCommand test \u003d new AddPlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 53
    }
  },
  {
    "path": "src/test/java/PlacesCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.PlacesCommandParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class PlacesCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testPlaceCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        PlacesCommandParser placesCommandParser \u003d new PlacesCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        placesCommandParser.execute(list,ui,storage,CommandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Welcome to your places in SOC! What would you like to do?\\r\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"__________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"1. Add location: add-room,location\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"2. Find a place in SOC: find-place\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"3. Delete a place: delete-place\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"4. See all places in SOC: list\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"5. Undo previous command: undo\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"6. See all commands: commands\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"7. Help command: help\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"8. Exit places: esc\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"__________________________________________________________\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"Go back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"------------------ \\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"1. help\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"4. places\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"6. cap\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"7. spec\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"9. notes\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\\r\\n\",output.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testWrongCommandPlacesCommand() throws IOException, ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.fullCommand \u003d \"asdasd\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            new PlacesCommandParser().execute(list,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(\"Check input format again\", d.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 93
    }
  },
  {
    "path": "src/test/java/PlacesDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.DeletePlacesCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesDeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteInPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.readPlaces(); //Read the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT19\", \"COM5\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete-LT19\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeletePlacesCommand test \u003d new DeletePlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Successfully deleted: LT19\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteNotInPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.readPlaces(); //Read the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT19\", \"COM5\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete-LT30\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeletePlacesCommand test \u003d new DeletePlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"LT30 is not found in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteWrongFormatPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d storage.readPlaces(); //Read the file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT19\", \"COM5\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeletePlacesCommand test \u003d new DeletePlacesCommand(ui, storage, places);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Incorrect format: delete-place\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 64
    }
  },
  {
    "path": "src/test/java/PlacesListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.ListPlacesCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testListContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String linebreak \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT50\", \"COM6\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT20\", \"COM7\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ListPlacesCommand test \u003d new ListPlacesCommand(places, linebreak);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Room:                                             | Location:\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"LT20                                              | COM7\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"------------------------------------------\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"LT50                                              | COM6\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"------------------------------------------\\n\", output.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 50
    }
  },
  {
    "path": "src/test/java/RecurringCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.RecurringCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RecurringCommandTest  {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private RecurringCommand testR \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testWeeklyDeadlineRecurring() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"weekly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this weekly task again:\\n[D][ND] weekly assignment(by:08 Jan 2019 01:01:01)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testWeeklyEventRecurring() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event newE \u003d new Event(\"weekly Career Talk\", \"2019-10-10 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0, list.get(0).toString(), storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this weekly task again:\\n[E][ND]weekly Career Talk(at:17 Oct 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMonthlyDeadlineRecurring() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"monthly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this monthly task again:\\n[D][ND] monthly assignment(by:01 Feb 2019 01:01:01)\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMonthlyEventRecurring() throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event newE \u003d new Event(\"monthly Career Talk\", \"2019-10-10 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0, list.get(0).toString(), storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this monthly task again:\\n[E][ND]monthly Career Talk(at:10 Nov 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testYearlyEventRecurring() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event newE \u003d new Event(\"yearly Career Talk\", \"2019-10-10 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0, list.get(0).toString(), storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this yearly task again:\\n[E][ND]yearly Career Talk(at:10 Oct 2020 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testYearlyDeadlineRecurring() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"yearly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this yearly task again:\\n[D][ND] yearly assignment(by:01 Jan 2020 01:01:01)\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 92,
      "e0309463": 2,
      "yueyuu": 2
    }
  },
  {
    "path": "src/test/java/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.SnoozeCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExecuteSnooze() throws ParseException,IOException,DukeException{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            dukeException.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"reschedule 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String Decription \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d\"2019-09-18 05:05:05\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Task RescheduledDeadline \u003d new Deadline(Decription, ui.fullCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(RescheduledDeadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|ND|return book |by: 2019-09-18 05:05:05\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 8,
      "mononokehime14": 6,
      "e0309463": 10,
      "yueyuu": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/ShowWelcomeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ShowWelcomeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void test() throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String logo \u003d \" ___   ___  ___  ___  ___  ___  ___   ___ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|     |   |   / |    |    |    |   \\\\ |   |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|  __ |__ |  /  |___ |___ |___ |___| |   |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|___| |   | /__ |___ |___ |___ |___/ |___|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"jjjjjj\".getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream second \u003d new ByteArrayInputStream(\"jjjry\".getBytes());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(second);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"\\nWelcome to Gazeeebo\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\",ui.showWelcome());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 24,
      "e0309463": 2
    }
  },
  {
    "path": "src/test/java/SnoozeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.SnoozeCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testExecuteSnooze() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage, CommandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException | ParseException |IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int year \u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int day \u003d1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int month \u003d1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int hour \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String Description \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String date \u003d tasks.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        LocalDateTime newDate  \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String newBy\u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task snoozedDeadline \u003d new Deadline(Description,newBy);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(snoozedDeadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|ND|return book |by: 2009-08-08 04:03:03\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 5,
      "mononokehime14": 20,
      "e0309463": 9,
      "yueyuu": 2,
      "-": 17
    }
  },
  {
    "path": "src/test/java/TentativeEventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeEventTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void testListFormat() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"return book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2008-06-07 05:05:05-08:08:08\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2007-03-02 04:04:04-10:10:10\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TentativeEvent newtentative \u003d new TentativeEvent(description,tentativetimes);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String timeslots \u003d \"[TE]\"+ \"[\" + newtentative.getStatusIcon() + \"] \"+description+\"\\n\" ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED).format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \"+  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if(i\u003d\u003d0){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \"+output+\"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \"+output+\"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(newtentative.listFormat(),timeslots);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 15,
      "e0309463": 2,
      "yueyuu": 3,
      "-": 16
    }
  },
  {
    "path": "src/test/java/TimeboundTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeboundTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private Timebound timeboundTest \u003d new Timebound(\"task to be done\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescriptionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[P][ND] task to be done(between: 12 Aug 2019 and 13 Aug 2019)\", timeboundTest.listFormat());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void getFormatTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"P|ND|task to be done|2019-08-12 and 2019-08-13\", timeboundTest.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 5,
      "JasonLeeWeiHern": 2,
      "yueyuu": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/TriviaTest/TriviaManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package TriviaTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    //private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    //private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.setErr(originalErr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testLearnInput() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String testinput \u003d \"Love Qinhuai River\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.learnInput(testinput,storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(\"Love Qinhuai River\",triviaManager.CommandMemory.get(\"Love\").get(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testShowPossibleInput() throws IOException{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String testinput \u003d \"Love Qinhuai River\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager\u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.learnInput(testinput,storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.showPossibleInputs(\"Love\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.print(\"Could it be one of the below inputs?\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.print(triviaManager.CommandMemory.get(\"Love\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(\"Could it be one of the below inputs?\\n\"+triviaManager.CommandMemory.get(\"Love\").toString()+\"\\n\",outContent.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 50,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.TaskCommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TodoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.UndoTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class UndoCommandTest extends UndoTaskCommand{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void EmptyCommandStackTest() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        undo(CommandStack,list,storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"You cannot undo the previous command.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void CommandStackTest() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e CommandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d storage.readFromSaveFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TaskCommandParser.copyOldList(oldList, list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CommandStack.push(oldList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"todo study\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        todoCommand.execute(list,ui,storage,CommandStack,deletedTask, triviaManager);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        undo(CommandStack,list,storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"[T][ND] study\\r\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"Now you have \" + list.size() + \" tasks in the list.\\r\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"You have undo the previous command.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 1,
      "e0309463": 64
    }
  },
  {
    "path": "src/test/java/capCalculatorTest/AddCAPCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package capCalculatorTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capCalculator.AddCAPCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class AddCAPCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e CAPList \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testAddCAPCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"add 1,CS1231,4,A\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddCAPCommand test \u003d new AddCAPCommand(ui, CAPList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Successfully added: CS1231\\n\", output.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testIncorrectFormatAddCAPCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"add 1,CS1231,4,A and 2,EE2026,4,B\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddCAPCommand test \u003d new AddCAPCommand(ui, CAPList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 45,
      "e0309463": 4
    }
  },
  {
    "path": "src/test/java/capCalculatorTest/ConvertGradeToScoreCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package capCalculatorTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capCalculator.ConvertGradeToScoreCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ConvertGradeToScoreCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertAPLUStoScoreCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(5.0, test.converter(\"A+\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertAtoScoreCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(5.0, test.converter(\"A\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertAMINUStoScoreCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(4.5, test.converter(\"A-\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertBPLUStoScoreCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(4.0, test.converter(\"B+\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertBtoScoreCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(3.5, test.converter(\"B\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertBMINUStoScoreCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(3.0, test.converter(\"B-\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertCPLUStoScoreCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(2.5, test.converter(\"C+\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertCtoScoreCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(2.0, test.converter(\"C\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertDPLUStoScoreCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(1.5, test.converter(\"D+\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertDtoScoreCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(1.0, test.converter(\"D\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertFtoScoreCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(0.0, test.converter(\"F\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertOTHERtoScoreCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(0.1, test.converter(\"CS\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 103
    }
  },
  {
    "path": "src/test/java/capCalculatorTest/DeleteCAPCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package capCalculatorTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capCalculator.DeleteCAPCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeleteCAPCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e CAPList \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteCAPCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete CS1231\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteCAPCommand test \u003d new DeleteCAPCommand(ui, CAPList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Successfully deleted: CS1231\\n\", output.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteNotInCAPListCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete CG1111\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteCAPCommand test \u003d new DeleteCAPCommand(ui, CAPList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"CG1111 is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteIncorrectFormatInCAPListCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete CG1111 and CS1231\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteCAPCommand test \u003d new DeleteCAPCommand(ui, CAPList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 59,
      "e0309463": 10
    }
  },
  {
    "path": "src/test/java/capCalculatorTest/FindCAPCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package capCalculatorTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capCalculator.FindCAPCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindCAPCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK \u003d \"------------------------------\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e CAPList \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindByModuleCodeCAPCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find CG1112\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindCAPCommand test \u003d new FindCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2   | CG1112      | 6  | A\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINEBREAK, output.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindNotInTheCapListCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find CS2101\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindCAPCommand test \u003d new FindCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"CS2101 is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindIncorrectFormatInTheCapListCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find cs2101 cs2203\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindCAPCommand test \u003d new FindCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 67,
      "e0309463": 16
    }
  },
  {
    "path": "src/test/java/capCalculatorTest/ListCAPCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package capCalculatorTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capCalculator.ListCAPCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListCAPCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK \u003d \"------------------------------\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCAPCommandParser\u003e\u003e CAPList \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListAllCAPCommand() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list all\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCAPCommand test \u003d new ListCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1   | CS1231      | 4  | A\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2   | CG1112      | 6  | A\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINEBREAK"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Total CAP: 5.0\\n\", output.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListSemFoundCAPCommand() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list 1\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCAPCommand test \u003d new ListCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1   | CS1231      | 4  | A\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINEBREAK"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Sem 1 CAP: 5.0\\n\", output.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListSemFoundEmptyCAPCommand() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list 3\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCAPCommand test \u003d new ListCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"No modules in this semester!\\n\", output.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListSemNotFoundCAPCommand() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list 1 and 2\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCAPCommand test \u003d new ListCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListNonsenseCAPCommand() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP \u003d new CAPCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCAP);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cCAPCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser newCAP2 \u003d new CAPCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCAP2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"1\", list);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CAPList.put(\"2\", list2);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list nonsense\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCAPCommand test \u003d new ListCAPCommand(ui, CAPList, LINEBREAK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 96,
      "e0309463": 24
    }
  },
  {
    "path": "src/test/java/capCalculatorTest/MainCAPCalculatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package capCalculatorTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parsers.CAPCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class MainCAPCalculatorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMainESCCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String moduleCode \u003d \"\", grade \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int moduleCredit \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser test \u003d new CAPCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        test.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Assertions.assertEquals(\"Welcome to your CAP Calculator page! What would you like to do?\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"1. Add module: add semester number,\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"module\u0027s code, module\u0027s credit, module\u0027s grade\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"2. Find module: find moduleCode\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"3. Delete a module: delete module\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"4. See your CAP list: list all/semester number\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"5. List of commands for CAP page: commands\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"6. Help page: help\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"7. Exit CAP page: esc\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nGoing back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"------------------ \\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"1. help\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"4. places\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"6. cap\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"7. spec\\n\" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"9. notes\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"To exit: bye\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                , output.toString()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMainNumCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String moduleCode \u003d \"\", grade \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int moduleCredit \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CAPCommandParser test \u003d new CAPCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"7\".getBytes());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        test.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Assertions.assertEquals(\"Welcome to your CAP Calculator page! What would you like to do?\\n\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"1. Add module: add semester number,\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"module\u0027s code, module\u0027s credit, module\u0027s grade\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"2. Find module: find moduleCode\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"3. Delete a module: delete module\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"4. See your CAP list: list all/semester number\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"5. List of commands for CAP page: commands\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"6. Help page: help\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"7. Exit CAP page: esc\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nGoing back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"------------------ \\n\" +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"1. help\\n\" +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"4. places\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"6. cap\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"7. spec\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"9. notes\\n\" + \"To exit: bye\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                , output.toString()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 111,
      "mononokehime14": 3,
      "e0309463": 3
    }
  },
  {
    "path": "src/test/java/contactCommandTest/AddContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//package ContactCommandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import gazeeebo.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//public class AddContactCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void restoreStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void testAddContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        ui.fullCommand \u003d \"add Test,96251822\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        AddContactCommand test \u003d new AddContactCommand(ui, contact);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        assertEquals(\"Successfully added: Test,96251822\\n\", output.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void testIncorrectFormatAddContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        ui.fullCommand \u003d \"add Test,96251822 and Jason,123412\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        AddContactCommand test \u003d new AddContactCommand(ui, contact);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 52
    }
  },
  {
    "path": "src/test/java/contactCommandTest/DeleteContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//package ContactCommandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import gazeeebo.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void setupStream() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        System.setOut(mine);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @AfterEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void restoreStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        System.out.flush();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        System.setOut(original);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void testDeleteInContactsCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        contact.put(\"jason\", \"9625 1722\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        ui.fullCommand \u003d \"delete jason\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        assertEquals(\"Successfully deleted: jason\\n\", output.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void testDeleteNotInContactsCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        ui.fullCommand \u003d \"delete jason\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        assertEquals(\"jason is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    void testDeleteIncorrectFormatContactsCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        ui.fullCommand \u003d \"delete jason and janel\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 63
    }
  },
  {
    "path": "src/test/java/contactCommandTest/FindContactsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contactCommandTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindContactsCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindContactsCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find jason\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindContactCommand test \u003d new FindContactCommand(ui, contact);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Name:                         | Number:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINE_BREAK"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"jason                         | 9825 1822\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINE_BREAK, output.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testUnableFindContactCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find jay\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindContactCommand test \u003d new FindContactCommand(ui, contact);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"jay is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testIncorrectFormatFindContactCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find janel and jason\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindContactCommand test \u003d new FindContactCommand(ui, contact);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 73
    }
  },
  {
    "path": "src/test/java/contactCommandTest/ListContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contactCommandTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.ListContactCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListContactsCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListContactCommand test \u003d new ListContactCommand(contact);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Name:                         | Number:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINE_BREAK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"janel                         | 9625 1722\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINE_BREAK"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"jason                         | 9825 1822\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINE_BREAK"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nCEG CONTACTS:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNUS CONTACTS:\\n\", output.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 50
    }
  },
  {
    "path": "src/test/java/contactCommandTest/MainContactsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//package ContactCommandTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import gazeeebo.TriviaManager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import gazeeebo.parsers.ContactCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//public class MainContactsCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    void setupStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.setOut(mine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.setOut(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    void testWelcome() throws IOException, DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        TriviaManager triviaManager \u003d new TriviaManager(storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        ContactCommandParser test \u003d new ContactCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.setIn(in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        test.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        assertEquals(\"Welcome to your contacts page! What would you like to do?\\n\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"1. Add contacts: add name,number\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"2. Find contacts base on name: find name\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"3. Delete a contact: delete name\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"4. See your contacts list: list\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"5. Undo Command: undo\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"6. List of commands for contacts page: commands\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"7. Help page: help\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"8. Exit contact page: esc\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"__________________________________________________________\\n\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        + \"Go back to Main Menu...\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"Content Page:\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"------------------ \\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"1. help\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"2. contacts\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"3. expenses\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"4. places\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"5. tasks\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"6. cap\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"7. spec\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"8. moduleplanner\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                        \"9. notes\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//                , output.toString()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 77
    }
  },
  {
    "path": "src/test/java/note/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class AddNoteCommandTest extends AddNoteCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //processCommand() tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote\".split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a(n) addNote cannot be empty.\", d.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongSecondWord_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote weekly 2019-09-09\".split(\" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The second word in the command has to be \\\u0027day\\\u0027, \\\u0027week\\\u0027 or \\\u0027month\\\u0027.\", d.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_emptyDateField_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote day\".split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a date.\", d.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForDay_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote day 2019-1-1\".split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM-DD format.\", d.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForWeek_exceptionThrown() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote week 2019-2-1\".split(\" \"); //this date is not a Monday"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM-DD format.\", d.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForMonth_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote month 2019-2-1\".split(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM format.\", d.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_dateForWeekIsNotMonday_exceptionThrown() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote week 2019-02-01\".split(\" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! The date provided must be a Monday.\", d.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //execute() tests"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"addNote day 2019-10-12\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that day:\\r\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that day.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"addNote week 2019-10-14\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that week:\\r\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that week.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"addNote month 2019-12\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that month:\\r\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that month.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 234
    }
  },
  {
    "path": "src/test/java/note/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class DeleteNoteCommandTest extends DeleteNoteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-09-11\", \"note 1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote day 2020-09-11 2\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that day:\\r\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-01-06\", \"note 1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.weekly.add(note);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote week 2020-01-06 2\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that week:\\r\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-03-01\", \"note 1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.monthly.add(note);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote month 2020-03 2\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that month:\\r\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNotSpecified_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote month 2020-03\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please specify a note number.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNonExistent_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-09-11\", \"note 1\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote day 2020-09-11 3\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"OOPS!!! That note number does not exist.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noNotesOnSpecifiedDay_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote day 2020-12-29 3\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"OOPS!!! There are no notes for this day to delete.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 91
    }
  },
  {
    "path": "src/test/java/note/EditNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class EditNoteCommandTest extends EditNoteCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editNoteInList_noteNumberNonExistent_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(new Note(\"2019-08-11\", \"note to be edited\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-08-11\", Note.noteFormatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editNoteInList(3, NoteList.daily, date, \"edited note\", \"day\", \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! That note number does not exist.\", d.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editNoteInList_noNotesOnSpecifiedDay_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-06-03\", Note.noteFormatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editNoteInList(1, NoteList.weekly, date, \"edited note\", \"week\", \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! There are no notes for this week to edit from.\", d.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNotSpecified_errorMessagePrinted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote day 2019-08-11\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please specify a note number.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(new Note(\"2019-08-11\", \"note to be edited\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote day 2019-08-11 1\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that day:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.weekly.add(new Note(\"2019-10-14\", \"note to be edited\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote week 2019-10-14 1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that week:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.monthly.add(new Note(\"2019-08-01\", \"note to be edited\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote month 2019-08 1\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that month:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 190
    }
  },
  {
    "path": "src/test/java/note/ListNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class ListNoteCommandTest extends ListNoteCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_notesExistForTheSpecifiedPeriod_success() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2019-11-12\", \"note 1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"listNote day 2019-11-12\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Here are your notes for that day:\\r\\n\" + \"1. note 1\\r\\n2. note 2\\r\\n3. note 3\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noNotesExistForTheSpecifiedPeriod_success() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"listNote month 2019-10\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"There are no notes for that month.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 50
    }
  }
]
