[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import parsers.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Returns main function for duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param args a String array that takes in input from the command line"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException | ParseException | IOException | NullPointerException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            list \u003d store.ReadFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.UpcomingTask(list);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.ReadCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String command \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                c.execute(list, ui, store);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException | ParseException | IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showDateFormatError();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (e instanceof IOException) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showIOErrorMessage(e);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"System exiting\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 5,
      "e0309463": 2,
      "yueyuu": 5,
      "-": 37
    }
  },
  {
    "path": "src/main/java/Storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.FixDurationCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //String directory \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //String fileName \u003d \"sample.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String absolutePath \u003d \"Save.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void Storages(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(absolutePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cTask\u003e ReadFile() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (new File(absolutePath).exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            File file \u003d new File(absolutePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String[] details \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                if (details[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    Todo t \u003d new Todo(details[2].trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        t.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (details[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Deadline d \u003d new Deadline(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        d.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        d.isDone \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(d);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                else if (details[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                    Timebound tb \u003d new Timebound(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                        tb.isDone \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                        tb.isDone \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                    tList.add(tb);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                else if (details[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    FixedDuration FD \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        FD.isDone \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                        FD.isDone \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(FD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (details[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    DoAfter DA \u003d new DoAfter(details[3].trim(), details[3].trim(), details[2].trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                        DA.isDone \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                        DA.isDone \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else if(details[0].equals(\"TE\")){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ArrayList\u003cString\u003e timeslots \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                   for(int i\u003d3;i\u003cdetails.length;i++){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                       timeslots.add(details[i]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                   }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                   TentativeEvent TE \u003d new TentativeEvent(details[2].trim(),timeslots);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TE.isDone \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TE.isDone \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tList.add(TE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                        e.isDone \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        e.isDone \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    tList.add(e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return tList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 11,
      "JasonLeeWeiHern": 5,
      "mononokehime14": 11,
      "e0309463": 6,
      "yueyuu": 19,
      "-": 48
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDateTime by ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");//24h clock"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, fmtD);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"D\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"by: \" + by.format(fmtD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"]\" + super.description + \"(by:\" + by.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy HH:mm:ss\")) + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 9,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Tasks/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String before;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public String after;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfter(String description, String before, String after) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.before \u003d before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"DA\" + \"|\" + super.getStatusIcon() + \"| \" + after + \"| \" + before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[DA]\" + \"[\" + super.getStatusIcon() + \"]\" + after + \"(/after:\" + before + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 4,
      "yueyuu": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"); //formatter for date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\"); //formatter for time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException, ArrayIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTime[0], fmtED);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.start \u003d LocalTime.parse(time[0], fmtET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.end \u003d LocalTime.parse(time[1], fmtET);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"E\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"at: \" + fmtED.format(date)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \" \" + this.start.format(fmtET) + \"-\" + this.end.format(fmtET);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String datestring \u003d date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));// You can change to this format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"]\" + super.description + \"(at:\" + datestring + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + this.start.format(fmtET) + \"-\" + this.end.format(fmtET) + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 1,
      "e0309463": 1,
      "yueyuu": 13,
      "-": 23
    }
  },
  {
    "path": "src/main/java/Tasks/FixedDuration.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    public String duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDuration(String description, String duration) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return \"FD\"+ \"|\" + super.getStatusIcon() + \"| \" + super.description + \"|\" + \"requires: \" + duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[FD]\" + \"[\" + super.getStatusIcon() + \"]\" + super.description + \"(requires:\" + duration + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/Tasks/TentativeEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeEvent extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cString\u003e tentativetimes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TentativeEvent(String description,ArrayList\u003cString\u003e tentativetimes) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tentativetimes \u003d tentativetimes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"TE\"+ \"|\" + super.getStatusIcon() + \"|\" + super.description ;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            timeslots +\u003d  \"|\" + tentativetimes.get(i);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String listFormat(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String timeslots \u003d \"[TE]\"+ \"[\" + super.getStatusIcon() + \"] \"+description+\"\\n\" ;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED).format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \"+  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if(i\u003d\u003d0){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \"+output+\"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \"+output+\"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 20,
      "-": 25
    }
  },
  {
    "path": "src/main/java/Tasks/Timebound.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//public class Timebound extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public LocalDate dateStart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public LocalDate dateEnd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public Timebound (String description, String period) throws DateTimeParseException, ArrayIndexOutOfBoundsException{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String[] date \u003d period.split(\" and \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        this.dateStart \u003d LocalDate.parse(date[0], fmtED);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        this.dateEnd \u003d LocalDate.parse(date[1], fmtED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String dateStartString \u003d dateStart.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));// You can change to this format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String dateEndString \u003d dateEnd.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));// You can change to this format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        return \"P\"+ \" | \" + super.getStatusIcon() + \" | \" + super.description + \" |between: \" + dateStartString + \" and \" + dateEndString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public String listFormat(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String dateStartString \u003d dateStart.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));// You can change to this format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String dateEndString \u003d dateEnd.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));// You can change to this format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        return \"[P]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(between: \" + dateStartString + \" and \" + dateEndString + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 42
    }
  },
  {
    "path": "src/main/java/UI/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package UI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String FullCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void ReadCommand() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        FullCommand \u003d reader.readLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void UpcomingTask(ArrayList\u003cTask\u003e list) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cDeadline\u003e DeadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cEvent\u003e EventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getClass().getName().equals(\"Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description, task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                DeadlineList.add(deadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (task.getClass().getName().equals(\"Tasks.Event\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Event event \u003d new Event(task.description, task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                EventList.add(event);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(DeadlineList, Comparator.comparing(u -\u003e u.by));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(EventList, Comparator.comparing(u -\u003e u.date));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Upcoming deadlines:\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c DeadlineList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(i + 1 + \".\" + DeadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Upcoming events:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c EventList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(i + 1 + \".\" + EventList.get(i).listFormat());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showDateFormatError() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        System.err.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void showDeadlineDateFormatError() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showEventDateFormatError() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss-HH:mm:ss format\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showIOErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        System.err.println(\"An IOException was caught :\" + e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 2,
      "e0309463": 5,
      "yueyuu": 8,
      "-": 65
    }
  },
  {
    "path": "src/main/java/commands/CategoryListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CategoryListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cDeadline\u003e DeadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cEvent\u003e EventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTodo\u003e TodoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cFixedDuration\u003e FDList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        //ArrayList\u003cTimebound\u003e TBList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (task.getClass().getName().equals(\"Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description, task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                DeadlineList.add(deadline);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"Tasks.Event\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event event \u003d new Event(task.description, task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                EventList.add(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"Tasks.Todo\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Todo todo \u003d new Todo(task.description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                TodoList.add(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"Tasks.FixedDuration\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FixedDuration fixedDuration \u003d new FixedDuration(task.description, task.toString().split(\"requires:\")[1].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FDList.add(fixedDuration);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            else if (task.getClass().getName().equals(\"Tasks.Timebound\")) { //issue with datetimeparse"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                Timebound timebound \u003d new Timebound(task.description, task.toString().split(\"between:\")[1].trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                TBList.add(timebound);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if(ui.FullCommand.equals(\"deadline list\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of deadlines tasks:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c DeadlineList.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + DeadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.FullCommand.equals(\"event list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of events tasks:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c EventList.size(); i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + EventList.get(i).listFormat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.FullCommand.equals(\"todo list\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of todo tasks:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c TodoList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + TodoList.get(i).listFormat());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.FullCommand.equals(\"fixed duration list\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of fixed duration tasks:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c FDList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + FDList.get(i).listFormat());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        else if (ui.FullCommand.equals(\"timebound list\")) { //issue with datetimeparse"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            System.out.println(\"List of timebounded tasks:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            for (int i \u003d 0; i \u003c TBList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                System.out.println(i + 1 + \".\" + TBList.get(i).listFormat());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 77
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * A base abstract class of all the commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/java/commands/ConfirmTentativeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfirmTentativeCommand extends Command{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 7) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"OOPS!!! The index of tentative event cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    int index \u003d Integer.parseInt(ui.FullCommand.substring(7).trim()) - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if(list.get(index).listFormat().getBytes()[1] !\u003d\u0027T\u0027 \u0026\u0026 list.get(index).listFormat().getBytes()[2] !\u003d \u0027E\u0027){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        throw new DukeException(\"OOPS!!! You can only confirm tentative event task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        String tempstring \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"You are confirming this tentative event: \" + list.get(index).description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(tempstring);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Please indicate which time slot you want to confirm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ui.ReadCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        int WhichTimeSlot \u003d Integer.parseInt(ui.FullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        String[] timeslots \u003d list.get(index).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(timeslots[WhichTimeSlot+2]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Task ev \u003d new Event(list.get(index).description, timeslots[WhichTimeSlot+2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Are you sure you want to confirm this time slot: \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ui.ReadCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        if (ui.FullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            list.add(ev);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            list.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            System.out.println(\"Confirmed.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (list.get(i).getClass().getName().equals(\"Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (list.get(i).getClass().getName().equals(\"Tasks.Event\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 18,
      "yueyuu": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                description \u003d ui.FullCommand.split(\"/by \")[0].substring(9);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Deadline d \u003d new Deadline(description, ui.FullCommand.split(\"/by \")[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(d);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(d.listFormat());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showDeadlineDateFormatError();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 9,
      "e0309463": 8,
      "yueyuu": 8,
      "-": 19
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a deletion cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (ui.FullCommand.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    int index \u003d Integer.parseInt(ui.FullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(taskremoved);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    } else if (ui.FullCommand.contains(\"all\")) { //delete all tasks at once"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        list.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed all the tasks.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    } else if (ui.FullCommand.contains(\"and\")) { //delete multiple chosen tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int numOfAnds \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for(int i \u003d 0; i \u003c ui.FullCommand.length(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (ui.FullCommand.charAt(i) \u003d\u003d \u0027a\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            numOfAnds++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String[] strNumberList \u003d ui.FullCommand.substring(7).split(\" and \", numOfAnds+1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int size \u003d strNumberList.length;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int[] intNumberList \u003d new int[size];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for(int j \u003d 0; j \u003c size; j++){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        intNumberList[j] \u003d Integer.parseInt(strNumberList[j]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    Arrays.sort(intNumberList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int count \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for(int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int index \u003d intNumberList[k] - count;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(taskremoved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 32,
      "JasonLeeWeiHern": 5,
      "e0309463": 5,
      "yueyuu": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/commands/DoAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        String before \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String after \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitstring \u003d ui.FullCommand.split(\"/after\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        before \u003d splitstring[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        after \u003d splitstring[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        DoAfter to \u003d new DoAfter(before, before, after);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 9,
      "-": 32
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"The task done number cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            int numbercheck \u003d Integer.parseInt(ui.FullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            list.get(numbercheck).isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(list.get(numbercheck).listFormat());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "             * Print out the task to do after"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                if (list.get(i).description.contains(list.get(numbercheck).description) \u0026\u0026 list.get(i).listFormat().contains(\"/after\") \u0026\u0026 i !\u003d numbercheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"OK! Now you need to do the following:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    String[] temp \u003d list.get(i).listFormat().split(\"\\\\(/after\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(temp[0].substring(7));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "             * Add some weekly task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "             */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            RecurringCommand rc \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            rc.AddRecurring(list, list.get(numbercheck).toString(), storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list    task lists"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] break_command_words \u003d ui.FullCommand.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] break_list_words;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String newChangeString \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int num_in_list \u003d Integer.parseInt(break_command_words[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 2; i \u003c break_command_words.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (i !\u003d break_command_words.length - 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newChangeString +\u003d break_command_words[i] + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newChangeString +\u003d break_command_words[i];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        break_list_words \u003d list.get(num_in_list - 1).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (break_list_words[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//            System.out.println(\"Please input your new ToDo description:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Todo newtodo \u003d new Todo(newChangeString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Ok, we have edited your ToDo description. \\n\\tFrom: \" + list.get(num_in_list - 1).listFormat() +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \"\\n\\tTo:   \" + newtodo.listFormat());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.set(num_in_list - 1, newtodo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (break_list_words[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//            System.out.println(\"Please input your new Deadline description and time:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] break_deadline \u003d newChangeString.split(\"/by \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String description \u003d break_deadline[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String by \u003d break_deadline[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Deadline newdeadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Ok, we have edited your Deadline description and time. \\n\\tFrom: \" + list.get(num_in_list - 1).listFormat() +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \"\\n\\tTo:   \" + newdeadline.listFormat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.set(num_in_list - 1, newdeadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//            System.out.println(\"Please input your new Event description and time:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(newChangeString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] break_event \u003d newChangeString.split(\"/at \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String description \u003d break_event[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String at \u003d break_event[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Event newEvent \u003d new Event(description, at);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Ok, we have edited your Event description and time. \\n\\tFrom: \" + list.get(num_in_list - 1).listFormat() +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \"\\n\\tTo:   \" + newEvent.listFormat());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.set(num_in_list - 1, newEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 80
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d ui.FullCommand.split(\"/at \")[0].substring(6);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            String at \u003d ui.FullCommand.split(\"/at \")[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Event ev \u003d new Event(description, at);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            //CHECKING FOR SCHEDULE ANOMALIES------------------------------------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cEvent\u003e clash \u003d new ArrayList\u003cEvent\u003e(); //to store events that clash with the incoming event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                if (t.getClass().getName().equals(\"Tasks.Event\") \u0026\u0026 ((Event) t).date.equals(ev.date) \u0026\u0026"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((ev.start.isBefore(((Event) t).start) \u0026\u0026 ev.end.isAfter(((Event) t).start)) ||"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                ev.start.equals(((Event) t).start) ||"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                                (ev.start.isAfter(((Event) t).start) \u0026\u0026 ev.start.isBefore(((Event) t).end)))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    clash.add((Event) t);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!clash.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"The following event(s) clash with your current event:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c clash.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println((i + 1) + \".\" + clash.get(i).listFormat());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            //--------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            list.add(ev);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showEventDateFormatError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 5,
      "yueyuu": 4,
      "-": 59
    }
  },
  {
    "path": "src/main/java/commands/FixDurationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.FixedDuration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixDurationCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list    task list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String duration \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitstring;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        splitstring \u003d ui.FullCommand.split(\"/requires\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        description \u003d splitstring[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        duration \u003d splitstring[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FixedDuration to \u003d new FixedDuration(description, duration);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 16,
      "-": 37
    }
  },
  {
    "path": "src/main/java/commands/RecurringCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void AddRecurring(ArrayList\u003cTask\u003e list, String list_description, Storage storage) throws ParseException, IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitstring;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] datesplitstring;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] toget_description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        int date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (list_description.contains(\"weekly\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (list_description.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(0).plusDays(7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                Event new_weeklyEvent \u003d new Event(description, (conc_time));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                list.add(new_weeklyEvent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"I\u0027ve automatically added this weekly task again:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(new_weeklyEvent.listFormat());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (list_description.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(0).plusDays(7);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline new_weeklyDeadline \u003d new Deadline(description, (conc_time));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.add(new_weeklyDeadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"\\nI\u0027ve automatically added this weekly task again:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(new_weeklyDeadline.listFormat());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (list_description.contains(\"monthly\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (list_description.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event new_monthlyEvent \u003d new Event(description, (conc_time));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                list.add(new_monthlyEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"I\u0027ve automatically added this monthly task again:\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(new_monthlyEvent.listFormat());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (list_description.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline new_monthlyDeadline \u003d new Deadline(description, (conc_time));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                list.add(new_monthlyDeadline);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"\\nI\u0027ve automatically added this weekly task again:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(new_monthlyDeadline.listFormat());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (list_description.contains(\"yearly\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (list_description.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event new_yearlyEvent \u003d new Event(description, (conc_time));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.add(new_yearlyEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"I\u0027ve automatically added this weekly task again:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(new_yearlyEvent.listFormat());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (list_description.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitstring \u003d list_description.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                datesplitstring \u003d splitstring[1].split(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(datesplitstring[0], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hour_min_sec \u003d datesplitstring[1];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String conc_time \u003d newDate + \" \" + hour_min_sec;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toget_description \u003d splitstring[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d toget_description[toget_description.length - 1];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline new_yearlyDeadline \u003d new Deadline(description, (conc_time));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.add(new_yearlyDeadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"I\u0027ve automatically added this weekly task again:\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(new_yearlyDeadline.listFormat());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 4,
      "JasonLeeWeiHern": 76,
      "yueyuu": 1,
      "-": 74
    }
  },
  {
    "path": "src/main/java/commands/RescheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        if (ui.FullCommand.length() \u003d\u003d 10) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"OOPS!!! The object of a rescheduling cannot be null.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d Integer.parseInt(ui.FullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            String Decription \u003d list.get(index).description;;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"You are rescheduling this task: \" + Decription);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Please type in your new timeline\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            String time \u003d ui.FullCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Are you sure you want to reschedule this task? (yes/no)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    Task RescheduledDeadline \u003d new Deadline(Decription, time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(RescheduledDeadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(RescheduledDeadline.listFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    Event RescheduledEvent \u003d new Event(Decription, time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.add(RescheduledEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(RescheduledEvent.listFormat());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"It\u0027s fine. Nothing has been changed.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 1,
      "yueyuu": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/commands/ScheduleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks the user has on the specified day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: schedule \u003cyyyy-MM-dd\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the schedule command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws NullPointerException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d LocalDate.parse(ui.FullCommand.trim().split(\" \")[1], fmt);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a schedule cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate tDate \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (t.getClass().getName().equals(\"Tasks.Event\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                tDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (t.getClass().getName().equals(\"Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                tDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (date.equals(tDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"You have nothing scheduled on this day!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + date.format(fmt) + \":\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println((i+1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 19,
      "-": 53
    }
  },
  {
    "path": "src/main/java/commands/SnoozeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if(ui.FullCommand.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"OOPS!!! The object of a snoozing cannot be null.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d Integer.parseInt(ui.FullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            String Description\u003dlist.get(index).description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"You are snoozing this task: \"+list.get(index).description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Please indicate how much time you want to snooze\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.ReadCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            int year \u003d Integer.parseInt(ui.FullCommand.split(\" \")[0]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            int day \u003d Integer.parseInt(ui.FullCommand.split(\" \")[2]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            int month \u003dInteger.parseInt(ui.FullCommand.split(\" \")[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            int hour \u003d Integer.parseInt(ui.FullCommand.split(\" \")[3]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDateTime newDate  \u003d LocalDateTime.parse(date,DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String newBy\u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Task snoozedDeadline \u003d new Deadline(Description,newBy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                list.add(snoozedDeadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s deadline: \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(snoozedDeadline.listFormat());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                String start \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[1].split(\"-\")[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                String end \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4).split(\" \")[1].split(\"-\")[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalDate newDate \u003d LocalDate.parse(date,DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalTime newStart \u003d  LocalTime.parse(start,DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                LocalTime newEnd \u003d LocalTime.parse(end,DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                newStart \u003d newStart.plusHours(hour);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                newEnd \u003d newEnd.plusHours(hour);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                String newAt \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))+\" \"+newStart.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"))+\"-\"+newEnd.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Event snoozedEvent \u003d new Event(Description,newAt);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                list.add(snoozedEvent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s time: \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(snoozedEvent.listFormat());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 3,
      "yueyuu": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/commands/TentativeEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeEventCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.length() \u003d\u003d 9) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an tentative event cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d ui.FullCommand.substring(10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"You are creating a tentative event: \" + description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Please enter possible time slots of the event\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"When you are done, key in \u0027/\u0027.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.ReadCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                while (!ui.FullCommand.equals(\"/\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    tentativetimes.add(ui.FullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    ui.ReadCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TentativeEvent newtentative \u003d new TentativeEvent(description,tentativetimes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this tentative event:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(newtentative.listFormat());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You could confirm one of the slots later.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.add(newtentative);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 10,
      "yueyuu": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/commands/TimeboundCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import Storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import Tasks.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import Exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//public class TimeboundCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String description \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        String duration \u003d ui.FullCommand.split(\"/\")[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            if (duration.length() \u003e 6 \u0026\u0026 duration.length() \u003c 33){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                throw new DukeException(\"OOPS!!! There is no proper duration of time allocated for this task.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                description \u003d ui.FullCommand.split(\"/between \")[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            String period \u003d ui.FullCommand.split(\"/between \")[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            Timebound tb \u003d new Timebound(description, period);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            list.add(tb);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            System.out.println(tb.listFormat());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 48
    }
  },
  {
    "path": "src/main/java/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                description \u003d ui.FullCommand.substring(5);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo to \u003d new Todo(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/commands/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage) throws DukeException, ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ui.FullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"The undo task number cannot be empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            int numberCheck \u003d Integer.parseInt(ui.FullCommand.substring(5)) - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            if (list.get(numberCheck).isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                list.get(numberCheck).isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as UNDONE: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(list.get(numberCheck).listFormat());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.Storages(sb.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/java/parsers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        if (command.contains(\"list\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"fixed\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.contains(\"timebound\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                return new CategoryListCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }else if (command.contains(\"done\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"delete\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeadlineCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"/after\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DoAfterCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EventCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TodoCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        else if (command.contains(\"/between\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//            return new TimeboundCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        else if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"/require\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FixDurationCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"reschedule\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RescheduleCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"schedule\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ScheduleCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"snooze\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SnoozeCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"tentative\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TentativeEventCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"confirm\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ConfirmTentativeCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command.contains(\"undo\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if(command.contains(\"edit\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new EditCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 18,
      "JasonLeeWeiHern": 2,
      "e0309463": 1,
      "-": 43
    }
  },
  {
    "path": "src/test/java/DoAfterCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.DoAfter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    DoAfter testdoAfter \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"DA|\\u2718| return book| read book\", testdoAfter.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"[DA][\\u2718]return book(/after:read book)\", testdoAfter.listFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 20
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import commands.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testexecute() throws ParseException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditCommand test \u003d new EditCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.FullCommand \u003d \"edit 1 monthly assign /by 2019-12-12 10:10:10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        test.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Ok, we have edited your Deadline description and time. \\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\tFrom: [D][\\u2718]tutorial homework(by:12 Dec 2019 10:10:10)\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \"\\tTo:   [D][\\u2718]monthly assign (by:12 Dec 2019 10:10:10)\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 53
    }
  },
  {
    "path": "src/test/java/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "class EventCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void restoreStream(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash1() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of clashing events are the same"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 03:03:03-04:04:04\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ec.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"1.[E][\\u2718]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"[E][\\u2718]sleep(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash2() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is earlier than old event but clash still occurs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 02:03:03-03:10:04\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ec.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"1.[E][\\u2718]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"[E][\\u2718]sleep(at:12 Dec 2019 02:03:03-03:10:04)\\r\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash3() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is after that of old event but clash still occurs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 03:10:03-03:50:04\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ec.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"1.[E][\\u2718]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"[E][\\u2718]sleep(at:12 Dec 2019 03:10:03-03:50:04)\\r\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_noClash() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.FullCommand \u003d \"event sleep/at 2019-12-12 12:03:03-14:10:04\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ec.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\" +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                \"[E][\\u2718]sleep(at:12 Dec 2019 12:03:03-14:10:04)\\r\\n\" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 57,
      "-": 47
    }
  },
  {
    "path": "src/test/java/FixDurationCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import Tasks.FixedDuration;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    FixedDuration testFD \u003d new FixedDuration(\"playing basketball\", \"4 hours\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"FD|\\u2718| playing basketball|4 hours\", testFD.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"[FD][\\u2718]playing basketball(requires:4 hours)\", testFD.listFormat());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 18
    }
  },
  {
    "path": "src/test/java/RecurringCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import Storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import Tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import commands.RecurringCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import Exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//public class RecurringCommandTest  {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//    void test() throws ParseException, IOException, DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        RecurringCommand testR \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//        assertEquals(\"I\u0027ve automatically added this weekly task again:\\n[D][?]yearly assignment (by:01 Jan 2020 01:01:01)\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//                testR.AddRecurring(list, \"[D][?]yearly assignment (by:01 Jan 2019 01:01:01)\" ,storage));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 27
    }
  },
  {
    "path": "src/test/java/RescheduleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.SnoozeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExecuteSnooze() throws ParseException,IOException,DukeException{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deadlineCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand \u003d \"reschedule 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String Decription \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand\u003d\"2019-09-18 05:05:05\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task RescheduledDeadline \u003d new Deadline(Decription, ui.FullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(RescheduledDeadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|✘|return book |by: 2019-09-18 05:05:05\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 6,
      "-": 29
    }
  },
  {
    "path": "src/test/java/SnoozeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import UI.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import commands.SnoozeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testExecuteSnooze() throws ParseException,IOException,DukeException{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.FullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deadlineCommand.execute(tasks,ui,storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int year \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int day \u003d1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int month \u003d1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int hour \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String Description \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String date \u003d tasks.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        LocalDateTime newDate  \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String newBy\u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task snoozedDeadline \u003d new Deadline(Description,newBy);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(snoozedDeadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|✘|return book |by: 2009-08-08 04:03:03\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 16,
      "-": 30
    }
  },
  {
    "path": "src/test/java/TentativeEventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TentativeEvent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TentativeEventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testListFormat() throws ParseException,IOException,DukeException{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d \"return book\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2008-06-07 05:05:05-08:08:08\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2007-03-02 04:04:04-10:10:10\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TentativeEvent newtentative \u003d new TentativeEvent(description,tentativetimes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String timeslots \u003d \"[TE]\"+ \"[\" + newtentative.getStatusIcon() + \"] \"+description+\"\\n\" ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED).format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \"+  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if(i\u003d\u003d0){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \"+output+\"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \"+output+\"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newtentative.listFormat(),timeslots);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 16,
      "-": 25
    }
  },
  {
    "path": "src/test/java/TimeboundTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Timebound;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeboundTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Timebound timeboundTest \u003d new Timebound(\"task to be done\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescriptionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"[P][\\u2718] task to be done(between: 12 Aug 2019 and 13 Aug 2019)\", timeboundTest.listFormat());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void getFormatTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"P | \\u2718 | task to be done | between: 12 Aug 2019 and 13 Aug 2019\", timeboundTest.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 2,
      "-": 16
    }
  }
]
