[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    archiveBaseName \u003d \"gazeeebo\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    archiveVersion \u003d \"1.4\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    mainClassName \u003d \"Gazeeebo\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 2,
      "yueyuu": 3,
      "-": 35
    }
  },
  {
    "path": "src/main/java/Gazeeebo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.NotePageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parser.ParserManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Gazeeebo {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Gazeeebo.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Returns main function for duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param args a String array that takes in input from the command line"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        LogCenter.setUpLogger(LOGGER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003cArrayList\u003cTask\u003e\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        store.startUp();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.showWelcome();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list \u003d tasksPageStorage.readFromSaveFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteDaily.txt\", NoteList.daily);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteWeekly.txt\", NoteList.weekly);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NoteStorage.readFromFile(\"NoteMonthly.txt\", NoteList.monthly);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NotePageStorage.readFromGoalFile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            NotePageStorage.readFromModulesFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.upcomingTask(list);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.majorCategories();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String command \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Command c \u003d ParserManager.parse(command, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (c !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    c.execute(list, ui, store, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException | ParseException | IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (e instanceof ParseException) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.showDateFormatError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                LOGGER.log(Level.SEVERE,\"Date time format error.\", e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (e instanceof IOException) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.showIoErrorMessage(e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                LOGGER.log(Level.SEVERE,\"Unable to read file\", e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (e instanceof NullPointerException) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.showSystemTerminateMessage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                LOGGER.log(Level.INFO,\"System terminating without an input\", e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                LOGGER.log(Level.SEVERE,\"Other errors\", e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"System exiting\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 2,
      "JasonLeeWeiHern": 10,
      "mononokehime14": 3,
      "e0309463": 47,
      "yueyuu": 15,
      "-": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * A base abstract class of all the gazeeebo.commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public abstract void execute(ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 Ui ui, Storage storage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 TriviaManager triviaManager)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            IOException, NullPointerException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 8,
      "JasonLeeWeiHern": 4,
      "e0309463": 9,
      "yueyuu": 8
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capcalculator/AddCapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capcalculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Adds a new module to the CAP list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class AddCapCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Index of the grade."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int GRADE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Upper bound of the number of semesters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int UPPER_BOUNDARY \u003d 8;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Lower bound of the number of semesters."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int LOWER_BOUNDARY \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Add a new module into caplist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      prints things to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist deals stores"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public AddCapCommand(final Ui ui, final Map\u003cString,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cCapCommandParser\u003e\u003e caplist) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toAdd \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Input in this format: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"semNumber,Module_Code,total_MC,CAP\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toAdd \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toAdd \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitAddInput \u003d toAdd.split(\",\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String semNumber \u003d splitAddInput[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (Integer.parseInt(semNumber) \u003e\u003d LOWER_BOUNDARY"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(semNumber) \u003c\u003d UPPER_BOUNDARY) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String moduleCode \u003d splitAddInput[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int moduleCredit \u003d Integer.parseInt(splitAddInput[2]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String grade \u003d splitAddInput[GRADE_INDEX];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                CapCommandParser newCap \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        new CapCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (caplist.containsKey(semNumber)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    caplist.get(semNumber).add(newCap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ArrayList\u003cCapCommandParser\u003e semInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    semInfo.add(newCap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    caplist.put(semNumber, semInfo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Successfully added: \" + moduleCode + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 78
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capcalculator/CalculateCapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capcalculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Calculate the cap by using a formula."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class CalculateCapCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Modules without a grade score (S/US/CS) \u003d 0.1."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double DONT_COUNT_SCORE \u003d 0.1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Calculate the CAP of all the modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist the object that deals"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                stores semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the CAP."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public double calculateCap(final Map\u003cString,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cCapCommandParser\u003e\u003e caplist) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double sumCapMcs \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int sumMcs \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double scoreNotToCount \u003d DONT_COUNT_SCORE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                double score \u003d new ConvertGradeToScoreCommand().converter(caplist.get(key).get(i).grade);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (score !\u003d scoreNotToCount) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sumCapMcs +\u003d caplist.get(key).get(i).moduleCredit * score;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sumMcs +\u003d caplist.get(key).get(i).moduleCredit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double cap \u003d sumCapMcs / sumMcs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Calculate the CAP of the particular sem."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   the object that deals stores"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and CAP."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param semNumber the sem which you want to find the CAP."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the CAP."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public double calculateCapPerSem(final Map\u003cString,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cCapCommandParser\u003e\u003e caplist, final String semNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double sumCapMcs \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int sumMcs \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (key.equals(semNumber)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    double score \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            new ConvertGradeToScoreCommand().converter(caplist.get(key).get(i).grade);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (score !\u003d DONT_COUNT_SCORE) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        sumCapMcs +\u003d caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                * score;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        sumMcs +\u003d caplist.get(key).get(i).moduleCredit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double cap \u003d sumCapMcs / sumMcs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 72
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capcalculator/ConvertGradeToScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capcalculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Coverts Grade to Integer score."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ConvertGradeToScoreCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * A/A+ \u003d 5.0."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double A_SCORE \u003d 5.0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * A- \u003d 4.5."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double A_MINUS_SCORE \u003d 4.5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * B+ \u003d 4.0."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double B_PLUS_SCORE \u003d 4.0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * B \u003d 3.5."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double B_SCORE \u003d 3.5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * B- \u003d 3.0."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double B_MINUS_SCORE \u003d 3.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * C+ \u003d 2.5."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double C_PLUS_SCORE \u003d 2.5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * C \u003d 2.0."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double C_SCORE \u003d 2.0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * D+ \u003d 1.5."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double D_PLUS_SCORE \u003d 1.5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * D \u003d 1.0."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double D_SCORE \u003d 1.0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * F \u003d 0.0."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double F_SCORE \u003d 0.0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Modules without a grade score (S/US/CS) \u003d 0.1."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final double DONT_COUNT_SCORE \u003d 0.1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Converts the alphabetical score to integer score."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param grade alphabetical score of the module"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the integer score of the grade according to NUS score syytem"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public double converter(final String grade) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double score;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d A_SCORE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d A_MINUS_SCORE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d B_PLUS_SCORE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d B_SCORE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d B_MINUS_SCORE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d C_PLUS_SCORE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d C_SCORE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d D_PLUS_SCORE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d D_SCORE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d F_SCORE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            score \u003d DONT_COUNT_SCORE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 100
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capcalculator/DeleteCapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capcalculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Deletes a module from the CAP list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteCapCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Delete the module from CAPList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui      prints to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist deals stores"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                semNumber, moduleCode, moduleCredits and GPA score."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DeleteCapCommand(final Ui ui,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            final Map\u003cString,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                    ArrayList\u003cCapCommandParser\u003e\u003e caplist) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleName \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Which module do you want to delete?\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                moduleName \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                moduleName \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean haveDeleted \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                /*Only one element in the array */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (moduleName.equals(caplist.get(key).get(0).moduleCode)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u0026\u0026 (caplist.get(key).size() \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    caplist.remove(key); //Remove the entire key"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    haveDeleted \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        if (moduleName.equals(caplist.get(key).get(i).moduleCode)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            caplist.get(key).remove(i);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            haveDeleted \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!haveDeleted) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(ui.fullCommand.split(\" \")[1]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Successfully deleted: \" + moduleName + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 69
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capcalculator/FindCapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capcalculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Find a module by semNumber or moduleCode."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindCapCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Printing blank spaces."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int BLANK_SPACING \u003d 12;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Finds modules base on moduleCode and list it out."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        prints things to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public FindCapCommand(final Ui ui,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final Map\u003cString,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                  ArrayList\u003cCapCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final String lineBreak) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String findInput \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case (1):"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Which modules do you want to find?\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                findInput \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case (2):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                findInput \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toPrint \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isExist \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c caplist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        .get(key).size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (caplist.get(key).get(i).moduleCode.contains(findInput)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        int noBlankSpacing \u003d BLANK_SPACING"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                - caplist.get(key).get(i).moduleCode.length();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toPrint +\u003d key + \"   | \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).moduleCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        for (int j \u003d 0; j \u003c noBlankSpacing; j++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            toPrint +\u003d \" \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toPrint +\u003d \"| \" + caplist.get(key)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                .get(i).moduleCredit + \"  | \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).grade"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"\\n\" + lineBreak;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        isExist \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isExist) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(findInput + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Sem | Module code | MC | CAP\\n\" + lineBreak);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(toPrint);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 78
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/capcalculator/ListCapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.capcalculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * List out the modules in the semester"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * or list out all modules and the CAP score will be shown."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListCapCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * For formatting the spacing between module name and vertical line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int BLANK_SPACING \u003d 12;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Upper bound of the number of semesters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int UPPER_BOUNDARY \u003d 8;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Lower bound of the number of semesters."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int LOWER_BOUNDARY \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * list out the modules and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * show the CAP of all the modules or a particular sem."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        prints things to the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and CAP score."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ListCapCommand(final Ui ui,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final Map\u003cString,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                  ArrayList\u003cCapCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final String lineBreak) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            CalculateCapCommand calculatedCap \u003d new CalculateCapCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String listWhat \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            double cap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (ui.fullCommand.split(\" \").length) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Which sem do you want to list? \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"all,1,2,3,4,5,6,7,8\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                listWhat \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                listWhat \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (\"all\".equals(listWhat)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                cap \u003d calculatedCap.calculateCap(caplist);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                listAll(caplist, lineBreak, cap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (Integer.parseInt(listWhat) \u003c\u003d UPPER_BOUNDARY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(listWhat) \u003e\u003d LOWER_BOUNDARY) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                cap \u003d calculatedCap.calculateCapPerSem(caplist, listWhat);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                listSem(caplist, lineBreak, cap, listWhat);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method list out all the modules and show the accumulative cap."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and GPA score."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param cap       CAP of the modules."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private void listAll(final Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final String lineBreak, final double cap) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Sem | Module code | MC | CAP\\n\" + lineBreak);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                int noBlankSpacing \u003d BLANK_SPACING"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        - caplist.get(key).get(i).moduleCode.length();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(key + \"   | \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + caplist.get(key).get(i).moduleCode);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int j \u003d 0; j \u003c noBlankSpacing; j++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    System.out.print(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"| \" + caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"  | \" + caplist.get(key).get(i).grade"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Total CAP: \" + cap + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method list out the modules"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * and show the GPA of the a particular sem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param caplist   deals stores"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                  semNumber, moduleCode, moduleCredits and GPA score."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param lineBreak print out a separator to separate each line in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param cap       CAP of the modules."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param semNumber semester that user input"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private void listSem(final Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final String lineBreak,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final double cap, final String semNumber) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Sem | Module code | MC | CAP\\n\" + lineBreak);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    if (key.equals(semNumber)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        int noBlankSpacing \u003d BLANK_SPACING"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                - caplist.get(key).get(i).moduleCode.length();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        System.out.print(key + \"   | \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).moduleCode);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        for (int j \u003d 0; j \u003c noBlankSpacing; j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            System.out.print(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        System.out.print(\"| \" + caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"  | \" + caplist.get(key).get(i).grade"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"\\n\" + lineBreak);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        isEmpty \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isEmpty) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Sem \" + semNumber + \" CAP: \" + cap + \"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"No modules in this semester!\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Invalid semester number.\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 146
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/AddContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Adds a new contact to the contact list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class AddContactCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Add new contact into the contact page."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          deals with printing things to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList map each name to its own phone number"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public AddContactCommand(final Ui ui,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final Map\u003cString, String\u003e contactList)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toAdd \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitInput \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            switch (splitInput.length) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Input in this format: Name,Number\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toAdd \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toAdd \u003d splitInput[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitCommand \u003d toAdd.split(\",\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (splitCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String name \u003d splitCommand[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String number \u003d splitCommand[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                contactList.put(name, number);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Successfully added: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + toAdd + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new NumberFormatException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 54
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/DeleteContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteContactCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Deletes the contact from the contact list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          deals with printing things to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList map each name to its own phone number"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DeleteContactCommand(final Ui ui,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                final Map\u003cString, String\u003e contactList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String nameToDelete \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What is the name you want to delete?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToDelete \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 1; i \u003c ui.fullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    nameToDelete \u003d nameToDelete.concat(ui.fullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToDelete \u003d nameToDelete.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (contactList.containsKey(nameToDelete)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                contactList.remove(nameToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Successfully deleted: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + nameToDelete + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(nameToDelete + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 45
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/FindContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Finds a contact frm contact list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindContactCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * space between first"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * alphabelt to first vertical line separator."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int SPACE_NUMBER \u003d 30;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Print the line separator between contacts."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Finds the contact number with the contact name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          deals with printing things to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList map each name to its own phone number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public FindContactCommand(final Ui ui,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                              final Map\u003cString, String\u003e contactList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String nameToFind \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isExist \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What is the name you want to find?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToFind \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (ui.fullCommand.split(\" \").length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 1; i \u003c ui.fullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    nameToFind \u003d nameToFind"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            .concat(ui.fullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                nameToFind \u003d nameToFind.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String keys : contactList.keySet()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (keys.contains(nameToFind)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    isExist \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toPrint.append(keys);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    int l \u003d SPACE_NUMBER - keys.length();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toPrint.append(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toPrint.append(\"| \").append(contactList.get(keys)).append(\"\\n\").append(LINEBREAK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isExist) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(nameToFind + \" is not found in the list.\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Name:                         \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"| Number:\\n\" + LINEBREAK + toPrint);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 71
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/ListContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * List all the contacts in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListContactCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Separates contacts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int SPACE_NUMBER \u003d 30;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Print the line separator between contacts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * List out all the phone numbers."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList to Map each name to its phone number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ListContactCommand(final Map\u003cString, String\u003e contactList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"Name:                         \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"| Number:\\n\" + LINEBREAK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!key.contains(\"NUS\") || !key.contains(\"CEG\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                forPrint(contactList, key);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"\\nCEG CONTACTS:\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (key.contains(\"CEG\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                forPrint(contactList, key);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"\\nNUS CONTACTS:\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (key.contains(\"NUS\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                forPrint(contactList, key);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * To print the contact list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList   Map each name to its phone number."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param key       gets the key of the contact."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private void forPrint(final Map\u003cString, String\u003e contactList,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                          final String key) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(key);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int l \u003d SPACE_NUMBER - key.length();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"| \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(contactList.get(key) + \"\\n\" + LINEBREAK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 65
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/contact/UndoContactCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.contact;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.ContactPageStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class UndoContactCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Undo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contactList to Map each name to its phone number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param oldcontacts keep deleted contacts"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage     stores"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the contactList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch error if error during access to file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static Map\u003cString, String\u003e undo(Map\u003cString, String\u003e contactList,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                           final Stack\u003cMap\u003cString, String\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                                   oldcontacts,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                           final ContactPageStorage storage)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (!oldcontacts.empty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            contactList \u003d oldcontacts.peek();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + contactList.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            storage.writeToContactFile(toStore);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            oldcontacts.pop();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 40
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/AddExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class adds the expense from the expense list and expenses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class AddExpenseCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method adds the expense from the expense list and expenses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException catches error if"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                                        add command format is wrong"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DateTimeParseException         catches error if"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                                        date format is wrong"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public AddExpenseCommand(final Ui ui,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                             final Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                             final Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws ArrayIndexOutOfBoundsException, DateTimeParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final int addCharacterCount \u003d 3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toAdd \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String item \u003d toAdd.substring(addCharacterCount)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    .split(\",\")[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String price \u003d toAdd.substring(addCharacterCount)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    .split(\",\")[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String itemAndPrice \u003d item + \", \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String date \u003d toAdd.substring(addCharacterCount)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    .split(\",\")[2].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!(price.charAt(0) \u003d\u003d \u0027$\u0027)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Please key in the \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"correct format for money: $__\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            LocalDate dateOfPurchase \u003d LocalDate.parse(date, fmt);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //Storing expenses value as an array to the date keys."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //If the item were bought on the same date as a previous item,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //add the item in the array under the same key."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e itemAndPriceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (dateOfPurchase.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    expenses.get(key).add(itemAndPrice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!isEqual) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                itemAndPriceList.add(itemAndPrice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenses.put(dateOfPurchase,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        itemAndPriceList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Successfully added: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + itemAndPrice"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \", bought on \" + dateOfPurchase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Please input in the correct format\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Wrong date format\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 85
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/DeleteExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class deletes the expense from the expense list and expenses map."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DeleteExpenseCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method deletes the expense from the expense list and expenses map."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public DeleteExpenseCommand(final Ui ui,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                final Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                        expenses, final Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        /* Prints list of expenses*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenseList.add(expenses.get(key).get(i)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" | bought on \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + key);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String nameToDelete \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.split(\" \").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"What is the index \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"of the item you want to delete?\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                     j \u003c expenseList.size(); j++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println((j + 1) + \". \" + expenseList.get(j));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                nameToDelete \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                int index \u003d Integer.parseInt(nameToDelete) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Successfully deleted: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + expenseList.get(index));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String getKeyFromList \u003d expenseList.get(index).split(\"on \")[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                DateTimeFormatter fmt"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                LocalDate getKey \u003d LocalDate.parse(getKeyFromList, fmt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String getValueFromList \u003d expenseList.get(index)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        .split(\" | \")[0].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(getKey)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                             i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            if (expenses.get(key).get(i)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    .contains(getValueFromList)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                expenses.get(key).remove(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.split(\" \").length \u003e 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 1; i \u003c ui.fullCommand.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    nameToDelete \u003d nameToDelete"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            .concat(ui.fullCommand.split(\" \")[i] + \" \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                nameToDelete \u003d nameToDelete.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                boolean isInList \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int k \u003d 0; k \u003c expenseList.size(); k++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String item \u003d expenseList.get(k).split(\", \")[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (item.equals(nameToDelete)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        isInList \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (isInList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c expenseList.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        String item \u003d expenseList.get(i).split(\", \")[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (item.equals(nameToDelete)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            String getKeyFromList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    \u003d expenseList.get(i).split(\"on \")[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            DateTimeFormatter fmt"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            LocalDate getKey"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    \u003d LocalDate.parse(getKeyFromList, fmt);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            String getValueFromList \u003d expenseList.get(i)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    .split(\" | \")[0].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                if (key.equals(getKey)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    for (int j \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                         j \u003c expenses.get(key).size(); j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                        if (expenses.get(key).get(j)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                                .contains(getValueFromList)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                            expenses.get(key).remove(j);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(\"Successfully deleted: \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + expenseList.get(i));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Item not found!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    oldExpenses.pop();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Please key in only numbers.\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Please Input in the correct format\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Index does not exist\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 137
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/ExpenseListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class prints the list of all the expenses."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpenseListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method prints the list of all the expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ExpenseListCommand(final Map\u003cLocalDate,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e\u003e expenses) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e expenseList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Here is the list of your expenses:\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenseList.add(expenses.get(key).get(i)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" | bought on \" + key);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (int j \u003d 0; j \u003c expenseList.size(); j++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println((j + 1) + \". \" + expenseList.get(j));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 34
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/FindExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This method finds expenses bought on the same date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class FindExpenseCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method finds expenses bought on the same date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui       the object that deals with printing things to the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param expenses the map that maps each expenses to its date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public FindExpenseCommand(final Ui ui,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                              final Map\u003cLocalDate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                      ArrayList\u003cString\u003e\u003e expenses) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String date \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            LocalDate dateOfPurchase;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            dateOfPurchase \u003d LocalDate.parse(date, fmt);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isExist \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (dateOfPurchase.equals(key)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \".\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + expenses.get(key).get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isExist \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!isExist) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(date + \" is not found in the list.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Please input in the correct format\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Wrong date format\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 56
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/expenses/UndoExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.expenses;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.ExpensePageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * Undo previous expenses commands (e.g. add, delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoExpenseCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Undo the previous expenses command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param expenses    the map that maps each expenses to its date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldExpenses keep the previous expenses command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage     the object that deals with storing data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return return the expenses map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Catch error if the read file fails"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e undoExpenses("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            final Stack\u003cMap\u003cLocalDate,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    ArrayList\u003cString\u003e\u003e\u003e oldExpenses,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            final ExpensePageStorage storage) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!oldExpenses.empty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            expenses \u003d oldExpenses.peek();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                + expenses.get(key).get(i)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            + expenses.get(key).get(0)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.writeToExpensesFile(toStore);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldExpenses.pop();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undone the previous command.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undone\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 56
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/help/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.help;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.help.HelpText;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS \u003d \"tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PLACES \u003d \"places\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES \u003d \"notes\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CONTACTS \u003d \"contacts\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CAP \u003d \"cap\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EXPENSES \u003d \"expenses\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SPECIALIZATION \u003d \"spec\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PASSWORD \u003d \"password\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CHANGE_PASSWORD \u003d \"change password\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER \u003d \"moduleplanner\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            IOException, NullPointerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //description of a gazeeebo.help can be empty"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        HelpText help \u003d new HelpText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert command.length !\u003d 0 : \"Bug in parser that affects HelpCommand\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            description \u003d HelpText.COMMAND_FORMAT + System.lineSeparator() + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.COMMANDS_HEADER"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.HELP_PAGE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.TASKS_PAGE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.PLACES_PAGE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.NOTES_PAGE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.MODULE_PAGE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.CONTACTS_PAGE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.CAP_PAGE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.EXPENSES_PAGE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.SPECIALIZATION_PAGE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.PASSWORD_PLANNER_PAGE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.PASSWORD_CHANGE_PAGE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.MODULE_PLANNER_PAGE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + HelpText.BYE_PAGE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TASKS: description \u003d HelpText.TASKS_PAGE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case PLACES: description \u003d HelpText.PLACES_PAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case NOTES: description \u003d HelpText.NOTES_PAGE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MODULE: description \u003d HelpText.MODULE_PAGE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case CONTACTS: description \u003d HelpText.CONTACTS_PAGE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case CAP: description \u003d HelpText.CAP_PAGE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EXPENSES: description \u003d HelpText.EXPENSES_PAGE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case SPECIALIZATION: description \u003d HelpText.SPECIALIZATION_PAGE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case PASSWORD: description \u003d HelpText.PASSWORD_PLANNER_PAGE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case CHANGE_PASSWORD: description \u003d HelpText.PASSWORD_CHANGE_PAGE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MODULE_PLANNER: description \u003d HelpText.MODULE_PLANNER_PAGE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case BYE: description \u003d HelpText.BYE_PAGE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                description \u003d \"OOPS!!! There is no such page.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 95
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/AddNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Adds a new note to a particular day, week or month."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String DAY \u003d \"day\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String MONTH \u003d \"month\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String NOTE_DAILY \u003d \"NoteDaily.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String NOTE_WEEKLY \u003d \"NoteWeekly.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String NOTE_MONTHLY \u003d \"NoteMonthly.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Decodes the user\u0027s input and handles incorrect input formats."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param command the command the user inputs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param commandName the name of the command ie. addNote, editNote, deleteNote or listNote"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the date specified by the user as a LocalDate object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException when the users input format is wrong"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected LocalDate processCommand(String[] command, String commandName) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //addNote day/week/month yyyy-MM-dd"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //\u003cthe note they want to add\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (!(command[1].equals(DAY) || command[1].equals(WEEK) || command[1].equals(MONTH))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"The second word in the command has to be \\\u0027day\\\u0027, \\\u0027week\\\u0027 or \\\u0027month\\\u0027.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException b) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a(n) \" + commandName + \" cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(MONTH)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                command[2] \u003d command[2] + \"-01\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(command[2], Note.noteFormatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(WEEK) \u0026\u0026 !date.getDayOfWeek().equals(DayOfWeek.MONDAY)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"OOPS!!! The date provided must be a Monday.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a date.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            //return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException a) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (command[1].equals(MONTH)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"The date has to been in YYYY-MM format.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"The date has to been in YYYY-MM-DD format.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a new note to the specified day, week or month if there are existing notes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Else creates a new note object with the new note as the first note."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * After that, writes to the text file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listOfNotes the list of Notes to add the new note to depending on if its a day, week or month"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userDate the date specified by the user as a LocalDate object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the new note that the user wants to add"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param date the date specified by the user as a String object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the new note added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected Note addToList(ArrayList\u003cNote\u003e listOfNotes, LocalDate userDate, String usersNote, String date,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                             String fileName) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        boolean hasNote \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteInQuestion \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listOfNotes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(userDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                n.notes.add(usersNote);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteInQuestion \u003d n;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                hasNote \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (!hasNote) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Note newNote \u003d new Note(date, usersNote);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            listOfNotes.add(newNote);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteInQuestion \u003d newNote;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteStorage.writeToFile(fileName, listOfNotes);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return noteInQuestion;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the new note had been added successfully."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the note that the user wants to add"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param size the number of notes the user has for the specified period after the new note has been added"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printConfirmationMessage(String usersNote, int size, String period) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this note to that \" + period +  \":\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" note(s) for that \" + period + \".\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], NOTE_DAILY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], NOTE_WEEKLY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], NOTE_MONTHLY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 163
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deletes a note for a particular day, week or month."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class DeleteNoteCommand extends EditNoteCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes the note specified if the note exists. Else it throws an exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param noteNumber the index of the note to delete"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToEdit the list of Notes that contains the note to delete depending on if its a day, week or month"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToEdit the start date of the period of the note to delete"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the note that was deleted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the note to delete does not exist"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String deleteNoteInList(int noteNumber, ArrayList\u003cNote\u003e listToEdit, LocalDate dateToEdit,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                String period, String fileName) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listToEdit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToEdit)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    final String deletedNote \u003d n.notes.get(noteNumber - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    n.notes.remove(noteNumber - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    if (n.notes.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        listToEdit.remove(n);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NoteStorage.writeToFile(fileName, listToEdit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    return deletedNote;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"OOPS!!! That note number does not exist.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"OOPS!!! There are no notes for this \" + period + \" to delete.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the note has been successfully deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the note that was deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printDeleteSuccess(String usersNote, String period) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve deleted this note for that \" + period +  \":\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //deleteNote day/week/month yyyy-MM-dd \u003cnote_num\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"deleteNote\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String noteToBeDeleted;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.daily, userDate, command[1], NOTE_DAILY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.weekly, userDate, command[1], NOTE_WEEKLY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteToBeDeleted \u003d deleteNoteInList(noteNum, NoteList.monthly, userDate, command[1], NOTE_MONTHLY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: noteToBeDeleted \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteToBeDeleted !\u003d null : \"there is a bug in DeleteNoteCommand\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printDeleteSuccess(noteToBeDeleted, command[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 109
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NoteStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Edits an existing note for a particular day, week or month."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class EditNoteCommand extends AddNoteCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the specified note if it exists and writes to the text file. Else throws an exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param noteNumber the index of the note that the user wants to edit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToEdit the list of Notes that contains the note to edit depending on if its a day, week or month"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToEdit the start date of the period of the note to edit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param editedNote the edited version of the note"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the note to edit does not exist"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void editNoteInList(int noteNumber, ArrayList\u003cNote\u003e listToEdit, LocalDate dateToEdit,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                                  String editedNote, String period, String fileName) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: listToEdit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToEdit)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    n.notes.set(noteNumber - 1, editedNote);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NoteStorage.writeToFile(fileName, listToEdit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    throw new DukeException(\"OOPS!!! That note number does not exist.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"OOPS!!! There are no notes for this \" + period + \" to edit from.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the user that the note has been successfully edited."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param usersNote the edited version of the note"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printEditSuccess(String usersNote, String period) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve edited this note for that \" + period +  \":\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(usersNote);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //editNote day/week/month yyyy-MM-dd \u003cnote_num \u003d index+1\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //\u003cthe note they want to edit to become\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], NOTE_DAILY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], NOTE_WEEKLY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], NOTE_MONTHLY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 105
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/note/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out the notes for a particular day, week or month."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ListNoteCommand extends AddNoteCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //listNote day/week/month yyyy-MM-dd"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the notes with indexes from a given list of notes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listOfNotes the list of notes for the specified period"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void printOutNoteList(ArrayList\u003cString\u003e listOfNotes) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert !listOfNotes.isEmpty() : \"there is an empty note section of a date (bug in DeleteNoteCommand)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfNotes.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i + 1) + \". \" + listOfNotes.get(i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Finds the list of notes for the specified period and prints them out."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param periodList the list of Notes for the specified period depending on if its a day, week or month"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateToList the date specified by the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param period is either day, week or month"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if there are no notes for the specified period"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void printNoteList(ArrayList\u003cNote\u003e periodList, LocalDate dateToList, String period) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: periodList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToList)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Here are your notes for that \" + period + \":\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printOutNoteList(n.notes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"There are no notes for that \" + period + \".\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The main method that executes all the sub methods. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"listNote\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DAY:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printNoteList(NoteList.daily, userDate, command[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case WEEK:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printNoteList(NoteList.weekly, userDate, command[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case MONTH:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                printNoteList(NoteList.monthly, userDate, command[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in ListNoteCommand\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 85
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/AddPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class AddPlacesCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method allows add a new place."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places  Map each place to a location"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldplaces Stack of previous places"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public AddPlacesCommand(final Ui ui, final Map\u003cString, String\u003e places, Stack\u003cMap\u003cString, String\u003e\u003e oldplaces) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String room;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.equals(\"1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    || ui.fullCommand.trim().equals(\"add\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    || ui.fullCommand.trim().equals(\"add-\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Input the place you want \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        + \"to add in this format: Room,Location\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String[] splitInfo \u003d ui.fullCommand.split(\",\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                room \u003d splitInfo[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                location \u003d splitInfo[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String[] parseInput \u003d ui.fullCommand.split(\"-\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String[] splitInfo \u003d parseInput[1].split(\",\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                room \u003d splitInfo[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                location \u003d splitInfo[1];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            places.put(room, location);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Successfully added :\" + room + \",\" + location);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Please input add command in the correct format\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldplaces.pop();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 46
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/DeletePlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeletePlacesCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Delete a place from the list of places."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui      the object that deals with printing things to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places  Map each place to a location"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldplaces Stack of previous places"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public DeletePlacesCommand(Ui ui, Map\u003cString, String\u003e places, Stack\u003cMap\u003cString, String\u003e\u003e oldplaces) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String placeToDelete \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.equals(\"3\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    || ui.fullCommand.trim().equals(\"delete\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    || ui.fullCommand.trim().equals(\"delete-\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Input place to delete\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                placeToDelete \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.split(\"-\")[1] !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                placeToDelete \u003d ui.fullCommand.split(\"-\")[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"Check find command input format again\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (placeToDelete !\u003d null \u0026\u0026 places.containsKey(placeToDelete)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                places.remove(placeToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Successfully deleted: \" + placeToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(placeToDelete + \" is not found in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldplaces.pop();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException | DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Please input delete command in the correct format\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldplaces.pop();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 49
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/FindPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindPlacesCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Search for a place prints places that you searched for."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each place to a location"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public FindPlacesCommand(Ui ui, Map\u003cString,String\u003e places) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String placeSearchingFor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.equals(\"2\") || ui.fullCommand.equals(\"find\") || ui.fullCommand.equals(\"find-\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Input what you want to find\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                placeSearchingFor \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.split(\"-\")[1] !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                placeSearchingFor \u003d ui.fullCommand.split(\"-\")[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"Check find command input format again\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean isFound \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String keys : places.keySet()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (keys.contains(placeSearchingFor)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(keys);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    int whiteSpaces \u003d 50 - keys.length();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    for (int i \u003d 0; i \u003c whiteSpaces; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.print(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\"| \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(places.get(keys) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (!isFound) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(placeSearchingFor + \" is not found in the list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Check find command input format again.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 56
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/ListPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListPlacesCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String LINE_BREAK \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method list out all the places."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places Map each place to a location"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ListPlacesCommand(Map\u003cString,String\u003e places) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.print(\"Room:                                             | Location:\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(key);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int whiteSpaces \u003d 50 - key.length();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c whiteSpaces; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(\"| \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.print(places.get(key) + \"\\n\" + LINE_BREAK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 29
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/places/UndoPlacesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.places;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoPlacesCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *  Undo places previous command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places map of current places"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldplaces stack of map of previous places"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return previous map before the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static Map\u003cString,String\u003e undoPlaces(Map\u003cString, String\u003e places, Stack\u003cMap\u003cString, String\u003e\u003e oldplaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                                ) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!oldplaces.empty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            places \u003d oldplaces.peek();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldplaces.pop();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return places;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 32
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleDailyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has on the specified day."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleDailyCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String EVENT \u003d \"gazeeebo.tasks.Event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String DEADLINE \u003d \"gazeeebo.tasks.Deadline\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected static final String TIMEBOUND \u003d \"gazeeebo.tasks.Timebound\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String LIST_NOTE_MESSAGE \u003d \"\\nNotes:\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleDaily \u003cyyyy-MM-dd\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleDaily command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param commandStack not used"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param deletedTask not used"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The command should be in the format \\\"scheduleDaily yyyy-MM-dd\\\".\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d LocalDate.parse(command[1], fmt);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a scheduleDaily cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate taskDate \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                taskDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                taskDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TIMEBOUND:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (userDate.equals(startDate) || userDate.equals(endDate)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        || (userDate.isAfter(startDate) \u0026\u0026 userDate.isBefore(endDate))) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: continue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (userDate.equals(taskDate)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled on this day!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + userDate.format(fmt) + \":\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i + 1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(LIST_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        printNotes(NoteList.daily, userDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    protected void printNotes(ArrayList\u003cNote\u003e periodList, LocalDate dateToList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Note n: periodList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (n.noteDate.equals(dateToList)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ListNoteCommand lnc \u003d new ListNoteCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                lnc.printOutNoteList(n.notes);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 125
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleMonthlyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has in a specified month."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleMonthlyCommand extends ScheduleDailyCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleMonthly \u003cyyyy-MM\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleMonthly command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws NullPointerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (command.length \u003e 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The command should be in the format \\\"scheduleMonthly yyyy-MM\\\".\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate startMonth;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate endMonth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            startMonth \u003d LocalDate.parse(command[1] + \"-01\", fmt);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String lengthOfMonth \u003d Integer.toString(startMonth.lengthOfMonth());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            endMonth \u003d LocalDate.parse(command[1] + \"-\" + lengthOfMonth, fmt);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM format.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"OOPS!!! The description of a scheduleMonthly cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate taskDate \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                taskDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                taskDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TIMEBOUND:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (!(endDate.isBefore(startMonth) || startDate.isAfter(endMonth))) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: continue;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (taskDate !\u003d null \u0026\u0026 startMonth.getYear() \u003d\u003d taskDate.getYear()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \u0026\u0026 startMonth.getMonthValue() \u003d\u003d taskDate.getMonthValue()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled for this month!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for \" + command[1] + \":\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i + 1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(LIST_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        printNotes(NoteList.monthly, startMonth);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 100
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/schedule/ScheduleWeeklyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.commands.schedule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Lists out all the tasks that the user has in a specified week."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ScheduleWeeklyCommand extends ScheduleDailyCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //format for the command: scheduleWeekly \u003cyyyy-MM-dd(Mon) yyyy-MM-dd(Sun)\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final int ONE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This is the main body of the ScheduleWeekly command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param list the tasks list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param storage the object that deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws NullPointerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate mon;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate sun;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] date \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (date.length \u003e 3) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The command should be in the format \\\"scheduleWeekly yyyy-MM-dd yyyy-MM-dd\\\".\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                mon \u003d LocalDate.parse(date[1], fmt);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"OOPS!!! The description of a scheduleWeekly cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                sun \u003d LocalDate.parse(date[2], fmt);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException a) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"OOPS!!! Please specify an end date.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            long numOfDays \u003d DAYS.between(mon, sun) + 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (mon.getDayOfWeek() !\u003d DayOfWeek.MONDAY) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The first date has to be a Monday.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (sun.getDayOfWeek() !\u003d DayOfWeek.SUNDAY) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The second date has to be a Sunday.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (mon.isAfter(sun)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The second date has to be later than the first date.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } else if (numOfDays !\u003d ONE_WEEK) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"The duration you have specified is longer than 1 week.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(numOfDays);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                assert numOfDays \u003e 7 : \"numOfDays should be more than 7\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please input the date in yyyy-MM-dd format.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Task t: list) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            LocalDate taskDate \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (t.getClass().getName()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                taskDate \u003d ((Event) t).date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                taskDate \u003d ((Deadline) t).by.toLocalDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case TIMEBOUND:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate startDate \u003d ((Timebound) t).dateStart;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                LocalDate endDate \u003d ((Timebound) t).dateEnd;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (endDate.equals(mon) || (startDate.isBefore(mon) \u0026\u0026 endDate.isAfter(mon))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        || startDate.equals(mon) || (startDate.isAfter(mon) \u0026\u0026 startDate.isBefore(sun))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        || startDate.equals(sun)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    schedule.add(t);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (taskDate !\u003d null \u0026\u0026 (taskDate.equals(mon) || (taskDate.isAfter(mon)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    \u0026\u0026 taskDate.isBefore(sun)) || taskDate.equals(sun))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                schedule.add(t);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (schedule.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"You have nothing scheduled for this week!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Here is your schedule for the week:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (int i \u003d 0; i \u003c schedule.size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println((i + 1) + \".\" + schedule.get(i).listFormat());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(LIST_NOTE_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        printNotes(NoteList.weekly, mon);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyuu": 134
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/CompletedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.CompletedElectivesStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows users to mark a technical elective as completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CompletedCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Communications and Networking on the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int COMMS_AND_NETWORKING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Embedded Computing on the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int EMBEDDED_COMPUTING_INDEX \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Intelligent Systems on the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INTELLIGENT_SYSTEMS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Interactive Digital Media on the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INTERACTIVE_DIGITAL_MEDIA_INDEX \u003d 4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Large-Scale Computing on the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int LARGE_SCALE_COMPUTING_INDEX \u003d 5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of System On A Chip Design on the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int SYS_ON_A_CHIP_DESIGN_INDEX \u003d 6;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Allows user to record the technical electives they have completed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param specMap       the map that map list of respective specializations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param completedEMap the map that maps the completed electives to"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      their respective specializations"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch any error if read file fails"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public CompletedCommand(final Ui ui,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            final Map\u003cString, ArrayList\u003cModuleCategory\u003e\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    specMap,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            final Map\u003cString, ArrayList\u003cString\u003e\u003e completedEMap)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        CompletedElectivesStorage completedElectivesStorage \u003d new CompletedElectivesStorage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e completedElectiveList \u003d new ArrayList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Which specialization number \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"is your module under?\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e specList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Communications \u0026 Networking\"); //index 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Embedded Computing\"); //index 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Intelligent Systems\"); //index 2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Interactive Digital Media\"); //index 3"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Large-Scale Computing\"); //index 4"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"System-On-A-Chip Design\"); //index 5"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (int i \u003d 0; i \u003c specList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(i + 1 + \". \" + specList.get(i));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int specNumber \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specNumber \u003c 0 || specNumber \u003d\u003d 0"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    || specNumber \u003e specList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Specialization index does not exist.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String checkKey \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specNumber \u003d\u003d COMMS_AND_NETWORKING_INDEX) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(COMMS_AND_NETWORKING_INDEX - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d EMBEDDED_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(EMBEDDED_COMPUTING_INDEX - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d INTELLIGENT_SYSTEMS_INDEX) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(INTELLIGENT_SYSTEMS_INDEX - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d INTERACTIVE_DIGITAL_MEDIA_INDEX) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(INTERACTIVE_DIGITAL_MEDIA_INDEX - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d LARGE_SCALE_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(LARGE_SCALE_COMPUTING_INDEX - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specNumber \u003d\u003d SYS_ON_A_CHIP_DESIGN_INDEX) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                checkKey \u003d specList.get(SYS_ON_A_CHIP_DESIGN_INDEX - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Which module have you completed?\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c specMap.get(checkKey).size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + specMap.get(checkKey).get(i).code);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int moduleCodeIndex \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String moduleCode"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \u003d specMap.get(checkKey).get(moduleCodeIndex - 1).code;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (checkKey.equals(key)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    completedEMap.get(key).add(moduleCode);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!isEqual) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedElectiveList.add(moduleCode);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedEMap.put(checkKey, completedElectiveList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"You have completed \" + moduleCode + \".\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreCN \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreEC \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIS \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreID \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreLS \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreSC \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (key.equals(\"Communications \u0026 Networking\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Communications \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"\u0026 Networking\").size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreCN \u003d toStoreCN.concat(\"Communications \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"\u0026 Networking\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Communications \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"\u0026 Networking\").get(i));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Embedded Computing\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Embedded\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").size(); i++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreEC \u003d toStoreEC.concat(\"Embedded Computing\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Embedded\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\").get(i));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Intelligent\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Systems\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Systems\").size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"Intelligent\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Systems\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Systems\").get(i));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Interactive\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Digital Media\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Interactive\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Digital Media\").size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"Interactive\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Digital Media\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Interactive\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Digital Media\").get(i));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Large-Scale\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"Large-Scale\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\").get(i));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Design\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c completedEMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Design\").size(); i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStoreIS \u003d toStoreIS.concat(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Design\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"|\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + completedEMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Design\").get(i));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String allCompletedE \u003d toStoreCN"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"\\n\" + toStoreEC + \"\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreIS + \"\\n\" + toStoreID + \"\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + toStoreLS + \"\\n\" + toStoreSC;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedElectivesStorage.writeToCompletedElectivesFile(allCompletedE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Please key in numbers only.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Technical Elective index does not exist.\\n\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 197
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/ListOfSpecializationAndModules.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Pushes all specializations and technical electives to specMap."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ListOfSpecializationAndModules {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Communications and Networking on the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int COMMS_AND_NETWORKING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Embedded Computing on the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int EMBEDDED_COMPUTING_INDEX \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Intelligent Systems on the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INTELLIGENT_SYSTEMS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Interactive Digital Media on the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INTERACTIVE_DIGITAL_MEDIA_INDEX \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Large-Scale Computing on the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int LARGE_SCALE_COMPUTING_INDEX \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of System On A Chip Design on the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int SYS_ON_A_CHIP_DESIGN_INDEX \u003d 6;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Stores all the technical electives and specializations."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * in this case storing data in the expenses map"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param specMap the map that map list of technical electives to their"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                respective specializations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ListOfSpecializationAndModules(final Map\u003cString,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cModuleCategory\u003e\u003e specMap) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e specList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Communications \u0026 Networking\"); //index 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Embedded Computing\"); //index 1"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Intelligent Systems\"); //index 2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Interactive Digital Media\"); //index 3"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"Large-Scale Computing\"); //index 4"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specList.add(\"System-On-A-Chip Design\"); //index 5"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs2107 \u003d \"CS2107 Introduction to Information System\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3103 \u003d \"CS3103 Computer Networks Practice\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee3131C \u003d \"EE3131C Communication Systems\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4222 \u003d \"CS4222 Wireless Networking\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4226 \u003d \"CS4226 Internet Architecture\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4210 \u003d \"EE4210 Network Protocols and Applications\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs5223 \u003d \"CS5223 Distributed Systems\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs5321 \u003d \"CS5321 Network Security\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee5135 \u003d \"EE5135 Digital Communications\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cg3207 \u003d \"CG3207 Computing Architecture\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3211 \u003d \"CS3211 Parallel and Concurrent Programming\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee3731C \u003d \"EE3731C Signal Processing Methods\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4223 \u003d \"CS4223 Multi-core Architectures\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4218 \u003d \"EE4218 Embedded Hardware System Design\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4415 \u003d \"EE4218 Embedded Hardware System Design\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs5272 \u003d \"CS5272 Embedded Software Design\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee5903 \u003d \"EE5903 Real-time Systems\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3243 \u003d \"CS3243 Introduction to Artificial Intelligence\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3244 \u003d \"CS3244 Machine Learning\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee3331C \u003d \"EE3331C Feedback Control Systems\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4244 \u003d \"CS4244 Knowledge-based Systems\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4246 \u003d \"CS4246 AI Planning and Decision Making\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4248 \u003d \"CS4248 Natural Language Processing\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4305 \u003d \"EE4305 Fuzzy/Neural Systems for Intelligent Robotics\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4308 \u003d \"EE4308 Autonomous Robot Systems\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs5242 \u003d \"CS5242 Neural Networks \u0026 Deep Learning\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs5339 \u003d \"CS5339 Theory and Algorithms for Machine Learning\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee5904 \u003d \"EE5904 Neural Networks\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee5907 \u003d \"EE5907 Pattern Recognition\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs2108 \u003d \"CS2108 Introduction to Media Computing\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3240 \u003d \"CS3240 Interaction Design\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3241 \u003d \"CS3241 Computer Graphics\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3242 \u003d \"CS3242 3D Modeling and Animation\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3247 \u003d \"CS3247 Game Development\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4240 \u003d \"CS4240 Interaction Design \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"for Virtual and Augmented Reality\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4243 \u003d \"CS4243 Computer Vision and Pattern Recognition\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4247 \u003d \"CS4247 Graphics Rendering Techniques\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4249 \u003d \"CS4249 Phenomena and Theories of\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \" Human-Computer Interaction\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4347 \u003d \"CS4347 Sound and Music Computing\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4351 \u003d \"CS4351 Real-Time Graphics\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4212 \u003d \"EE4212 Computer Vision\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4604 \u003d \"EE4604 Biological Perception in Digital Media\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4704 \u003d \"EE4704 Introduction to \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Computer Vision and Image Processing\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs2101 \u003d \"CS2101 Database Systems\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3210 \u003d \"CS3210 Parallel Computing\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3230 \u003d \"CS3230 Design \u0026 Analysis of Algorithms\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3235 \u003d \"CS3235 Computer Security\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs3223 \u003d \"CS3223 Database Systems Implementation\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4211 \u003d \"CS4211 Formal Methods for Software Engineering\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4221 \u003d \"CS4221 Database Applications Design and Tuning\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4224 \u003d \"CS4224 Distributed Databases\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String cs4231 \u003d \"CS4231 Parallel \u0026 \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Distributed Algorithms\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee3104C \u003d \"EE3104C Introduction to RF \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"and Microwave Systems \u0026 Circuit\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee3408C \u003d \"EE3408C Integrated Analog Design\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4104 \u003d \"EE4101 Microwave Circuits \u0026 Devices\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4112 \u003d \"EE4112 Radio Frequency Design and Systems\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee4505 \u003d \"EE4505 Power Semiconductor Devices \u0026 ICs\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final String ee5518 \u003d \"EE5518 VLSI Digital Circuit Design\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn1 \u003d new ModuleCategory(cs2107);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn2 \u003d new ModuleCategory(cs3103);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn3 \u003d new ModuleCategory(ee3131C);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn4 \u003d new ModuleCategory(cs4222);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn4.isDepth \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn5 \u003d new ModuleCategory(cs4226);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn5.isDepth \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn6 \u003d new ModuleCategory(ee4210);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn6.isDepth \u003d true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn7 \u003d new ModuleCategory(cs5223);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn7.isDepth \u003d true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn8 \u003d new ModuleCategory(cs5321);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn8.isDepth \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory cn9 \u003d new ModuleCategory(ee5135);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        cn9.isDepth \u003d true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e commsAndNetworkingBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn3);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn4);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn5);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn6);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn7);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn8);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        commsAndNetworkingBD.add(cn9);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(COMMS_AND_NETWORKING_INDEX - 1),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                commsAndNetworkingBD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb1 \u003d new ModuleCategory(cg3207);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb2 \u003d new ModuleCategory(cs2107);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb3 \u003d new ModuleCategory(cs3211);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb4 \u003d new ModuleCategory(ee3731C);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb4.isBreadth \u003d true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb5 \u003d new ModuleCategory(cs4222);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb5.isDepth \u003d true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb6 \u003d new ModuleCategory(cs4223);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb6.isDepth \u003d true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb7 \u003d new ModuleCategory(ee4218);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb7.isDepth \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb8 \u003d new ModuleCategory(ee4415);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb8.isDepth \u003d true;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb9 \u003d new ModuleCategory(cs5272);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb9.isDepth \u003d true;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory emb10 \u003d new ModuleCategory(ee5903);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        emb10.isDepth \u003d true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e embComputingBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb3);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb4);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb5);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb6);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb7);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb8);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb9);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        embComputingBD.add(emb10);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(EMBEDDED_COMPUTING_INDEX - 1), embComputingBD);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is1 \u003d new ModuleCategory(cs3243);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is2 \u003d new ModuleCategory(cs3244);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is3 \u003d new ModuleCategory(ee3331C);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is4 \u003d new ModuleCategory(cs4244);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is4.isDepth \u003d true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is5 \u003d new ModuleCategory(cs4246);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is5.isDepth \u003d true;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is6 \u003d new ModuleCategory(cs4248);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is6.isDepth \u003d true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is7 \u003d new ModuleCategory(ee4305);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is7.isDepth \u003d true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is8 \u003d new ModuleCategory(ee4308);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is8.isDepth \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is9 \u003d new ModuleCategory(cs5242);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is9.isDepth \u003d true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is10 \u003d new ModuleCategory(cs5339);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is10.isDepth \u003d true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is11 \u003d new ModuleCategory(ee5904);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is11.isDepth \u003d true;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory is12 \u003d new ModuleCategory(ee5907);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        is12.isDepth \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e intSystemsBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is2);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is3);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is4);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is5);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is6);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is7);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is8);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is9);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is10);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is11);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intSystemsBD.add(is12);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(INTELLIGENT_SYSTEMS_INDEX - 1), intSystemsBD);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm1 \u003d new ModuleCategory(cs2108);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm2 \u003d new ModuleCategory(cs3240);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm3 \u003d new ModuleCategory(cs3241);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm4 \u003d new ModuleCategory(cs3242);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm4.isBreadth \u003d true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm5 \u003d new ModuleCategory(cs3247);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm5.isBreadth \u003d true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm6 \u003d new ModuleCategory(ee3731C);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm6.isBreadth \u003d true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm7 \u003d new ModuleCategory(cs4240);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm7.isDepth \u003d true;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm8 \u003d new ModuleCategory(cs4243);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm8.isDepth \u003d true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm9 \u003d new ModuleCategory(cs4247);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm9.isDepth \u003d true;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm10 \u003d new ModuleCategory(cs4249);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm10.isDepth \u003d true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm11 \u003d new ModuleCategory(cs4347);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm11.isDepth \u003d true;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm12 \u003d new ModuleCategory(cs4351);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm12.isDepth \u003d true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm13 \u003d new ModuleCategory(ee4212);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm13.isDepth \u003d true;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm14 \u003d new ModuleCategory(ee4604);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm14.isDepth \u003d true;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory idm15 \u003d new ModuleCategory(ee4704);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        idm15.isDepth \u003d true;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e intDigMediaBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm1);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm2);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm3);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm4);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm5);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm6);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm7);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm8);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm9);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm10);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm11);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm12);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm13);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm14);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        intDigMediaBD.add(idm15);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(INTERACTIVE_DIGITAL_MEDIA_INDEX - 1),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                intDigMediaBD);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls1 \u003d new ModuleCategory(cs2101);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls2 \u003d new ModuleCategory(cs3210);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls3 \u003d new ModuleCategory(cs3211);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls4 \u003d new ModuleCategory(cs3230);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls4.isBreadth \u003d true;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls5 \u003d new ModuleCategory(cs3235);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls5.isBreadth \u003d true;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls6 \u003d new ModuleCategory(cs3223);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls6.isDepth \u003d true;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls7 \u003d new ModuleCategory(cs4211);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls7.isDepth \u003d true;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls8 \u003d new ModuleCategory(cs4221);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls8.isDepth \u003d true;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls9 \u003d new ModuleCategory(cs4223);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls9.isDepth \u003d true;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls10 \u003d new ModuleCategory(cs4224);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls10.isDepth \u003d true;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls11 \u003d new ModuleCategory(cs4231);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls11.isDepth \u003d true;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls12 \u003d new ModuleCategory(ee4210);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls12.isDepth \u003d true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory ls13 \u003d new ModuleCategory(ee4218);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ls13.isDepth \u003d true;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e largeScaleComputingBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls1);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls2);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls3);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls4);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls5);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls6);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls7);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls8);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls9);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls10);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls11);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls12);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        largeScaleComputingBD.add(ls13);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(LARGE_SCALE_COMPUTING_INDEX - 1),"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                largeScaleComputingBD);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s1 \u003d new ModuleCategory(cg3207);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s1.isBreadth \u003d true;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s2 \u003d new ModuleCategory(ee3104C);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s2.isBreadth \u003d true;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s3 \u003d new ModuleCategory(ee3408C);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s3.isBreadth \u003d true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s4 \u003d new ModuleCategory(cs4223);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s4.isDepth \u003d true;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s5 \u003d new ModuleCategory(ee4104);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s5.isDepth \u003d true;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s6 \u003d new ModuleCategory(ee4112);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s6.isDepth \u003d true;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s7 \u003d new ModuleCategory(ee4218);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s7.isDepth \u003d true;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s8 \u003d new ModuleCategory(ee4415);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s8.isDepth \u003d true;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s9 \u003d new ModuleCategory(ee4505);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s9.isDepth \u003d true;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ModuleCategory s10 \u003d new ModuleCategory(ee5518);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        s10.isDepth \u003d true;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cModuleCategory\u003e sysDesignBD \u003d new ArrayList();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s1);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s2);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s3);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s4);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s5);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s6);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s7);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s8);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s9);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        sysDesignBD.add(s10);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        specMap.put(specList.get(SYS_ON_A_CHIP_DESIGN_INDEX - 1), sysDesignBD);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 428
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/ListSpecializationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.SpecializationPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Calls out the list of specializations and technical electives."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ListSpecializationCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Communications and Networking on the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int COMMS_AND_NETWORKING_INDEX \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Embedded Computing on the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int EMBEDDED_COMPUTING_INDEX \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Intelligent Systems on the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INTELLIGENT_SYSTEMS_INDEX \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Interactive Digital Media on the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INTERACTIVE_DIGITAL_MEDIA_INDEX \u003d 4;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of Large-Scale Computing on the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int LARGE_SCALE_COMPUTING_INDEX \u003d 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of System On A Chip Design on the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int SYS_ON_A_CHIP_DESIGN_INDEX \u003d 6;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Number of modular credits per technical elective."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int MODULAR_CREDITS \u003d 4;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Allows the user to show list of technical electives completed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * and number of MCs completed for each specialization."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      with printing things to the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param specMap       the map that map list of"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      technical electives to their"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      respective specializations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param completedEMap the map that maps the completed electives to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      their respective specializations"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException   catch any error if read file fails"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ListSpecializationCommand(final Ui ui,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                     final Map\u003cString,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                             ArrayList\u003cModuleCategory\u003e\u003e specMap,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                     final Map\u003cString, ArrayList\u003cString\u003e\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                             completedEMap)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            new ListOfSpecializationAndModules(specMap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e specList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Communications \u0026 Networking\"); //index 0"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Embedded Computing\"); //index 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Intelligent Systems\"); //index 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Interactive Digital Media\"); //index 3"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"Large-Scale Computing\"); //index 4"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specList.add(\"System-On-A-Chip Design\"); //index 5"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Choose a specialization:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c specList.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \". \" + specList.get(i));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Input in this format: SPECIALIZATION_NUMBER\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String specNumber \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int specChosen \u003d Integer.parseInt(specNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"You have chosen \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + specList.get(specChosen - 1)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \".\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (specChosen \u003d\u003d COMMS_AND_NETWORKING_INDEX) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Communications \u0026 \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Networking\").size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Networking\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \". \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Communications \u0026 \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Networking\").get(i).code);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Networking\").size(); j++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Networking\").get(j).isDepth) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Communications \u0026\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Networking\").get(j).code);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c completedEMap.get(specList.get(specChosen - 1)).size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + completedEMap.get(specList.get(specChosen - 1)).get(i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(completedEMap.get(specList.get(specChosen - 1)).size()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                * MODULAR_CREDITS + \"/20\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d EMBEDDED_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\").size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \". \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\").get(i).code);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\").size(); j++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").get(j).isDepth) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \". \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\").get(j).code);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c completedEMap.get(specList.get(specChosen - 1)).size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + completedEMap.get(specList.get(specChosen - 1)).get(i));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(completedEMap.get(specList.get(specChosen - 1)).size()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                * MODULAR_CREDITS + \"/20\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d INTELLIGENT_SYSTEMS_INDEX) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Systems\").size(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Systems\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Systems\").get(i).code);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Systems\").size(); j++) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Systems\").get(j).isDepth) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Systems\").get(j).code);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c completedEMap.get(specList.get(specChosen - 1)).size(); i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + completedEMap.get(specList.get(specChosen - 1)).get(i));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(completedEMap.get(specList.get(specChosen - 1)).size()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                * MODULAR_CREDITS + \"/20\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d INTERACTIVE_DIGITAL_MEDIA_INDEX) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Digital Media\").size(); i++) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Digital Media\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Digital Media\").get(i).code);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Digital Media\").size(); j++) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Digital Media\").get(j).isDepth) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Digital Media\").get(j).code);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c completedEMap.get(specList.get(specChosen - 1)).size(); i++) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + completedEMap.get(specList.get(specChosen - 1)).get(i));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(completedEMap.get(specList.get(specChosen - 1)).size()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                * MODULAR_CREDITS + \"/20\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d LARGE_SCALE_COMPUTING_INDEX) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\").size(); i++) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\").get(i).code);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\").size(); j++) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").get(j).isDepth) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \" Computing\").get(j).code);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c completedEMap.get(specList.get(specChosen - 1)).size(); i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + completedEMap.get(specList.get(specChosen - 1)).get(i));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(completedEMap.get(specList.get(specChosen - 1)).size()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                * MODULAR_CREDITS + \"/20\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (specChosen \u003d\u003d SYS_ON_A_CHIP_DESIGN_INDEX) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Breadth:\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c specMap.get(\"System-On-A-\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Chip Design\").size(); i++) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"System-On-A-\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Chip Design\").get(i).isBreadth) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((i + 1) + \". \""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"System-On-A-\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Chip Design\").get(i).code);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Depth:\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int j \u003d 0; j \u003c specMap.get(\"System-On-A-\""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"Chip Design\").size(); j++) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (specMap.get(\"System-On-A-\""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \"Chip Design\").get(j).isDepth) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println((j + 1) + \". \""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + specMap.get(\"System-On-A-\""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"Chip Design\").get(j).code);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"You have completed:\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c completedEMap.get(specList.get(specChosen - 1)).size(); i++) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            System.out.println(i + 1 + \". \""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + completedEMap.get(specList.get(specChosen - 1)).get(i));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"MCs completed:\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (String key : completedEMap.keySet()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (key.equals(specList.get(specChosen - 1))) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(completedEMap.get(specList.get(specChosen - 1)).size()"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                * MODULAR_CREDITS + \"/20\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreCommsB \u003d \"\";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreCommsD \u003d \"\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreEmbB \u003d \"\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreEmbD \u003d \"\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIsB \u003d \"\";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIsD \u003d \"\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIdmB \u003d \"\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreIdmD \u003d \"\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStorelsB \u003d \"\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStorelsD \u003d \"\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreSysChipB \u003d \"\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String toStoreSysChipD \u003d \"\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (String key : specMap.keySet()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (key.equals(\"Communications\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" \u0026 Networking\")) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Communications\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" \u0026 Networking\").size(); i++) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreCommsB \u003d toStoreCommsB.concat(\"commsB|\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + specMap.get(key).get(i).code + \"|b:\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + specMap.get(key).get(i).isBreadth + \"|d:\""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + specMap.get(key).get(i).isDepth + \" \");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreCommsD \u003d toStoreCommsD.concat(\"commsD|\""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Embedded\""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\")) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Embedded\""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").size(); i++) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreEmbB \u003d toStoreEmbB.concat(\"embB|\" + key"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreEmbD \u003d toStoreEmbD.concat(\"embD|\" + key"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Intelligent Systems\")) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Intelligent\""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Systems\").size(); i++) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIsB \u003d toStoreIsB.concat(\"isB|\" + key"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIsD \u003d toStoreIsD.concat(\"isD|\" + key"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Interactive Digital Media\")) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Interactive\""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Digital Media\").size(); i++) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIdmB \u003d toStoreIdmB.concat(\"idmB|\" + key"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreIdmD \u003d toStoreIdmD.concat(\"idmD|\" + key"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"Large-Scale\""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Computing\")) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"Large-Scale\""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Computing\").size(); i++) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStorelsB \u003d toStorelsB.concat(\"lsB|\" + key"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStorelsD \u003d toStorelsD.concat(\"lsD|\" + key"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (key.equals(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \" Design\")) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c specMap.get(\"System-On-A-Chip\""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" Design\").size(); i++) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (specMap.get(key).get(i).isBreadth) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreSysChipB \u003d toStoreSysChipB.concat(\"sysChipB|\""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStoreSysChipD \u003d toStoreSysChipD.concat(\"sysChipD|\""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + key + \"|\" + specMap.get(key).get(i).code"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|b:\" + specMap.get(key).get(i).isBreadth"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"|d:\" + specMap.get(key).get(i).isDepth"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \" \");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String totalStoringOfSpec \u003d toStoreCommsB + \"\\n\" + toStoreCommsD"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + toStoreEmbB + \"\\n\" + toStoreEmbD + \"\\n\""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + toStoreIsB + \"\\n\" + toStoreIsD + \"\\n\""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + toStoreIdmB + \"\\n\" + toStoreIdmD + toStorelsB"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + toStorelsD + \"\\n\" + toStoreSysChipB"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"\\n\" + toStoreSysChipD;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            SpecializationPageStorage specPageStorage \u003d new SpecializationPageStorage();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specPageStorage.writeToSpecializationFile(totalStoringOfSpec);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Please key in numbers only.\\n\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.print(\"Specialization index does not exist.\\n\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 496
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/specialization/ModuleCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.specialization;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Parts of a technical elective."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ModuleCategory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Module code for a technical elective."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public String code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * If breadth is true, the technical elective is a breadth elective."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isBreadth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * If depth is true, the technical elective is a depth elective."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isDepth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Initializing the 3 segments of a technical elective."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param code module code"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public ModuleCategory(final String code) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.isBreadth \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.isDepth \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 34
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class AddModuleCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /** This method allows user to add module code into study plan,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * store changes in data structure and external txt files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param studyPlan The object contain all needed modules"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                 data structure and a showplan method to display plan table"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with access,modify and save files"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui The object that deals with interaction between users and the system."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if the user input is in wrong format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(StudyPlannerCommand studyPlan,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        StudyAssistPageStorage storage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        Ui ui,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan) throws IOException,DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.split(\" \").length !\u003d 4) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Please follow the correct input format~\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String moduleCode \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Module code could not be null\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (studyPlan.MCMap.get(moduleCode) \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"We currently do not support this module.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (semester \u003e\u003d 8 || semester \u003c 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            boolean flag \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0;i \u003c studyPlan.StudyPlan.size() \u0026\u0026 !flag;i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (studyPlan.StudyPlan.get(i).contains(moduleCode)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (flag) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"This module is \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \"already inside the study plan\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            studyPlan.StudyPlan.get(semester).add(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c studyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d studyPlan.StudyPlan.get(i)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .stream().map(Object::toString)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.writeToStudyPlanFile(toStore);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"This module \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + moduleCode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \" has been successfully added to Sem\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + (semester + 1) + \".\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldStudyPlan.pop();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please input correct Semester number\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            oldStudyPlan.pop();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 65,
      "e0309463": 6,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/CheckPrerequisiteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class CheckPrerequisiteCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows user to check module\u0027s prerequisite modules,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * display them in a tree structure from left to right."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui The object that deals with interaction between users and the system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with modify,access and save external files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if the user input is in wrong format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(Ui ui, StudyAssistPageStorage storage) throws IOException,DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e prerequisiteList \u003d new HashMap\u003cString,ArrayList\u003cString\u003e\u003e("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.readFromPrerequisiteFile());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.split(\" \").length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Please follow the correct input format~\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (prerequisiteList.get(ui.fullCommand.split(\" \")[1]) \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"We currently do not support this module\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (!prerequisiteList.get(ui.fullCommand.split(\" \")[1]).isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder buffer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String prefix \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String childrenPrefix \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                dfsPrerequisite(ui.fullCommand.split(\" \")[1],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        prefix, childrenPrefix, buffer, prerequisiteList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(buffer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"This module \" + ui.fullCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \" does not have any pre-requisite~\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows a Depth-First-Search on the prerequisite data structure,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * finding all prerequisite module and add their"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * name string to string builder for later printing purpose."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param moduleCode the module that we are going to search for its prerequisite"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param prefix parameter for string builder"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param childrenPrefix parameter for string builder"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param buffer parameter for string builder"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param prerequisiteList Data structure that stores all prerequisite information."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private void dfsPrerequisite(String moduleCode,String prefix,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                                 String childrenPrefix, StringBuilder buffer, HashMap\u003cString,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e\u003e prerequisiteList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        buffer.append(prefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        buffer.append(moduleCode);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        buffer.append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (prerequisiteList.get(moduleCode) !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (Iterator\u003cString\u003e it \u003d prerequisiteList.get(moduleCode).iterator(); it.hasNext(); ) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String next \u003d it.next();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (it.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    prefix \u003d childrenPrefix + \"├── \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    childrenPrefix +\u003d childrenPrefix + \"│   \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    dfsPrerequisite(next,prefix, childrenPrefix, buffer, prerequisiteList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    prefix \u003d childrenPrefix + \"└── \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    childrenPrefix +\u003d \"    \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    dfsPrerequisite(next, prefix, childrenPrefix, buffer, prerequisiteList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 80,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class DeleteModuleCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows users to delete certain module out of the module plan,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * store changes in data structure and also external txt files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param studyPlan The object that holds data structure of module plan."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with access, modify and save files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui The object that deals with interaction with users and the system."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if user input is in wrong format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(StudyPlannerCommand studyPlan,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        StudyAssistPageStorage storage,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        Ui ui,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan) throws IOException,DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.split(\" \").length !\u003d 4) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Please follow the correct input format~\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String moduleCode \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Module code could not be null\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (studyPlan.MCMap.get(moduleCode) \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"We currently do not have this module.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (semester \u003e\u003d 8 || semester \u003c 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            boolean flag \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int semesterNumber \u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0;i \u003c studyPlan.StudyPlan.size() \u0026\u0026 !flag;i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (studyPlan.StudyPlan.get(i).contains(moduleCode)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    semesterNumber \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"This module is not inside the study plan\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (semesterNumber !\u003d semester) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"This module is not in Sem \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + (semester + 1) + \" but inside Sem \" + (semesterNumber + 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            studyPlan.StudyPlan"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    .get(semester)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    .remove(studyPlan.StudyPlan.get(semester).indexOf(moduleCode));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c studyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d studyPlan.StudyPlan"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .get(i).stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .map(Object::toString)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.writeToStudyPlanFile(toStore);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"This module \" + moduleCode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \" has been successfully deleted from Sem\" + (semester + 1) + \".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            oldStudyPlan.pop();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please input correct Semester number\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            oldStudyPlan.pop();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 70,
      "JasonLeeWeiHern": 6,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/ShiftModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class ShiftModuleCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows users to shift certain module from current semester to another"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * semesters, store changes in data structure and external txt files."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param studyPlan the object that holds data structure of module plan."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage the object that deals with access,modify and save files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui the object htat deals with interactions between users and the system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if user input is wrong firmat"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(StudyPlannerCommand studyPlan,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        StudyAssistPageStorage storage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Ui ui) throws IOException,DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.split(\" \").length !\u003d 4) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Please follow the correct input format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String moduleCode \u003d ui.fullCommand.split(\" \")[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Module code could not be null\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (studyPlan.MCMap.get(moduleCode) \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"We currently do not support this module.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (semester \u003e\u003d 8 || semester \u003c 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            boolean flag \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int semesterNumber \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0;i \u003c studyPlan.StudyPlan.size() \u0026\u0026 !flag;i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (studyPlan.StudyPlan.get(i).contains(moduleCode)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    semesterNumber \u003d i;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"This module is not inside the study plan\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (semesterNumber \u003d\u003d semester) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"This module is already inside Sem \" + (semester + 1) + \".\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag2 \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c studyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (studyPlan.StudyPlan.get(i).contains(moduleCode)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        flag2 \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        studyPlan.StudyPlan.get(i).remove(studyPlan.StudyPlan.get(i).indexOf(moduleCode));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (!flag2) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"This module is not inside the study plan\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            studyPlan.StudyPlan.get(semester).add(moduleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c studyPlan.StudyPlan.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d studyPlan.StudyPlan"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .get(i)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .map(Object::toString)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.writeToStudyPlanFile(toStore);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"This module \" + moduleCode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \" has been successfully shifted to Sem\" + (semester + 1) + \".\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (IOException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Please input correct Semester number\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 84,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/StudyPlannerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class StudyPlannerCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cString\u003e\u003e StudyPlan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString,Integer\u003e MCMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString,String\u003e CoreModules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString,ArrayList\u003cString\u003e\u003e TEs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * this method creates data structure for study plan,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * as well as creating data structure for information of modules."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage this object deals with access,modify and save external"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                files."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException when the user input is wrong"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public StudyPlannerCommand(StudyAssistPageStorage storage) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.StudyPlan \u003d storage.readFromStudyPlanFile();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (StudyPlan.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StudyPlan \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.MCMap \u003d (Map\u003cString, Integer\u003e) Stream.of(new Object[][] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2271\",4}, {\"CG1111\",6}, {\"CS1010E\",4},{\"MA1511\",2},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"MA1512\",2},{\"CS1231\",4},{\"ES1103\",4},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"EE2026\",4},{\"CG1112\",6},{\"MA1508E\",4},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2040C\",4},{\"GEQ1000\",4},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2101\",4},{\"CS2113T\",4},{\"GER1000\",4},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2023\",4},{\"ST2334\",4},{\"CG2027\",2},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2028\",2},{\"GEH1036\",4},"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CP3880\",12}, {\"EG2401\",3},{\"EG2401A\",2},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG4002\",8},{\"EE4204\",4}, {\"GET1013\",4}, {\"CG3207\",4},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }).collect(Collectors.toMap(data -\u003e (String)data[0],data -\u003e (Integer)data[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.CoreModules \u003d (Map\u003cString, String\u003e) Stream.of(new String[][] {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2271\",\"Real-time Operating Systems\"},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG1111\",\"Engineering Principles and Practice I\"},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS1010\",\"Programming Methodology\"},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"MA1511\",\"Engineering Calculus\"},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"MA1512\",\"Differential Equations for Engineering\"},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS1231\",\"Discrete Structures\"},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"EE2026\",\"Digital Design\"},"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG1112\",\"Engineering Principles and Practice II\"},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"MA1508E\",\"Linear Algebra for Engineering\"},"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2040C\",\"Data Structures and Algorithms\"},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2101\",\"Effective Communication for Computing Professionals\"},"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS2113T\",\"Software Engineering \u0026 Object-Oriented Programming\"},"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2023\",\"Signals \u0026 Systems\"},"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"ST2334\",\"Probability \u0026 Statistics\"},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2027\",\"Transistor-level Digital Circuits\"},"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG2028\",\"Computer Organization\"},"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CP3880\",\"Advanced Technology Attachment Programme\"},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"EG2401A\",\"Engineering Professionalism\"},"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG4002\",\" Computer Engineering Capstone Project\"},"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"EE4204\",\"Computer Networks\"},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CG3207\",\"Computer Architecture\"},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"CS3230\",\"Design and Analysis of Algorithms\"},"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                {\"EG3611A\",\"Industrial Attachment\"}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }).collect(Collectors.toMap(data -\u003e (String)data[0],data -\u003e (String)data[1]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.TEs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Communications \u0026 Networking\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"CS2107\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS3103\",\"EE3131C\",\"CS4222\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS4226\",\"EE4210\",\"CS5223\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS5321\",\"EE5135\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Embedded Computing\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"CG3207\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS2107\", \"CS3211\", \"EE3731C\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS4222\", \"CS4223\", \"EE4218\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE4415\", \"CS5272\", \"EE5903\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Intelligent Systems\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"CS3243\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS3244\", \"EE3331C\", \"CS4244\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS4246\", \"CS4248\", \"EE4305\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE4308\", \"CS5242\",\"EE5904\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE5907\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Interactive Digital Media\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"CS2108\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS3240\", \"CS3241\",\"CS3242\",\"CS3247\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS3249\",\"EE3731C\",\"CS4240\",\"CS4243\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS4247\",\"CS4249\",\"CS4347\",\"CS4351\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE4212\",\"EE4604\",\"EE4704\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"Large-Scale Computing\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"CS2102\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS3210\", \"CS3211\", \"CS3230\", \"CS3235\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS3223\", \"CS4211\", \"CS4221\", \"CS4223\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"CS4224\", \"CS4231\", \"EE4210\", \"EE4218\")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TEs.put(\"System-On-A-Chip Design\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ArrayList\u003cString\u003e(Arrays.asList(\"CG3207\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE3104C\", \"EE3408C\", \"CS4223\", \"EE4104\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE4112\", \"EE4218\", \"EE4415\", \"EE4505\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"EE5518\")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * this method displays the study plan in table form in console."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if the user input is wrong"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException if the user input is wrong"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException if the user input is wrong"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showPlan() throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\" +-----------------------------------------------------------------------+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\" | Sem 1  | Sem 2  | Sem 3  | Sem 4  | Sem 5  | Sem 6  | Sem 7  | Sem 8  |\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\" +-----------------------------------------------------------------------+\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int biggestsize \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c StudyPlan.size();i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (biggestsize \u003c StudyPlan.get(i).size()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                biggestsize \u003d StudyPlan.get(i).size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cStringBuilder\u003e printplan \u003d new ArrayList\u003cStringBuilder\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c biggestsize;i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StringBuilder temp \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            temp.append(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int j \u003d 0;j \u003c StudyPlan.size();j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (StudyPlan.get(j).size() \u003e i) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 8) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"|\" + StudyPlan.get(j).get(i));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    } else if (StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"| \" + StudyPlan.get(j).get(i) + \"  \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    } else if (StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"| \" + StudyPlan.get(j).get(i) + \" \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    } else if (StudyPlan.get(j).get(i).getBytes().length \u003d\u003d 7) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        temp.append(\"|\" + StudyPlan.get(j).get(i) + \" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    temp.append(\"|        \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            temp.append(\"|\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            printplan.add(temp);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StringBuilder temp2 \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        temp2.append(\" \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c 8;i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int mc \u003d calculateSemMC(i);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (String.valueOf(mc).length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                temp2.append(\"| MCs:\" + mc + \" \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (String.valueOf(mc).length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                temp2.append(\"| MCs:\" + mc + \"  \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        temp2.append(\"|\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        printplan.add(temp2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c printplan.size();i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(printplan.get(i));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\" +-----------------------------\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \"------------------------------------------+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (checkGraduation().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You have met the \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \"graduation requirement! *\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You haven\u0027t reach \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \"the graduation requirement! *\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* To meet the graduation requirement,\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \" you have to take following modules: *\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            checkGraduation().stream().forEach(System.out::println);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (checkTechnicalElective() \u003c 20) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You need to have\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \" at least 20 MCs of Technical Elective Modules! *\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* You need \" + (20 - checkTechnicalElective()) + \" MCs More. *\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"* Note: You have reached minimum MCs for Technical Elective Modules! *\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * This method calculate the total MCs for one column."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param semester this parameter indicate which column it is calculating."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return number of MCs"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int calculateSemMC(int semester) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c StudyPlan.get(semester).size(); i++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String key \u003d StudyPlan.get(semester).get(i);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (Map.Entry\u003cString,ArrayList\u003cString\u003e\u003e temp: TEs.entrySet()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (temp.getValue().contains(key)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (flag) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    count +\u003d 4;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (MCMap.get(key) \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        throw new DukeException(\"We cannot find the MC of this module: \" + key);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    count +\u003d MCMap.get(key);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * this method check modules planned, verdict whether the plan"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * fulfill graduation requirements."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return boolean judgement"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cString\u003e checkGraduation() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003cString\u003e(CoreModules.keySet());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c StudyPlan.size();i++) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int j \u003d 0;j \u003c StudyPlan.get(i).size();j++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String modulecode \u003d StudyPlan.get(i).get(j);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (CoreModules.get(modulecode) !\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    result.remove(result.indexOf(modulecode));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method  check TE modules planed and verdict whether the"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * requirements are fulfilled."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return number of MCs planed for TE."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int checkTechnicalElective() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int count  \u003d 0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c StudyPlan.size();i++) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int j \u003d 0;j \u003c StudyPlan.get(i).size();j++) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String moduleCode \u003d StudyPlan.get(i).get(j);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                boolean flag \u003d false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (Map.Entry\u003cString,ArrayList\u003cString\u003e\u003e temp: TEs.entrySet()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (temp.getValue().contains(moduleCode)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        flag \u003d true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (flag) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    count +\u003d 4;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 253,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/studyassist/UndoStudyPlannerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.studyassist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoStudyPlannerCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This method undo previous comment input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldStudyPlan Data structure that keeps a backup"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param currentPlan Data structure that have been modified"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage The object deals with access,modify and save external"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                txt files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return Data structure that the system now holds"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading or writing the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e undoStudyPlanner(Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                                         ArrayList\u003cArrayList\u003cString\u003e\u003e currentPlan,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                                         StudyAssistPageStorage storage) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!oldStudyPlan.empty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentPlan \u003d oldStudyPlan.peek();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String toStore \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c currentPlan.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                toStore +\u003d currentPlan.get(i).stream().map(Object::toString).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                toStore +\u003d \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            storage.writeToStudyPlanFile(toStore);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"The previous command cannot be undo.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return currentPlan;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 40
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * Exits the program when bye command is called."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Returns void execute function for gazeeebo.commands.ByeCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list         An array list of type gazeeebo.Tasks.Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui           Class ui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage      class storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException | ParseException | IOException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Ui ui,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program exits when \"bye\" is called."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 52
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/CalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class CalendarView {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int TOTAL_NUM_DAYS \u003d 31;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int NUM_OF_MONTHS \u003d 12;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int LEAP_YEAR_EVERY \u003d 4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int NO_LEAP_YEAR \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int LEAP_YEAR \u003d 400;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int DET_CURRENT_MONTH \u003d 14;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(CalendarView.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Returns the day of the month."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param month month of the date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param day   date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param year  year"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return int d The day of the start of the month in integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public int startDay(final int month, final int day, final int year) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int y \u003d year - (DET_CURRENT_MONTH - month) / NUM_OF_MONTHS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int x \u003d y + y / LEAP_YEAR_EVERY - y / NO_LEAP_YEAR + y / LEAP_YEAR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int m \u003d month + NUM_OF_MONTHS * ((DET_CURRENT_MONTH - month) / NUM_OF_MONTHS) - 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int d \u003d (day + x + (TOTAL_NUM_DAYS * m) / NUM_OF_MONTHS) % DAYS_IN_WEEK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Check if the year is a leap year or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param year year"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return true if it is a leap year, false otherwise"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isLeapYear(int year) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if ((year % LEAP_YEAR_EVERY \u003d\u003d 0) \u0026\u0026 (year % NO_LEAP_YEAR !\u003d 0)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return year % LEAP_YEAR \u003d\u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Prints out the calendar in the command line,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * if there is a task on that day the day will be marked with an \u0027*\u0027."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void monthlyView(final ArrayList\u003cTask\u003e list, int month, int year, int date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean[] isBusy \u003d new boolean[TOTAL_NUM_DAYS + 1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                switch (task.getClass().getName()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (event.date.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        isBusy[event.date.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Deadline\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (deadline.by.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        isBusy[deadline.by.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Timebound\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate startDate \u003d ((Timebound) task).dateStart;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate endDate \u003d ((Timebound) task).dateEnd;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (endDate.getMonthValue()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \u003d\u003d month \u0026\u0026 startDate.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                             i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[i] \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (endDate.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        assert (startDate.getDayOfMonth() !\u003d month);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d 1; i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[i] \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (startDate.getMonthValue() \u003d\u003d month) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        assert (endDate.getDayOfMonth() !\u003d month);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth(); i \u003c\u003d TOTAL_NUM_DAYS; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[i] \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] months \u003d {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"January\", \"February\", \"March\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"October\", \"November\", \"December\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            };"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int[] days \u003d {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                days[month] \u003d 29;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"          \" + months[month] + \" \" + year);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"  S    M    Tu   W    Th   F    S\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int d \u003d startDay(month, 1, year);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c d; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.print(\"     \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d days[month]; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (i !\u003d date \u0026\u0026 isBusy[i]) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%4s \", i + \"*\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (i \u003d\u003d date \u0026\u0026 !isBusy[i]) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%5s\", \"|\" + i + \"|\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (i \u003d\u003d date \u0026\u0026 isBusy[i]) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%5s\", \"|\" + i + \"*\" + \"|\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.printf(\"%4s \", i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (((i + d) % DAYS_IN_WEEK \u003d\u003d 0) || (i \u003d\u003d days[month])) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            LOGGER.log(Level.SEVERE,\"Current Date Invalid\", e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Prints out the annual calendar in the command line and"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * if there is a task on that day the day will be marked"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * with an \u0027*\u0027."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void annualView(final ArrayList\u003cTask\u003e list, int month, int year, int date) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean[][] isBusy \u003d new boolean[NUM_OF_MONTHS + 1][TOTAL_NUM_DAYS + 1];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                switch (task.getClass().getName()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Event\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isBusy[event.date.getMonthValue()]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            [event.date.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Deadline\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isBusy[deadline.by.getMonthValue()]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            [deadline.by.getDayOfMonth()] \u003d true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                case \"gazeeebo.tasks.Timebound\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate startDate \u003d ((Timebound) task).dateStart;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    LocalDate endDate \u003d ((Timebound) task).dateEnd;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (startDate.getMonthValue() \u003d\u003d endDate.getMonthValue()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                             i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[startDate.getMonthValue()][i] \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d startDate.getDayOfMonth(); i \u003c\u003d TOTAL_NUM_DAYS; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[startDate.getMonthValue()][i] \u003d true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        for (int i \u003d 1; i \u003c\u003d endDate.getDayOfMonth(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            isBusy[endDate.getMonthValue()][i] \u003d true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        if (endDate.getMonthValue()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                - startDate.getMonthValue() \u003e 1) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            for (int i \u003d startDate.getMonthValue() + 1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                 i \u003c endDate.getMonthValue(); i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                for (int k \u003d 1; k \u003c\u003d TOTAL_NUM_DAYS; k++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                    isBusy[i][k] \u003d true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] months \u003d {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"January\", \"February\", \"March\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                \"October\", \"November\", \"December\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            };"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int[] days \u003d {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            };"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (month \u003d\u003d 2 \u0026\u0026 isLeapYear(year)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                days[month] \u003d 29;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int j \u003d 1; j \u003c 13; j++) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"          \" + months[j] + \" \" + year);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"  S    M    Tu   W    Th   F    S\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                int d \u003d startDay(j, 1, year);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c d; i++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.print(\"     \");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d days[j]; i++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (i !\u003d date \u0026\u0026 isBusy[j][i]) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.printf(\"%4s \", i + \"*\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (i \u003d\u003d date \u0026\u0026 j \u003d\u003d month \u0026\u0026 !isBusy[j][i]) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.printf(\"%5s\", \"|\" + i + \"|\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else if (i \u003d\u003d date \u0026\u0026 j \u003d\u003d month \u0026\u0026 isBusy[j][i]) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.printf(\"%5s\", \"|\" + i + \"*\" + \"|\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.printf(\"%4s \", i);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (((i + d) % DAYS_IN_WEEK \u003d\u003d 0) || (i \u003d\u003d days[month])) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            LOGGER.log(Level.SEVERE,\"Current Date Invalid\", e);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 240
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/CategoryListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Shows the categorized list when called."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CategoryListCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Index of parameter duration on the command is 3."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int INDEX_OF_DURATION \u003d 3;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Sorts the different types of tasks into their respective categories."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * It also shows the specified category list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws a custom exception if"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        module index does not exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cFixedDuration\u003e fdList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTimebound\u003e tbList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.tasks.Deadline\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deadlineList.add(deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.Event\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event event \u003d new Event(task.description,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                eventList.add(event);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.Todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Todo todo \u003d new Todo(task.description);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                todoList.add(todo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.FixedDuration\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FixedDuration fixedDuration"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d new FixedDuration(task.description,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[INDEX_OF_DURATION].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                fdList.add(fixedDuration);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"tasks.Timebound\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Timebound timebound \u003d new Timebound(task.description,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[INDEX_OF_DURATION].trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                tbList.add(timebound);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        if (ui.fullCommand.equals(\"deadline list\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of deadlines tasks:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c deadlineList.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + deadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.fullCommand.equals(\"event list\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of events tasks:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c eventList.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + eventList.get(i).listFormat());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.fullCommand.equals(\"todo list\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of todo tasks:\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c todoList.size(); i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + todoList.get(i).listFormat());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.fullCommand.equals(\"fixed duration list\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of fixed duration tasks:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c fdList.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + fdList.get(i).listFormat());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } else if (ui.fullCommand.equals(\"timebound list\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"List of timebounded tasks:\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c tbList.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(i + 1 + \".\" + tbList.get(i).listFormat());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 131
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ChangePriority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ChangePriority extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(\"priority\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"The task number cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            int numbercheck \u003d Integer.parseInt("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ui.fullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int numberpriority \u003d Integer.parseInt(ui.fullCommand.split(\" \")[2]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            list.get(numbercheck).priority \u003d numberpriority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"The priority of the task\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \"is successfully changed!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Task \" + list.get(numbercheck).description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \" now has priority \" + list.get(numbercheck).priority);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 19,
      "JasonLeeWeiHern": 35,
      "e0309463": 3,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ConfirmTentativeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class ConfirmTentativeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method confirms a certain time slot of tentative event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ev;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            TentativeEvent tev;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 7) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The index of tentative event\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \"cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                index \u003d Integer.parseInt("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ui.fullCommand.substring(7).trim()) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (list.get(index).listFormat().getBytes()[1] !\u003d \u0027T\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \u0026\u0026 list.get(index).listFormat().getBytes()[2]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        !\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"OOPS!!! You can only\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \"confirm tentative event task.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String tempstring \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"You are confirming\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \"this tentative event: \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + list.get(index).description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(tempstring);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Please indicate which\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \"time slot you want to confirm\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    int whichTimeSlot \u003d Integer.parseInt(ui.fullCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String[] timeslots \u003d list.get(index)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(timeslots[whichTimeSlot + 2]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ev \u003d new Event(list.get(index).description,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            timeslots[whichTimeSlot + 2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tev \u003d (TentativeEvent) list.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Are you sure you want to\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \"confirm this time slot: \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (ui.fullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.add(ev);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Confirmed.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (list.get(i).getClass().getName().equals("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"gazeeebo.Tasks.Deadline\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else if (list.get(i).getClass().getName().equals("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \"gazeeebo.Tasks.Event\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 112
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * This class creates and adds a new deadline task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * The string \"deadline\" has 6 characters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    static final int DEADLINE_CHAR_COUNT \u003d 8;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * The string \"deadline \" has 9 characters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    static final int DEADLINE_AND_SPACE_CHAR_COUNT \u003d 9;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Adds deadline tasks to the list of tasks when called."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                        format of deadline command is wrong"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.trim().length() \u003d\u003d DEADLINE_CHAR_COUNT) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        + \"of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.contains(\"/by\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                description \u003d ui.fullCommand.split(\"/by \")[0]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        .substring(DEADLINE_AND_SPACE_CHAR_COUNT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, triviaStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The deadline command is incorrect. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        + \"Format: deadline description/by YYYY-MM-DD HH:mm:ss\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Deadline d \u003d new Deadline(description,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    ui.fullCommand.split(\"/by \")[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(d);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(d.listFormat());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            triviaManager.showPossibleInputs(\"deadline\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Ui.showDeadlineDateFormatError();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 96
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class allows user to delete existing tasks from list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *  The string \"delete\" has 6 characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *  */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DELETE_CHAR_COUNT \u003d 6;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"delete \" has 7 characters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    static final int DELETE_AND_SPACE_CHAR_COUNT \u003d 7;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"delete\" has 6 characters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Calls delete function to delete tasks from list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Able to delete one or more tasks at time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           deals with printing things to the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      deals with storing data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack keep stack of previous commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param deletedTask  keep stack of deleted tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException Throws custom exception when format of delete command is wrong"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException catch error if parse string to date fails."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d DELETE_CHAR_COUNT) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"of a deletion cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                //@@author e0323290"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                /*Delete all tasks at once*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (ui.fullCommand.contains(\"all\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        deletedTask.add(list.get(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    list.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed all the tasks.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Now you have \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + list.size()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" tasks in the list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (ui.fullCommand.contains(\"and\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    /*Delete multiple tasks at once*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int numOfAnds \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int i \u003d 0; i \u003c ui.fullCommand.length(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (ui.fullCommand.charAt(i) \u003d\u003d \u0027a\u0027) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            numOfAnds++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    String[] strNumberList \u003d ui.fullCommand.substring("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            DELETE_AND_SPACE_CHAR_COUNT).split("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            \" and \", numOfAnds + 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int size \u003d strNumberList.length;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int[] intNumberList \u003d new int[size];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        intNumberList[j] \u003d Integer.parseInt(strNumberList[j]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    Arrays.sort(intNumberList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    int count \u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    for (int k \u003d 0; k \u003c size; k++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        int index \u003d intNumberList[k] - count;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        deletedTask.add(list.get(index));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        System.out.println(taskremoved);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + \" tasks in the list.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[1] !\u003d null) { //@@author jessteoxizhi"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        int index \u003d Integer.parseInt(ui.fullCommand.substring("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                DELETE_CHAR_COUNT).trim()) - 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        deletedTask.add(list.get(index));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        String taskremoved \u003d list.get(index).listFormat();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println(taskremoved);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println(\"Wrong input for delete command\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println(\"Task number not found\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 61,
      "JasonLeeWeiHern": 33,
      "e0309463": 44,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DoAfterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Allows user to set a reminder task to be done after a certain task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Creates a task to be done after the previous task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * and sets a reminder when the previous task is done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         Task lists"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           The object that deals with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                     printing things to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      The object that deals with storing data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack Keep stack of previous commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                        format of do after command is wrong"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException catch error if parse string to date fails."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException    catch error if read file fails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws ParseException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String before \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String after \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring \u003d ui.fullCommand.split(\"/after\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        before \u003d splitstring[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        after \u003d splitstring[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter to \u003d new DoAfter(before, before, after);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Now you have \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Program does not exit and continues running since command \"bye\" is not called."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the system should not exit and continue running."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 77
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * Allows user to record which tasks are completed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * The string \"done \" has 5 characters."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int DONE_AND_SPACE_CHAR_COUNT \u003d 5;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * The string of task initials and status has 9 characters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int TASK_INITIALS_AND_STATUS_CHAR_COUNT \u003d 9;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This class marks tasks as done and prints out"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * the next task to be done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                        format of done command is wrong"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"The task done number\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        + \" cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            int numbercheck \u003d Integer.parseInt("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    ui.fullCommand.substring(DONE_AND_SPACE_CHAR_COUNT)) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.get(numbercheck).isDone \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(list.get(numbercheck).listFormat());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (list.get(i).description.contains("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        list.get(numbercheck).description)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        \u0026\u0026 list.get(i).listFormat().contains(\"/after\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        \u0026\u0026 i !\u003d numbercheck) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"OK! Now you need to\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            + \"do the following:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    String[] temp \u003d list.get(i).listFormat().split("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            \"\\\\(/after\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(temp[0].substring("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            TASK_INITIALS_AND_STATUS_CHAR_COUNT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            RecurringCommand rc \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            rc.addRecurring(list, numbercheck,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    list.get(numbercheck).toString(), storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.showProgessiveBar(list);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Wrong input for done command\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Done number not found\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 113
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/DoneListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to see which tasks are done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DoneListCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This class shows the list done tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * that are completed when called."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of done list command is wrong"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e doneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Command for \u0027done\u0027 cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (task.isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    doneList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"done list\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"List of tasks that are done:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c doneList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + doneList.get(i).listFormat());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 88
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * This class creates and adds a new event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"event\" has 5 characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int EVENT_CHAR_COUNT \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * The string \"event \" has 6 characters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final int EVENT_AND_SPACE_CHAR_COUNT \u003d 6;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Calls in the Event object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String EVENT \u003d \"gazeeebo.tasks.Event\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This class adds event tasks to the list of tasks when called."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of event command is wrong"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d EVENT_CHAR_COUNT) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"an event cannot be empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                description \u003d ui.fullCommand.split(\"/at \")[0]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        .substring(EVENT_AND_SPACE_CHAR_COUNT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, triviaStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String at \u003d ui.fullCommand.split(\"/at \")[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Event ev \u003d new Event(description, at);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //CHECKING FOR SCHEDULE ANOMALIES-----------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cEvent\u003e clash \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            //to store events that clash with the incoming event"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (Task t : list) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (t.getClass().getName().equals(EVENT)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ((Event) t).date.equals(ev.date)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ((ev.start.isBefore(((Event) t).start)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ev.end.isAfter(((Event) t).start))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        || ev.start.equals(((Event) t).start)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        || (ev.start.isAfter(((Event) t).start)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u0026\u0026 ev.start.isBefore(((Event) t).end)))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    clash.add((Event) t);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (!clash.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"The following event(s) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"clash with your current event:\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (int i \u003d 0; i \u003c clash.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println((i + 1) + \".\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + clash.get(i).listFormat());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(ev);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(ev.listFormat());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"event\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException a) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Ui.showEventDateFormatError();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 66,
      "JasonLeeWeiHern": 15,
      "mononokehime14": 4,
      "e0309463": 14,
      "yueyuu": 20
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * Allows user to find a task via a keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * The string \"find\" has 4 characters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int FIND_CHAR_COUNT \u003d 4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * The string \"find \" has 5 characters."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final int FIND_AND_SPACE_CHAR_COUNT \u003d 5;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * This class finds a task from the list of tasks when called."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack  the stack of previous commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask   the list of deleted task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d FIND_AND_SPACE_CHAR_COUNT"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    || ui.fullCommand.length() \u003d\u003d FIND_CHAR_COUNT) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a search cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ArrayList\u003cTask\u003e searchedList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (Task it : list) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (it.description.contains("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            ui.fullCommand.substring(FIND_CHAR_COUNT).trim())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        searchedList.add(it);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (!searchedList.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"Here are the \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            + \"matching tasks in your list:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    for (int i \u003d 0; i \u003c searchedList.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                                + searchedList.get(i).listFormat());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(\"There are no matching tasks found.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 93
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/FixDurationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * This class creates and adds a new fixed duration task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Adds task that has a fixed duration when called."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list          Task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage       The object that deals with"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                      storing data to the Save.txt file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                        format of fixed duration command is wrong"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String duration \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitstring;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        splitstring \u003d ui.fullCommand.split(\"/require\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        description \u003d splitstring[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        duration \u003d splitstring[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration to \u003d new FixedDuration(description, duration);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(to);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Now you have \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 81
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": " * Shows the list of tasks recorded."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Displays the list of tasks when called."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list          Task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage       The object that deals with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                      storing data to the Save.txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws ParseException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(i + 1 + \".\" + list.get(i).listFormat());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.showProgessiveBar(list);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 62
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Automatically replaces the task and adds the new task with the new date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RecurringCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Number of dates to add for weekly task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final int ADD_WEEKLY_DATE \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Replace the task to the next week/month/year base on the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * word weekly/monthly/yearly when the it is marked as done[D]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list            task lists"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param numbercheck     the index of the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listDescription description of the index of the list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage         the object that deals with storing data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if read fails."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void addRecurring(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final int numbercheck,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final String listDescription,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                             final Storage storage) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitDescriptionandDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] splitDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String[] getDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (listDescription.contains(\"weekly\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listDescription.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        .plusMonths(0).plusDays(ADD_WEEKLY_DATE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newWeeklyEvent \u003d new Event(description, (concTime));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newWeeklyEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this weekly task again:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newWeeklyEvent.listFormat()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (listDescription.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        .plusMonths(0).plusDays(ADD_WEEKLY_DATE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newWeeklyDeadline"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d new Deadline(description, (concTime));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newWeeklyDeadline);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this weekly task again:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newWeeklyDeadline.listFormat() + \"\\nNow you have \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (listDescription.contains(\"monthly\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listDescription.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newMonthlyEvent \u003d new Event(description, (concTime));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newMonthlyEvent);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this monthly task again:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newMonthlyEvent.listFormat() + \"\\nNow you have \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (listDescription.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(0).plusMonths(1).plusDays(0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newMonthlyDeadline"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d new Deadline(description, (concTime));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newMonthlyDeadline);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this monthly task again:\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newMonthlyDeadline.listFormat()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (listDescription.contains(\"yearly\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listDescription.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|at: \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newYearlyEvent \u003d new Event(description, (concTime));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newYearlyEvent);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this yearly task again:\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newYearlyEvent.listFormat() + \"\\nNow you have \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.size() + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (listDescription.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDescriptionandDate \u003d listDescription.split(\"\\\\|by: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                splitDate \u003d splitDescriptionandDate[1].split(\" \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                LocalDate newDate \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        LocalDate.parse(splitDate[0],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                newDate \u003d newDate.plusYears(1).plusMonths(0).plusDays(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String hourMinSec \u003d splitDate[1];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String concTime \u003d newDate + \" \" + hourMinSec;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                getDescription \u003d splitDescriptionandDate[0].split(\"\\\\|\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d getDescription[getDescription.length - 1];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newYearlyDeadline"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        \u003d new Deadline(description, (concTime));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(numbercheck, newYearlyDeadline);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"\\nI\u0027ve automatically added \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"this yearly task again:\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newYearlyDeadline.listFormat()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\nNow you have \" + list.size()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            sb.append(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 167
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method allows for rescheduling of task(event and deadline)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Ui ui,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 10) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The object of a rescheduling cannot be null.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int index \u003d Integer.parseInt(ui.fullCommand.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (index \u003e list.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"Please input correct task index\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String decription \u003d list.get(index).description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You are rescheduling this task: \" + decription);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Please type in your new timeline\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String time \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Are you sure you want to reschedule this task? (yes/no)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (ui.fullCommand.equals(\"yes\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Task rescheduledDeadline \u003d new Deadline(decription, time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.add(rescheduledDeadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(rescheduledDeadline.listFormat());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    } else if (ui.fullCommand.equals(\"no\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Event rescheduledEvent \u003d new Event(decription, time);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        list.add(rescheduledEvent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve changed this task\u0027s timeline: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(rescheduledEvent.listFormat());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        throw new DukeException(\"Please follow correct input format\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"It\u0027s fine. Nothing has been changed.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Enter the task number instead of the name\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 105
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method snooze the date of deadline and event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Ui ui,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Storage storage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The object of a snoozing cannot be null.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, triviaStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int index \u003d Integer.parseInt(ui.fullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (index \u003e list.size() - 1 || index \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"Please input correct task index\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String description \u003d list.get(index).description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You are snoozing this task: \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + list.get(index).description);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Please indicate how much time you want to snooze\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (ui.fullCommand.split(\" \").length !\u003d 4) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"Please follow th correct input format\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int year \u003d Integer.parseInt(ui.fullCommand.split(\" \")[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int day \u003d Integer.parseInt(ui.fullCommand.split(\" \")[2]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int month \u003d Integer.parseInt(ui.fullCommand.split(\" \")[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                int hour \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (list.get(index).listFormat().contains(\"by\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String date \u003d list.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalDateTime newDate \u003d LocalDateTime"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String newBy \u003d newDate"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Task snoozedDeadline \u003d new Deadline(description, newBy);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.add(snoozedDeadline);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s deadline: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(snoozedDeadline.listFormat());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String date \u003d list.get(index).toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .split(\"\\\\|\")[3].substring(4)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .split(\" \")[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String start \u003d list.get(index).toString()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .split(\"\\\\|\")[3].substring(4)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .split(\" \")[1].split(\"-\")[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String end \u003d list.get(index).toString()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .split(\"\\\\|\")[3].substring(4"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ).split(\" \")[1].split(\"-\")[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalDate newDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalTime newStart \u003d LocalTime.parse(start, DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    LocalTime newEnd \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newStart \u003d newStart.plusHours(hour);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    newEnd \u003d newEnd.plusHours(hour);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    String newAt \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \" \" + newStart.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \"-\" + newEnd.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Event snoozedEvent \u003d new Event(description, newAt);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.remove(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    list.add(snoozedEvent);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Okay. I\u0027ve prolonged this task\u0027s time: \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(snoozedEvent.listFormat());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            triviaManager.showPossibleInputs(\"snooze\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 133
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method sort the task list in given order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          Task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       The object that deals with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      storing data to the Save.txt file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                        format of fixed duration command is wrong"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ParseException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please enter method of sorting.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (ui.fullCommand.split(\" \").length !\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"Please follow the correct input format\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cTask\u003e sortedList \u003d new ArrayList\u003cTask\u003e(list);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (ui.fullCommand.split(\" \")[1].equals(\"name\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(sortedList, new CustomNameComparator());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for (int i \u003d 0; i \u003c sortedList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(sortedList.get(i).listFormat());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[1].equals(\"date\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    System.out.println(\"Following is the sorted list of deadlines:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sortedList \u003d sortedList.stream().filter(data -\u003e data.toString()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .split(\"\\\\|\")[0].equals(\"D\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            || data.toString().split(\"\\\\|\")[0].equals(\"E\"))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            .collect(Collectors.toCollection(ArrayList\u003cTask\u003e::new));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(sortedList, new CustomeDateComparator());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for (int i \u003d 0; i \u003c sortedList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(sortedList.get(i).listFormat());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[1].equals(\"priority\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    Collections.sort(sortedList, new CustomPriorityComparator());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    for (int i \u003d 0; i \u003c sortedList.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        System.out.println(sortedList.get(i).listFormat()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                                + \" priority: \" + sortedList.get(i).priority);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    throw new DukeException(\"OOPS!!! \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                            + \"Gazeeebo currently does not support this sorting method.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomPriorityComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return b.priority - a.priority;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomNameComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a, Task b) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return a.description.compareTo(b.description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class CustomeDateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int compare(Task a,Task b) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (a.toString().split(\"\\\\|\")[0].equals(\"E\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ea \u003d (Event)a;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event eb \u003d (Event)b;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(ea.date,ea.start)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    .compareTo(LocalDateTime.of(eb.date,eb.start));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (a.toString().split(\"\\\\|\")[0].equals(\"D\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline da \u003d (Deadline)a;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline db \u003d (Deadline)b;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return da.by.compareTo(db.by);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (a.toString().split(\"\\\\|\")[0].equals(\"E\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event ea \u003d (Event)a;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline db \u003d (Deadline)b;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            LocalDateTime temp \u003d LocalDateTime.of(ea.date,ea.start);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int result \u003d temp.compareTo(db.by);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(ea.date,ea.start).compareTo(db.by);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (a.toString().split(\"\\\\|\")[0].equals(\"D\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                \u0026\u0026 b.toString().split(\"\\\\|\")[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Event eb \u003d (Event)b;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            Deadline da \u003d (Deadline)a;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            LocalDateTime temp \u003d LocalDateTime.of(eb.date,eb.start);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            int result \u003d temp.compareTo(da.by);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return LocalDateTime.of(eb.date,eb.start).compareTo(da.by);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if ((a.toString().split(\"\\\\|\")[0].equals(\"E\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                || a.toString().split(\"\\\\|\")[0].equals(\"D\"))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                \u0026\u0026 !(b.toString().split(\"\\\\|\")[0].equals(\"E\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                || b.toString().split(\"\\\\|\")[0].equals(\"D\"))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if ((b.toString().split(\"\\\\|\")[0].equals(\"E\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                || b.toString().split(\"\\\\|\")[0].equals(\"D\"))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                \u0026\u0026 !(a.toString().split(\"\\\\|\")[0].equals(\"E\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                || a.toString().split(\"\\\\|\")[0].equals(\"D\"))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 146
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Groups tasks of the same tags together after"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * a task is tagged."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Adds a tag e.g. #study to a task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          Task lists"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of tag command is wrong"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException Catch error if reading of file fails"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"#\") || ui.fullCommand.equals(\"# \")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"The tag description cannot be empty.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                ArrayList\u003cTask\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String tag \u003d ui.fullCommand.substring(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (Task it : list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (it.description.contains(\"#\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        if (it.description.split(\"#\")[1].trim().equals(tag)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            tagList.add(it);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Here are the matching tags in your list:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c tagList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            + tagList.get(i).listFormat());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 80
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TentativeEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method deals with tentative events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                       final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (ui.fullCommand.length() \u003d\u003d 9) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of an \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \"tentative event cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                description \u003d ui.fullCommand.substring(10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You are creating \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \"a tentative event: \" + description);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Please enter possible time \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \"slots of the event\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"When you are done, key in \u0027/\u0027.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                while (!ui.fullCommand.equals(\"/\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    tentativetimes.add(ui.fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    ui.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TentativeEvent newTentative"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        \u003d new TentativeEvent(description, tentativetimes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Got it. I\u0027ve added this tentative event:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(newTentative.listFormat());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"You could confirm one of the slots later.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                list.add(newTentative);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 89
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TimeboundCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Adds tasks that has a time bound when called. (e.g. between 2h)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class TimeboundCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Executes commands to add task that has a time bound when called."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          Task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      storing data to the Save.txt file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of fixed duration command is wrong"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final int periodCharacterCount \u003d 6;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final int totalCharacterCountOfTimeAndDate \u003d 33;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String duration \u003d ui.fullCommand.split(\"/\")[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (duration.length() \u003e periodCharacterCount"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \u0026\u0026 duration.length() \u003c totalCharacterCountOfTimeAndDate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"OOPS!!! There is no proper duration \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        + \"of time allocated for this task.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                description \u003d ui.fullCommand.split(\"/between \")[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String period \u003d ui.fullCommand.split(\"/between \")[1];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            Timebound tb \u003d new Timebound(description, period);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            list.add(tb);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(tb.listFormat());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Now you have \" + list.size()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    + \" tasks in the list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 88
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/TodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Adding a task of todo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                        format of command is wrong"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager) throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (ui.fullCommand.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.split(\" \")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                description \u003d ui.fullCommand.substring(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                triviaManager.learnInput(ui.fullCommand, triviaStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                throw new DukeException(\"OOPS!!! The todo command is wrong. Format: todo description\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Todo to \u003d new Todo(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list.add(to);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(to.listFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            triviaManager.showPossibleInputs(\"todo\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 76
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/UndoTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class UndoTaskCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Undo previous task command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack stack of previous commands"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list         list of tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage      object to store and read from txt file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return Previous Arraylist of Task before command executed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static ArrayList\u003cTask\u003e undo(Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, ArrayList\u003cTask\u003e list, Storage storage)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        if (!commandStack.empty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            list \u003d commandStack.peek();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You have undo the previous command.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            commandStack.pop();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(\"You cannot undo the previous command.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 40
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/UndoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Allows users to mark their done tasks to undone if"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * they have marked the tasks done by mistake."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  the stack of previous commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   the list of deleted task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when undo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of command is wrong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list, final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        int numberCheck \u003d Integer.parseInt(ui.fullCommand.substring(6).trim()) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"undone\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"The undo task number cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.contains(\"undone\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (numberCheck \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    throw new DukeException(\"Task number cannot be negative.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (numberCheck \u003e list.size() - 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    throw new DukeException(\"Task number does not exist.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (list.get(numberCheck).isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    list.get(numberCheck).isDone \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as undone: \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(list.get(numberCheck).listFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 79
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/UndoneListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.commands.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class UndoneListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Displays the list of tasks that are marked undone."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  the stack of previous commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   the list of deleted task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of command is wrong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list, final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack, final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e undoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"undone\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                throw new DukeException(\"Command for \u0027undone\u0027 cannot be empty.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (!task.isDone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    undoneList.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"undone list\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                System.out.println(\"List of tasks that are undone:\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (int i \u003d 0; i \u003c undoneList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    System.out.println(i + 1 + \".\" + undoneList.get(i).listFormat());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                sb.append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 78
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditBothCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditBothCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will receive the user new description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * and time and edit the old description and time in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list      task lists"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        the object that deals with printing things to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listIndex the index of the list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch read file error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public EditBothCommand(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                           final Ui ui, final int listIndex)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Type your description \u0026 date:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] breakListWords \u003d list.get(listIndex).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (breakListWords[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakDeadline \u003d ui.fullCommand.split(\"/by \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d breakDeadline[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String by \u003d breakDeadline[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newdeadline \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Deadline description and time.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newdeadline);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakEvent \u003d ui.fullCommand.split(\"/at \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String description \u003d breakEvent[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String at \u003d breakEvent[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newEvent \u003d new Event(description, at);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Event description and time.\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakFD \u003d ui.fullCommand.split(\" /require \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration newFD \u003d new FixedDuration(breakFD[0], breakFD[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"FixDuration description and time.\\n\\tFrom: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.get(listIndex).listFormat() + \"\\n\\tTo:   \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + newFD.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newFD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] breakP \u003d ui.fullCommand.split(\" /between \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Timebound newP \u003d new Timebound(breakP[0], breakP[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Timebound description and time.\\n\\tFrom: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"That input has \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"no time/description to be edited.\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 77
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Receive the user\u0027s input on which"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * list index to edit and then receive another"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * user\u0027s input, checking he/she wants to edit the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * task\u0027s description or time or both and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * execute them in the following methods respectively."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           the object that"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                     deals with printing things to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      the object that"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *                     deals with storing data to the Save.txt file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack keep stack of previous commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param deletedTask  keep stack of deleted tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws NullPointerException if tDate doesn\u0027t get updated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            IOException, NullPointerException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] input \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int listnoIndex \u003d Integer.parseInt(input[1]) - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (listnoIndex \u003c list.size() \u0026\u0026 listnoIndex \u003e\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Edit description/time/both ?\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (ui.fullCommand.equals(\"description\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new EditDescriptionCommand(list, ui, listnoIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"time\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new EditTimeCommand(list, ui, listnoIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"both\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new EditBothCommand(list, ui, listnoIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Please input the correct format.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Tells the main Duke class that the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * system should not exit and continue running."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 83
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditDescriptionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditDescriptionCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will receive the user\u0027s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * new description and edit the old description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list      task lists"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui        the object that deals with printing things to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listIndex the index of the list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch error in read file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public EditDescriptionCommand(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                  final int listIndex) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Type your description:\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String newDescription \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] breakListWords \u003d list.get(listIndex).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (breakListWords[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Todo newtodo \u003d new Todo(newDescription);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your ToDo description.\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newtodo.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newtodo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] by \u003d breakListWords[3].split(\"by: \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newdeadline \u003d new Deadline(newDescription, by[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Deadline description.\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newdeadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] at \u003d breakListWords[3].split(\"at: \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newEvent \u003d new Event(newDescription, at[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Event description.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String[] splitter \u003d newDescription.split(\" /after \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                DoAfter newDA \u003d new DoAfter(splitter[1], splitter[1], splitter[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your DoAfter description.\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newDA.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newDA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String by \u003d breakListWords[3];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration newFA \u003d new FixedDuration(newDescription, by);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"FixedDuration description.\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newFA.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newFA);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Timebound newP \u003d new Timebound(newDescription, breakListWords[3]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Timebound description.\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listIndex).listFormat()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listIndex, newP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"That input has \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"description to be edited.\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 87
    }
  },
  {
    "path": "src/main/java/gazeeebo/commands/tasks/edit/EditTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.commands.tasks.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditTimeCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will receive the user\u0027s"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * new time and edit the old time in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list        task lists"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui          the object that deals with printing things to the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param listnoIndex the index of the list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the read file error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public EditTimeCommand(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                           final int listnoIndex) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(\"Type your time:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String newTime \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] breakListWords \u003d list.get(listnoIndex).toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (breakListWords[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Deadline newdeadline \u003d new Deadline(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Deadline time.\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newdeadline.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newdeadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event newEvent \u003d new Event(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Event time.\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newEvent.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newEvent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                FixedDuration newFD \u003d new FixedDuration(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your FixDuration time.\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newFD.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newFD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (breakListWords[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Timebound newP \u003d new Timebound(breakListWords[2], newTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.print(\"Ok, we have edited your Timebound time.\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: \" + list.get(listnoIndex).listFormat()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   \" + newP.listFormat() + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                list.set(listnoIndex, newP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                throw new DukeException(\"That input has no time to be edited.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 66
    }
  },
  {
    "path": "src/main/java/gazeeebo/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.exception;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**This method is a custom Exception that would throw our custom error message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param errorMessage String of error message that will display in console"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DukeException(final String errorMessage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 3,
      "mononokehime14": 4,
      "e0309463": 5,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/help/HelpText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.help;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class HelpText {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SEPARATOR_COMMAND \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"----------------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"------------------------------------------------------\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SEPARATOR_PAGE \u003d System.lineSeparator()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"_____________________________________________________________________________________________\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"____________________________________________________\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"# Command Format #\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Words in UPPER_CASE are the parameters to be supplied by the\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"user e.g. in todo TASK_DESCRIPTION, TASK_DESCRIPTION is a\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"parameter which can be used as todo eat.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String COMMANDS_HEADER \u003d \"# Commands #\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //---------------------help--------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final  String HEADER_HELP_PAGE \u003d \"********** Help page: help **********\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HELP_FULL \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the full help page: help ]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCalls out the full help page.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: help\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HELP_INDIV \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing help for a specific page: help ]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCalls out help for a specific page in the application.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: help PAGE_NAME\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tList of possible commands: \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help tasks\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help places\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help notes\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help module\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help contacts\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help cap\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help expenses\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help spec\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help password - Provides help on how to login and the default password.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help change password \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help moduleplanner\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- help bye\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //------------------------------TASKS-------------------------------------------"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_TASKS_PAGE \u003d \"********** Tasks page: tasks **********\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Brings you to your tasks page from the main menu page.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"In your tasks page, you can add different kinds of tasks to your schedule and view your upcoming \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"tasks.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"The following commands in this section can only be used in the tasks page.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"How to get to the tasks page: \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- Type in the command \\\u0027tasks\\\u0027 in the main menu page and press ENTER.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- You can only go to the tasks page from the main menu.\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TODO \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a todo: todo ]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds a todo task to the task list.\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: todo TASK_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- todo eat\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- todo watch TV\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DEADLINE \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a deadline: deadline ]\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds a deadline task to the task list.\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: deadline TASK_DESCRIPTION /by YYYY-MM-DD HH:MM:SS\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- deadline assignment /by 2019-12-04 12:07:08\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- deadline watch TV /by 1988-06-27 08:46:37\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EVENT \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding an event: event ]\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds an event task to the task list.\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: event TASK_DESCRIPTION /at YYYY-MM-DD HH:MM:SS-HH:SS:MM\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- event party /at 2019-12-04 12:07:08-12:50:00\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- event project meeting /at 1988-06-27 08:46:37-09:50:10\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String LIST \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Listing out the task list: list ]\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tList out all the tasks in the task list.\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: list\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Delete task(s): delete ]\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes n number of tasks at once from the list or delete all tasks at once.\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: delete TASK_NUM1 and TASK_NUM2...OR delete all\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete 3 and 5\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete 6\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete all\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DONE \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Set a task as done: done ]\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tMarks a task as done.\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: done TASK_NUM\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- done 1\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- done 6\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_FIND \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Find tasks based on a keyword: find ]\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSearches for tasks based on a specified keyword.\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: find KEYWORD\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- find read\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- find eat\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SCHEDULE_DAILY \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the schedule for a day: scheduleDaily ]\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists out your schedule and your notes for the specified date. \\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: scheduleDaily YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- scheduleDaily 2019-08-09\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- scheduleDaily 2022-10-26\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SCHEDULE_WEEKLY \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the schedule for a week: scheduleWeekly ]\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists out your schedule and your notes for the specified week. \\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: scheduleWeekly YYYY-MM-DD YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The first date in the format above must be a Monday and the second date must be a \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Sunday.\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The first date must be before the second date.\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The number of days between the two dates must be 7.\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- scheduleWeekly 2019-10-07 2019-10-13\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- scheduleWeekly 2019-09-02 2019-09-08\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SCHEDULE_MONTHLY \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Viewing the schedule for a month: scheduleMonthly ]\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists out your schedule and your notes for the specified month. \\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: scheduleMonthly YYYY-MM\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- scheduleMonthly 2020-10\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- scheduleMonthly 2019-09\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DO_WITHIN_PERIOD \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a \u0027do-within-a-period\u0027 task: /between ]\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdding tasks that need to be done within a certain period to the list.\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: TASK_DESCRIPTION /between YYYY-MM-DD and YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- collect book /between 2019-12-04 and 2019-12-05\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- order food /between 2017-12-04 and 2017-12-05 \\n\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TENTATIVE_EVENT_ADD \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a Tentative Event base on a keyword: tentative ]\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCreating a tentative event with description of the event.\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: tentative TASK_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Tentative return book\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tKey in all possible time slots, ends input with a keyword: /\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: YYYY-MM-DD HH:MM:SS-HH:MM:SS\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t        YYYY-MM-DD HH:MM:SS-HH:MM:SS\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t        /\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- 2019-08-04 05:04:03-01:01:01\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t  2019-09-18 07:11:44-10:10:10\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t  /\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEnsure your creation with a keyword: yes\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: yes\\n\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TENTATIVE_EVENT_CONFIRM \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Confirming a Tentative Event base on a keyword: confirm ]\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tConfirming one if the timeslots of the exact tentative event with its INDEX.\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: confirm INDEX\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- confirm \\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tChoosing which time slot to confirm with its SEQUENCE_NUMBER\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: SEQUENCE_NUMBER\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- 1\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEnsure your confirmation with a keyword: yes\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: yes\\n\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TASKS_EDIT \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Editing a task: edit ]\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdit task with task\u0027s INDEX.\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: edit INDEX\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit 1    \\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tChoose time/description/both to edit\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: time\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- 2019-10-10 10:10:10\\n\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String FIXED_DURATION_TASK \u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a task with a fixed duration: /require ]\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdding a task takes a fixed amount of time but does not have a fixed start/end time \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"to the list.\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: TASK_DESCRIPTION /require FIXED_AMOUNT_OF_TIME\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- reading the sales report /require 2 hours\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- project meeting /require 4 hours\\n\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CATEGORIZE_TASKS \u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Categorize tasks: CATEGORY_NAME ]\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tList out all the categorized tasks in the category task list.\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: CATEGORY_NAME list\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- event list\\n\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- deadline list\\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- todo list\\n\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CALENDAR_VIEW_MONTHLY \u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View current month in a calendar view: calendar monthly view ]\\n\""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tShows the dates and current month in a calendar view.\\n\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDates with tasks will be demarcated with a \u0027 * \u0027.\\n\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCurrent date will be demarcated between \u0027 | \u0027.\\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: calendar monthly view\\n\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CALENDAR_VIEW_ANNUAL \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View current year in a calendar view: calendar annual view ]\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tShows the dates and months in a calendar view.\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDates with tasks will be demarcated with a \u0027 * \u0027.\\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCurrent date will be demarcated between \u0027 | \u0027.\\n\""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: calendar annual view\\n\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String UNDONE \u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Set a \u0027done\u0027 task as undone: undone ]\\n\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tMarks a task as undone.\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: undone TASK_NUM\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- undone 1\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- undone 6\\n\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DONE_LIST \u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ See all the tasks that are marked as done: done list ]\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tList out all the tasks that are done in a list\\n\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: done list\\n\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DO_AFTER_TASK \u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a do-after task: /after ]\\n\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdd a follow-up task when a task is marked as done.\\n\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: FOLLOW_UP_TASK /after COMPLETED_TASK\\n\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\n\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- return book /after read book\\n\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SNOOZE \u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Snooze a task based on a keyword: reschedule ]\\n\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSnooze a task\u0027s timeline with task\u0027s INDEX\\n\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: reschedule INDEX\\n\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- reschedule 1\\n\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tKey in your new timeline with the DATA\\n\""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: YYYY-MM-DD HH:MM:SS\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- 1998-04-05 08:09:14\\n\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEnsure your rescheduling with a keyword: yes\\n\""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\n\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Yes\\n\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String RESCHEDULE \u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Reschedule a task based on a keyword: snooze ]\\n\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tReschedule a task\u0027s timeline with task\u0027s INDEX\\n\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: snooze INDEX\\n\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- snooze 1    \\n\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tKey in how much time you want to prolong\\n\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat:  Y M D H\\n\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- 1 2 3 4\\n\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String RECURRING_TASK \u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Create recurring tasks based on a keyword: weekly/monthly/yearly ]\\n\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tA recurring task has any of the keywords.\\n\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: TASK_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- event weekly seminar /at 2019-10-10 10:10:10-11:11:11\\n\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: done INDEX\\n\""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- done 1\\n\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String UNDONE_LIST \u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ See all the tasks that are marked as undone: undone list ]\\n\""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tList out all the tasks that are undone in a list\\n\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: undone list\\n\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String TAGGING \u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Tagging tasks: #TAG_NAME ]\\n\""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tTag tasks using the hashtag, and see the same tagged tasks in a list\\n\""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: #TAG_NAME\\n\""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tTo tag:\\n\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- todo running #fit\\n\""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- event basketball match #fit /at 2019-04-05 12:00:00-14:00:00\\n\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- deadline claim voucher #food /by 2019-04-03 13:00:00\\n\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tTo see the tasks with the same tags:\\n\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- #fit\\n\""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- #food\\n\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String UNDO_COMMANDS \u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Undo commands: undo ]\\n\""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tUndo previous tasks commands\\n\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: undo\\n\""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tPrevious task commands that you can undo:\\n\""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- EventCommand\\n\""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- TodoCommand\\n\""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- DeadlineCommand\\n\""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- TentativeEventCommand\\n\""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- DoneCommand\\n\""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- DeleteCommand\\n\""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- DoAfterCommand\\n\""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- TimeBoundCommand\\n\""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- FixDurationCommand\\n\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- ConfirmTentativeCommand\\n\""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- UndoneCommand\\n\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PERIOD_NOTE_ADD \u003d"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a note to a particular day/week/month: addNote ]\\n\""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds a note to the note section of the specified day, week or month. \\n\""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (day):  addNote day YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (week): addNote week YYYY-MM-DD \\n\""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (month): addNote month YYYY-MM\\n\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details: \\n\""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The date specified in Format (week) above has to be a Monday.\\n\""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for adding a note (to a particular week):\\n\""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command in the format specified above.\\n\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\ta. Eg. addNote week 2019-10-14\\n\""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t3. Type in the note you want to add on that new line.\\n\""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\ta. Eg. tons of homework for this week :(\\n\""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t4. Press ENTER.\\n\""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples for command format: \\n\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Adding a note to a particular day: addNote day 2020-10-11\\n\""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Adding a note to a particular week: addNote week 2019-10-14\\n\""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Adding a note to a particular month: addNote month 2019-01\\n\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PERIOD_NOTE_EDIT \u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Editing a note for a particular day/week/month: editNote ]\\n\""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdits an existing note in the note section of the specified day, week or month. \\n\""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (day):  editNote day YYYY-MM-DD NOTE_NUMBER\\n\""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (week): editNote week YYYY-MM-DD NOTE_NUMBER\\n\""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (month): editNote month YYYY-MM NOTE_NUMBER\\n\""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details: \\n\""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- NOTE_NUMBER starts from index 1.\\n\""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The date specified in Format (week) above has to be a Monday.\\n\""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for editing a note:\\n\""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command in the format specified above.\\n\""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\ta. Eg. editNote week 2019-10-14 1\\n\""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t3. Type in the edited version of the note on that new line.\\n\""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\ta. Eg. less homework for this week :)\\n\""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t4. Press ENTER.\\n\""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples for command format: \\n\""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Editing a note for a particular day: editNote day 2020-10-11 1\\n\""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Editing a note for a particular week: editNote week 2019-10-14 3\\n\""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Editing a note for a particular month: editNote month 2019-01 5\\n\";"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PERIOD_NOTE_DELETE \u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Deleting a note for a particular day/week/month: deleteNote ]\\n\""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes an existing note in the note section of the specified day, week or month. \\n\""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (day):  deleteNote day YYYY-MM-DD NOTE_NUMBER\\n\""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (week): deleteNote week YYYY-MM-DD NOTE_NUMBER\\n\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (month): deleteNote month YYYY-MM NOTE_NUMBER\\n\""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details: \\n\""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- NOTE_NUMBER starts from index 1.\\n\""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The date specified in Format (week) above has to be a Monday.\\n\""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for deleting a note (assigned to a day):\\n\""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command in the format specified above.\\n\""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\ta. Eg. deleteNote week 2019-10-14 1\\n\""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples for command format: \\n\""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Deleting a note that was assigned to a particular day: deleteNote day 2020-10-11 1\\n\""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Deleting a note that was assigned to a particular week: deleteNote week 2019-10-14 3\\n\""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Deleting a note that was assigned to a particular month: deleteNote month 2019-01 5\\n\";"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PERIOD_NOTE_LIST \u003d"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Listing out all notes for a particular day/week/month: listNote ]\\n\""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists out all the notes in the note section of the specified day, week or month. \\n\""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (day):  listNote day YYYY-MM-DD \\n\""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (week): listNote week YYYY-MM-DD \\n\""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat (month): listNote month YYYY-MM \\n\""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details: \\n\""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The date specified in Format (week) above has to be a Monday.\\n\""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for listing out notes (for a particular day):\\n\""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command in the format specified above.\\n\""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\ta. Eg. listNote day 2020-09-11 \\n\""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples for command format: \\n\""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Listing the notes for a particular day: \""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"listNote day 2020-10-23\\n\""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Listing the notes for a particular week: \""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"listNote week 2019-10-14\\n\""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Listing the notes for a particular month: \""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"listNote month 2019-01\\n\";"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //-------------------------------------------------places--------------------------------------------"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_PLACES_PAGE \u003d \"********** Places page: places **********\\n\""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"A function to locate places and rooms in NUS School of Computing.\\n\""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"In the places page, you can search for a place that you want to find or you can add and \\n\""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"delete places and locations to the current list. \\n\""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"How to get to places page: \\n\""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- Type in the command \\\u0027places\\\u0027 in the main menu page and press ENTER.\\n\""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- You can only go to the places page from the main menu.\\n\";"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PLACES_ADD \u003d"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adds and stores a new place and location. ]\\n\""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: add-room,location\\n\""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for adding a place:\\n\""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command add-room,location in the above format. Eg. LT19,COM2 Level 1\\n\""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t3. Alternatively, you can input add or the index of the add command, 1.\\n\""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t4. The system will prompt you to enter the room and location in this format, \""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"room,location.\\n\";"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PLACES_FIND \u003d"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Finding a place in NUS School of Computing (SOC): find-place ]\\n\""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tGives you the location of a specific place in SOC.\\n\""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat : find-place\\n\""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details: \\n\""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- place is the name of the place you want to find.\\n\""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for finding a place:\\n\""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command in the format specified above. Eg. find-LT19\\n\""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t3. Alternatively, type in find or the index for find command, 2 and press ENTER.\\n\""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t4. Press ENTER.\\n\""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t5. The system will prompt you to enter the place you wish to find.\\n\";"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PLACES_LIST \u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Listing all places in NUS School of Computing (SOC): list ]\\n\""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists out all places in SOC.\\n\""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat :  list\""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for list command:\\n\""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in list and press ENTER.\\n\""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Alternatively, type the index of list command, 4 and press ENTER.\\n\";"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PLACES_DELETE \u003d"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Deleting a place in the list: delete-place ]\\n\""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes an existing place list of places.\\n\""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat :  delete-place\\n\""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details: \\n\""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- place is the name of the place you want to delete\\n\""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for deleting a place:\\n\""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in the command in the format specified above. Eg. delete-LT19\\n\""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Press ENTER.\\n\""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t3. Alternatively, you can input delete or the index of the delete command, 3.\\n\""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t4. The system will prompt you to enter the name of the room you wish to delete.\\n\";"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String PLACES_UNDO \u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Undo previous places command: undo]\\n\""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tUndo the previous places command.\\n\""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCommands that can be undone:\\n\""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add\\n\""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete\\n\""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat :  undo\""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps for undo command:\\n\""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in undo and press ENTER.\\n\""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. Alternatively, type the index of undo command, 5 and press ENTER.\\n\";"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //------------------------------------------------------notes----------------------------------"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_NOTES_PAGE \u003d \"********** Notes page: notes **********\\n\""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Brings you to your notes page from the main menu page. \\n\""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"In your notes page, you can specify your goal and also record information about your modules. \""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"How to go to your notes page: \\n\""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- Type in the command \\\u0027notes\\\u0027 or \\\u00279\\\u0027 in the main menu page and press ENTER.\\n\""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- You can only go to the notes page from the main menu.\\n\";"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES_VIEW \u003d"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View goal and list of modules: view ]\\n\""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists out your goal and the list of modules you have added.\\n\""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: view\\n\";"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES_EDIT_GOAL \u003d"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Edit goal: edit /n ]\\n\""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdits your existing goal to the new goal you specify.\\n\""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: edit /n NEW_GOAL\\n\""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and NEW_GOAL is optional.\\n\""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples:\\n\""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit /n i want to be a rock star\\n\""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit /nto become a CEO\\n\";"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES_ADD_MODULE \u003d"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Add a module: add /n ]\\n\""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds a module to your note page.\\n\""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: add /n MODULE_NAME\\n\""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and MODULE_NAME is optional.\\n\""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tConstraints:\\n\""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- You cannot add a module with the same name as an existing module.\\n\""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- You have the freedom to name your module whatever you want  \""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"ie. the MODULE_NAME does not need to be what it is called by NUS.\\n\""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add /n annoying module\\n\""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add /n cs1231\\n\""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add /nSoftware Engineering \u0026 Object-Oriented Programming \";"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES_DELETE_MODULE \u003d"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Delete a module: delete /n ]\\n\""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes a module from your note page.\\n\""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: delete /n MODULE_NAME\\n\""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and MODULE_NAME is optional.\\n\""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete /n annoying module\\n\""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete /n cs1231\\n\""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete /nSoftware Engineering \u0026 Object-Oriented Programming\\n\";"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_MODULE_PAGE \u003d \"********** Module page: module **********\\n\""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Brings you to a module page, which contains the notes for that module, for the module you specify. \\n\""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"The notes for the module are grouped into 2 categories, namely assessments and miscellaneous.\\n\""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Format: module /n MODULE_NAME\\n\""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Format details:\\n\""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- The white space between /n and MODULE_NAME is optional.\\n\""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Constraints:\\n\""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- You can only go to a module page from the note page.\\n\""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t-- ie. You have to first go to your note page and then type in module /n MODULE_NAME \\n\""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t   in your note page to be able to go to a module page.\\n\""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Examples: \\n\""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- module /n annoying module\\n\""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- module /n cs1231\\n\""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- module /nSoftware Engineering \u0026 Object-Oriented Programming\\n\";"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_VIEW \u003d"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View the module\u0027s notes: view ]\\n\""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tShows you the notes you have for the module.\\n\""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: view\\n\";"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_EDIT_MODULE_NAME \u003d"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Edit the module\u0027s name: edit mod /n ]\\n\""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdit the module\u0027s name: edit mod /n\\n\""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdits the name of the module.\\n\""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: edit mod /n NEW_NAME\\n\""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and NEW_NAME is optional.\\n\""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit mod /n A+ module\\n\""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit mod /n CS1231\\n\""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit mod /nSoftware Engineering \u0026 Object-Oriented Programming\\n\";"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_ADD_ASSMT \u003d"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Add an assessment: add assmt /n /a ]\\n\""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds an assessment to the module.\\n\""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: add assmt /n NAME /a WEIGHTAGE\\n\""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and NAME is optional.\\n\""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /a and WEIGHATGE is optional.\\n\""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add assmt /n group project /a 47\\n\""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add assmt /npresentation /a20\\n\";"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_EDIT_ASSMT \u003d"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Edit an assessment name: edit assmt /n /a ]\\n\""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdits the name of the specified assessment.\\n\""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: edit assmt /n INDEX /a NEW_NAME\\n\""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and INDEX is optional.\\n\""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /a and NEW_NAME is optional.\\n\""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- INDEX refers to the index of the assessment in the list of \""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"assessments when you use the view command.\\n\""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit assmt /n 4 /a project\\n\""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit assmt /n2 /afinal exam\\n\";"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_EDIT_WEIGHTAGE \u003d"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Edit an assessment\u0027s weightage: edit weight /n /a ]\\n\""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdits the weightage of the specified assessment.\\n\""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: edit weight /n INDEX /a NEW_WEIGHTAGE\\n\""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and INDEX is optional.\\n\""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /a and WEIGHTAGE is optional.\\n\""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- INDEX refers to the index of the assessment in the list of assessments \""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"when you use the view command.\\n\""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- WEIGHTAGE is in percentage eg. if you specify it as 30, it will be 30%\\n\""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit weight /n 4 /a 30\\n\""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit weight /n2 /a49\\n\";"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_DELETE_ASSMT \u003d"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Delete an assessment: delete assmt /n ]\\n\""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes the specified assessment.\\n\""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: delete assmt /n INDEX\\n\""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and INDEX is optional.\\n\""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- INDEX refers to the index of the assessment in the list of assessments when \""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"you use the view command.\\n\""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete assmt /n 4\\n\""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete assmt /n2\\n\";"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_ADD_MSC \u003d"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Add a miscellaneous information: add msc /n ]\\n\""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds a miscellaneous information to the module.\\n\""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: add msc /n DESCRIPTION\\n\""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and DESCRIPTION is optional.\\n\""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add msc /n a heavy module\\n\""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add msc /nwear covered shoes for lab\\n\";"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_EDIT_MSC \u003d"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Edit a miscellaneous information: edit msc /n /a ]\\n\""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tEdits the specified miscellaneous information.\\n\""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: edit msc /n INDEX /a NEW_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and INDEX is optional.\\n\""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /a and NEW_DESCRIPTION is optional.\\n\""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- INDEX refers to the index of the assessment in the list of miscellaneous \""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"information when you use the view command.\\n\""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit msc /n 4 /a no webcast for this mod\\n\""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- edit msc /n2 /alecturer starts lecture exactly at 6pm\\n\";"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_DELETE_MSC \u003d"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Delete a miscellaneous information: delete msc /n ]\\n\""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes the specified miscellaneous information.\\n\""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: delete msc /n INDEX\\n\""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat details:\\n\""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- The white space between /n and INDEX is optional.\\n\""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- INDEX refers to the index of the assessment in the list of \""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"miscellaneous information when you use the view command.\\n\""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExamples: \\n\""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete msc /n 4\\n\""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete msc /n2\\n\";"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_VIEW_COMMANDS \u003d"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View the list of possible commands for the module page: commands ]\\n\""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tShows you the possible things you can do on the module page.\\n\""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: commands\\n\";"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_ESC \u003d"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Go back to the note page: esc ]\\n\""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tBrings you back to the note page from the module page.\\n\""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: esc\";"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES_VIEW_COMMANDS \u003d"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View the list of possible commands for the notes page: commands ]\\n\""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tShows you the possible things you can do on the notes page.\\n\""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: commands\\n\";"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String NOTES_ESC \u003d"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Go back to the main page: esc ]\\n\""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tBrings you back to the main page from the note page.\\n\""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: esc\";"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //---------------------------------------------------contacts---------------------------"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_CONTACTS_PAGE \u003d \"********** Contacts page: contacts **********\\n\""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Function to store contacts.\\n\""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Enter the contacts page.\\n\""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Format: contacts\\n\""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- contacts\\n\";"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CONTACT_ADD \u003d"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a new contact name and number ]\\n\""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tAdds and stores a new name and number.\\n\""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: add name,number\\n\""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- Add jason,96251922\\n\";"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CONTACT_FIND \u003d"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Finding a contact ]\\n\""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tList out the contact names that have the keyword.\\n\""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: find name\\n\""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- find Jason\\n\";"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CONTACT_LIST \u003d"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Listing all contacts ]\\n\""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tLists all contacts.\\n\""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: list\\n\""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- list \\n\";"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CONTACT_DELETE \u003d"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Deleting a contact in the list ]\\n\""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDeletes an existing contact in the list.\\n\""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: find name\\n\""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete Jason\\n\";"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CONTACT_COMMANDS \u003d"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ View commands in Contact page ]\\n\""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tView commands in contact page.\\n\\n\""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: commands\\n\\n\""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- commands\\n\";"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private  static final String CONTACT_UNDO \u003d"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Undo previous contact command ]\\n\""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tUndo the previous contact command.\\n\""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCommands that can be undone:\\n\""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add\\n\""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete\\n\""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat :  undo\\n\";"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //--------------------------------------CAP-----------------------------------------------"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_CAP_PAGE \u003d \"********** CAP page: cap **********\\n\""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"A function to calculate the CAP of modules and to store module\u0027s sem number, code, credit and grade.\\n\""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Format: cap\\n\""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Example:\\n\""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- cap\\n\";"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CAP_ADD_MODULE \u003d"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Adding a new module\u0027s sem number, code, credit, and grade ]\\n\""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCall out the add feature and input the required module information. There are 3 ways\\n\""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tof calling out add feature:\\n\""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t1st way: \\n\""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: 1\\n\""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: semester number,module\u0027s code,module\u0027s credit,module\u0027s grade\\n\""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t2nd way: \\n\""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: add\\n\""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: semester number,module\u0027s code,module\u0027s credit,module\u0027s grade\\n\""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t3rd way:\\n\""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: add semester number,module\u0027s code,module\u0027s credit,module\u0027s grade\\n\";"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CAP_FIND_MODULE \u003d"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Finding a module(s) ]\\n\""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFinds all the modules by module\u0027s code. There are 2 ways of calling out the find feature:\\n\""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t1st way: \\n\""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: 2\\n\""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: module\u0027s code\\n\""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t2nd way: \\n\""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: find\\n\""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: module\u0027s code\\n\""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t3rd way:\\n\""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: find module\u0027s code\\n\";"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CAP_LIST_MODULE \u003d"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Listing modules ]\\n\""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCall out the list feature\\n\""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t1st way: \\n\""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: 4\\n\""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: semester\u0027s number\\n\""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t2nd way: \\n\""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: list\\n\""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: semester\u0027s number\\n\""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t3rd way:\\n\""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: list semester\u0027s number\\n\";"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CAP_DELETE_MODULE \u003d"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Deleting a module in the list ]\\n\""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t1st way: \\n\""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: 3\\n\""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: module\u0027s code\\n\""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t2nd way: \\n\""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: delete\\n\""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 2: module\u0027s code\\n\""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t3rd way:\\n\""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: add semester number,module\u0027s code,module\u0027s credit,module\u0027s grade\\n\";"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String CAP_COMMANDS \u003d"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Show commands in CAP Page ]\\n\""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tShows what commands can do in CAP page.\\n\""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t1st way: \\n\""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: 5\\n\""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t2nd way: \\n\""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tStep 1: commands\\n\";"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //------------------------------------------expenses-------------------------------"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_EXPENSES_PAGE \u003d \"********** Expenses page: expenses **********\\n\""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Brings you to your expenses page from the main menu page.\\n\""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"In your expenses page, you can record your expenses to help them manage \""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"their finances and see what they spend their money on.\\n\""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"How to go to your expenses page: \\n\""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- Type in the command \\\u0027expenses\\\u0027 in the main menu page and press ENTER.\\n\""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t- You can only go to the note page from the main menu.\\n\";"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EXP_LIST \u003d \"\\t[ List all existing expenses: list ]\\n\""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tLists out your expenses you have added.\\n\""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: list\\n\""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t- list\\n\";"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EXP_FIND \u003d \"\\t[ Finding the record of expenses on a certain date: find DATE ]\\n\""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFinds all expenses recorded on a specific date.\\n\""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: find DATE\\n\""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t- find 2019-09-09\\n\";"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EXP_ADD \u003d \"\\t[ Adding a new expense: add ]\\n\""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tAdds and store the new expenses to a list.\\n\""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: add ITEM, PRICE, DATE\\n\""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t- add bread, $4, 2019-09-09\\n\";"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EXP_DELETE \u003d \"\\t[ Delete a certain expense: delete expense ]\\n\""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tDeletes an expense from your expenses list.\\n\""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: delete ITEM\\n\""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tAlternative format: delete\\n\""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tSteps for deleting an expense via index:\\n\""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t1. Type the command delete and press ENTER.\\n\""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t2. Type the index of the expense you want to delete and press ENTER.\\n\""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tExample: \\n\""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t- delete bread\\n\";"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private  static final String EXP_UNDO \u003d"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Undo previous expense command: undo ]\\n\""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tUndo the previous expenses command.\\n\""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCommands that can be undone:\\n\""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tadd\\n\""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\tdelete\\n\""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: undo\\n\";"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //----------------------------------specialisation-----------------------------"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_SPECIALISATION_PAGE \u003d \"********** Specialization page: spec **********\\n\""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"Brings you to your specialization page from the main menu page. This specialization \\n\""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"page helps you be clearer of what specialization you can take in your course and record \\n\""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"the technical elective modules taken to see the progress of achieving that specialization.\\n\";"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SPEC_LIST \u003d \"\\t[ List all specialization and Technical Electives ]\\n\""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tShows all possible specializations and their respective modules. Number of MCs completed\\n\""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tout of 20 will be shown too. (20MCs are needed to complete a specialization)\\n\""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: list\\n\""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tExample:\\n\""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t- list\\n\";"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String SPEC_COMPLETE \u003d \"\\t[ Key in completed electives ]\\n\""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tAllow users to mark their chosen elective as completed and record it under the \""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"specific specialization.\\n\""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: complete\\n\""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tSteps for recording a completed technical elective module:\\n\""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t1. Type the command complete and press ENTER.\\n\""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t2. You will be prompted with the question \\\"Which specialization number is your module under?\\\"\\n\""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t3. Type the index of the specialization and press ENTER.\\n\""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t4. You will be prompted with the question \\\"Which module have you completed?\\\"\\n\""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\t\\t5. Type the index of the module completed and press ENTER.\\n\";"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //--------------------------------------password-----------------------------"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String PASSWORD_PLANNER_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"********** Password to enter the planner **********\\n\""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"The password is a security measure to prevent other users from accessing the user\u0027s \\n\""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Gazeeebo without his permission. Default password is jjjry.\\n\""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Enter the correct password set\\n\""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Format: Password_text\\n\""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Example:\\n\""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t- jjjry\\n\""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String PASSWORD_CHANGE_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"********** Change Password based on keyword: change password ********** \\n\""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Change Password. Feature can be called in the main page.\\n\""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Step 1: Input change password\\n\""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Step 2: Input old password.\\n\""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Step 2: Input new password.\\n\""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //----------------------------module planner-----------------------------------"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HEADER_MODULE_PLANNER_PAGE \u003d \"********** Module Planner Page **********\\n\""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"The Module Planner block mainly helps users to create and manage a 4-year module \""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"plan for studying life in NUS\\n\""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"How to get to the Module Planner page:\\n\""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"\\t- From main page, type in command \u0027moduleplanner\u0027, And then system will drops \""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"into Module Planner session\\n\""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"\\t- You could only enter the module planner page from the main page\\n\";"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER_PLAN \u003d"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Display the module plan table and showcase suggestions: plan ]\\n\""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tDescription: showcase the module plan table\\n\""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tFormat: plan\\n\""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\tIf it is the first time user is using this feature, the system showcase default module plan \\n\""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"\\ttable which is the CEG recommended module plan for AY18/19 intake.\\n\";"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER_ADD \u003d"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Add module to specific semester column: add ]\\n\""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDescription: Add a new module to any column of the study plan table\\n\""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: add module_code to semester_number\\n\""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: add CS4223 to 5\\n\""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps to add a command:\\n\""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in command add module_code to semester_number and press ENTER\\n\""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. System will showcase the module is successfully added.\\n\""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- If adding is not successful, an IOException message will be displayed\\n\";"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER_DELETE \u003d"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Delete module from specific semester column: delete ]\\n\""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDescription: delete an existing module from any column of the study plan table\\n\""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: delete module_code from semester_number\\n\""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: delete CS4223 from 5\\n\""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps to add a command:\\n\""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in command delete module_code from semester_number and press ENTER\\n\""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. System will showcase the module is successfully deleted.\\n\""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- If deleting is not successful, an IOException message will be displayed\\n\";"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER_SHIFT \u003d"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Shift module from specific semester column to another column: shift ]\\n\""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDescription: shift an existing module from any column to another column of \""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"the study plan table\\n\""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: shift module_code to semester_number\\n\""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: shift CS4223 to 5\\n\""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tSteps to add a command:\\n\""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t1. Type in command shift module_code to semester_numberand press ENTER\\n\""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t2. System will showcase the module is successfully shifted.\\n\""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t\\t- If shifting is not successful, an IOException message will be displayed\\n\";"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER_PREREQ \u003d"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Show a prerequisite tree of a module: prerequisite ]\\n\""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tDescription: showcase all prerequisite requirements for a specific module.\\n\""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: prerequisite Module_Code\\n\""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tExample: prerequisite CS2040C\";"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE_PLANNER_UNDO \u003d"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            \"\\t[ Undo previous module planner command: undo ]\\n\""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tUndo the previous module planner command.\\n\""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tCommands that can be undone:\\n\""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- add\\n\""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- delete\\n\""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\t\\t- shift\\n\""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"\\tFormat: undo\\n\";"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //--------------------------------exiting the program----------------------------------"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String BYE_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + \"********** Exiting the program: bye **********\\n\""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Exits the program.\\n\""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \"Format: bye\\n\""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //-----------------------------pages--------------------------------------"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String HELP_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_HELP_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HELP_FULL + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HELP_INDIV + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String TASKS_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_TASKS_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + TODO + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + DEADLINE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + EVENT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + DELETE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + DONE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + TASKS_FIND + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + SCHEDULE_DAILY + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + SCHEDULE_WEEKLY + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + SCHEDULE_MONTHLY + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + DO_WITHIN_PERIOD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + TENTATIVE_EVENT_ADD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + TENTATIVE_EVENT_CONFIRM + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + TASKS_EDIT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + FIXED_DURATION_TASK + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CATEGORIZE_TASKS + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CALENDAR_VIEW_MONTHLY + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CALENDAR_VIEW_ANNUAL + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + UNDONE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + DONE_LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + DO_AFTER_TASK + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + SNOOZE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + RESCHEDULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + RECURRING_TASK + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + UNDONE_LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + TAGGING + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + UNDO_COMMANDS + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PERIOD_NOTE_ADD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PERIOD_NOTE_EDIT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PERIOD_NOTE_DELETE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PERIOD_NOTE_LIST + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String PLACES_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_PLACES_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PLACES_ADD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PLACES_FIND + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PLACES_LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PLACES_DELETE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + PLACES_UNDO + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String NOTES_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_NOTES_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + NOTES_VIEW + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + NOTES_EDIT_GOAL + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + NOTES_ADD_MODULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + NOTES_DELETE_MODULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + NOTES_VIEW_COMMANDS + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String MODULE_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_MODULE_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_VIEW + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_EDIT_MODULE_NAME + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_ADD_ASSMT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_EDIT_ASSMT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_EDIT_WEIGHTAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_DELETE_ASSMT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_ADD_MSC + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_EDIT_MSC + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_DELETE_MSC + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_VIEW_COMMANDS + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_ESC + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + NOTES_ESC + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String CONTACTS_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_CONTACTS_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CONTACT_ADD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CONTACT_FIND + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CONTACT_LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CONTACT_DELETE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CONTACT_UNDO + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CONTACT_COMMANDS + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String CAP_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_CAP_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CAP_ADD_MODULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CAP_FIND_MODULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CAP_LIST_MODULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CAP_DELETE_MODULE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + CAP_COMMANDS + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String EXPENSES_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_EXPENSES_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + EXP_LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + EXP_FIND + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + EXP_ADD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + EXP_DELETE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + EXP_UNDO + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String SPECIALIZATION_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_SPECIALISATION_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + SPEC_LIST + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + SPEC_COMPLETE + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static final String MODULE_PLANNER_PAGE \u003d SEPARATOR_PAGE"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + HEADER_MODULE_PLANNER_PAGE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_PLANNER_PLAN + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_PLANNER_ADD + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_PLANNER_DELETE + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_PLANNER_SHIFT + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_PLANNER_PREREQ + SEPARATOR_COMMAND"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            + MODULE_PLANNER_UNDO + SEPARATOR_PAGE;"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 1200
    }
  },
  {
    "path": "src/main/java/gazeeebo/logger/LogCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class LogCenter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Set up the logger."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param logger Message that is logged."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void setUpLogger(Logger logger) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogManager.getLogManager().reset();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ConsoleHandler ch \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ch.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        logger.addHandler(ch);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            FileHandler fh \u003d new FileHandler(\"GazeeeboLogger.log\", true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fh.setLevel(Level.WARNING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.WARNING, \"Can\u0027t log to file\", e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 37
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Assessment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * An assessment object that can be added to a module note."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Assessment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Must be a positive number. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public int weightage; //as a percentage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Assessment(String name, int percentage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.weightage \u003d percentage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return name + \" (\" + weightage + \"%)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 23
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/GeneralNotePage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * A note page that can record a goal and module information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class GeneralNotePage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static String goal \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EMPTY_DESCRIPTION \u003d \"The description of the command cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the goal and the list of existing module names."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void viewGeneralNotePage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Goal: \" + goal);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Modules:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i + 1) + \". \" + modules.get(i).name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the goal to what the user specifies."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param userGoal the new goal the user want to use"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editGoal(String userGoal) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (userGoal.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        goal \u003d userGoal.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully updated your goal to:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(goal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a module to the general note page. Prevents duplicate modules from being added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param moduleName the module that the user wants to add"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addModule(String moduleName) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (moduleName.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(moduleName)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"You already have a module with the same name. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        + \"Please add a module with a different name.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        modules.add(new Module(moduleName));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully added this module:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(moduleName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes a module and all its content, if it exists, from the general note page."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param moduleName the module that the user wants to delete"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command inputted by the user is in the wrong format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteModule(String moduleName) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (moduleName.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m : modules) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(moduleName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                modules.remove(m);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"Okay we have successfully deleted this module:\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(moduleName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Sorry there is no such module.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 87
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deals with all the commands related to the module notes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cAssessment\u003e assessments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cString\u003e miscellaneousInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EMPTY_DESCRIPTION \u003d \"The description of the command cannot be empty.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Constructor that creates a module given the module name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param name of the module being created"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Module(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.assessments \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.miscellaneousInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Prints out the module\u0027s notes: name + assessments + miscellaneous information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void viewModule() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"[ \" + name + \" ]\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Assessments:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c assessments.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i + 1) + \". \" + assessments.get(i).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.print(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Miscellaneous:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (int i \u003d 0; i \u003c miscellaneousInfo.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println((i + 1) + \". \" + miscellaneousInfo.get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the name of the module to that specified by the user if the name is not already used."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * The name of the module can be changed to the name that is currently being used for the module."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param newName the new name the user wants to edit the existing name of the module to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editName(String newName) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (newName.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m: GeneralNotePage.modules) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(newName) \u0026\u0026 !newName.equals(this.name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.out.println(\"You already have a module with the same name. Please use a different name.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        name \u003d newName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully updated the module name to:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //ASSESSMENT FEATURES-------------------------------------------------------------------------"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds an assessment to the module being viewed/edited."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param assmt contains the name and weightage of the assessment"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addAssessment(String assmt) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (assmt.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] assmtDetails \u003d assmt.split(\" /a\", 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (assmtDetails[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Please input a weightage.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input the command in the format \\\u0027add assmt /n NAME /a WEIGHTAGE\\\u0027.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int percentage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            percentage \u003d Integer.parseInt(assmtDetails[1].trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (percentage \u003c 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Please input a positive number for the weightage.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a number for the weightage.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Assessment newAssessment \u003d new Assessment(assmtDetails[0], percentage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assessments.add(newAssessment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully added this assessment:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(newAssessment.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the name of an existing assessment."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param assmtDetails contains the index and the new assessment name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty or the index is invalid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editAssessmentName(String assmtDetails) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (assmtDetails.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] details \u003d assmtDetails.split(\" /a\", 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (details[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Please input a new assessment name.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input the command in the format \\\u0027edit assmt /n INDEX /a NEW_NAME\\\u0027.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndOldName \u003d checkIfValidIndexAssmt(details[0].trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d Integer.parseInt(indexAndOldName[0]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String oldName \u003d indexAndOldName[1];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert oldName !\u003d null : \"Bug in notes.Module: editAssessment: oldName\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert assmtNum !\u003d -1 : \"Bug in notes.Module: editAssessment: assmtNum\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assessments.get(assmtNum).name \u003d details[1].trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully changed the name of \\\"\" + oldName + \"\\\" to:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(details[1].trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Checks if the index specified is in the assessments list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param index the index to be checked"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return String[] which contains the valid index and the name of the assessment that corresponds to that index"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the index is invalid"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String[] checkIfValidIndexAssmt(String index) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String assmtName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assmtNum \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                assmtName \u003d assessments.get(assmtNum).toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Sorry there is no such index.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a number for the index.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return new String[]{Integer.toString(assmtNum), assmtName};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits the weightage of the assessment corresponding to the index specified by the user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param assmtDetails contains the index and the new weightage"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty or if the index is invalid"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editAssessmentWeightage(String assmtDetails) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (assmtDetails.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] details \u003d assmtDetails.split(\" /a\", 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (details[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Please input a weightage.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input the command in the format\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    + \" \\\u0027edit weight /n INDEX /a NEW_WEIGHTAGE\\\u0027.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndOldName \u003d checkIfValidIndexAssmt(details[0].trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d Integer.parseInt(indexAndOldName[0]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String oldName \u003d indexAndOldName[1];"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert oldName !\u003d null : \"Bug in notes.Module: editAssessment: oldName\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert assmtNum !\u003d -1 : \"Bug in notes.Module: editAssessment: assmtNum\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assessments.get(assmtNum).weightage \u003d Integer.parseInt(details[1].trim());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (assessments.get(assmtNum).weightage \u003c 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Please input a positive number for the weightage.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a number for the weightage.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully changed the weightage to:\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(details[1].trim() + \"%\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes an assessment corresponding to the index specified by the user."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param index the index of the assessment to be deleted"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty or the index is invalid"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteAssessment(String index) throws DukeException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (index.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndAssmtToDelete \u003d checkIfValidIndexAssmt(index);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int assmtNum \u003d Integer.parseInt(indexAndAssmtToDelete[0]);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert assmtNum !\u003d -1 : \"Bug in notes.Module: deleteAssessment: assmtNum\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assessments.remove(assmtNum);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully deleted this assessment:\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(indexAndAssmtToDelete[1]);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //MISCELLANEOUS INFORMATION FEATURES-----------------------------------------------------------------"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Adds a miscellaneous information to the module being edited/viewed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param msc the miscellaneous information to be added"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void addMiscellaneous(String msc) throws DukeException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (msc.isEmpty()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        miscellaneousInfo.add(msc);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully added this miscellaneous information:\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(msc);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Checks if the index specified is a valid index in the miscellaneous information list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param index the index to be checked"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return String[] which contains the valid index and the name of the miscellaneous information"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *     that corresponds to that index"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the index is invalid"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private String[] checkIfValidIndexMsc(String index) throws DukeException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int mscNum;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String mscName;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            mscNum \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                mscName \u003d miscellaneousInfo.get(mscNum);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Sorry there is no such index.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a number for the index.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return new String[]{Integer.toString(mscNum), mscName};"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Edits a miscellaneous information corresponding to the index specified by the user."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param mscDetails contains the index and updated miscellaneous information"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty or the index is invalid"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void editMiscellaneous(String mscDetails) throws DukeException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (mscDetails.isEmpty()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] details \u003d mscDetails.split(\" /a\", 2);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (details[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                throw new DukeException(\"Please input a new miscellaneous information.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input the command in the format \\\u0027edit msc /n INDEX /a NEW_DESCRIPTION\\\u0027.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndMscToEdit \u003d checkIfValidIndexMsc(details[0].trim());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int mscNum \u003d Integer.parseInt(indexAndMscToEdit[0]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String mscToEdit \u003d indexAndMscToEdit[1];"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscToEdit !\u003d null : \"Bug in notes.Module: editMiscellaneous: mscToEdit\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscNum !\u003d -1 : \"Bug in notes.Module: editMiscellaneous: mscNum\";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        miscellaneousInfo.set(mscNum, details[1].trim());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully changed \\\"\" + mscToEdit + \"\\\" to:\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(details[1].trim());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Deletes a miscellaneous information corresponding to the index specified by the user."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param index the index of the miscellaneous information to be deleted"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the command\u0027s description is empty or the index is invalid"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void deleteMiscellaneous(String index) throws DukeException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (index.isEmpty()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] indexAndMscToDelete \u003d checkIfValidIndexMsc(index);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int mscNum \u003d Integer.parseInt(indexAndMscToDelete[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String mscToDelete \u003d indexAndMscToDelete[1];"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscToDelete !\u003d null : \"Bug in notes.Module: deleteMiscellaneous: mscToDelete\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assert mscNum !\u003d -1 : \"Bug in notes.Module: deleteMiscellaneous: mscNum\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        miscellaneousInfo.remove(mscNum);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Okay we have successfully deleted this miscellaneous information:\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(mscToDelete);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 297
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Maps notes to a particular date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Stores the date of the note"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular day, it will store that day\u0027s date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular week, it will store the date of that week\u0027s Monday."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  If the note is for a particular month, it will store the first date of that month."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDate noteDate; //yyyy-MM-dd"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list that contains all the notes for a particular period ie day, week or month. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public ArrayList\u003cString\u003e notes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static DateTimeFormatter noteFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Constructor that maps a date to the first note for that date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param dateOfNote the starting date of the period"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param firstNote the first note to be added to the specified period"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Note(String dateOfNote, String firstNote) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        noteDate \u003d LocalDate.parse(dateOfNote, noteFormatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        notes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        notes.add(firstNote);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 34
    }
  },
  {
    "path": "src/main/java/gazeeebo/notes/NoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.notes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Contains the list of Note objects for a particular period."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for day. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e daily \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for week. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e weekly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** The list of Note objects for month. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static ArrayList\u003cNote\u003e monthly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 17
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/CapCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.CalculateCapCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.AddCapCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.DeleteCapCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.ListCapCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.FindCapCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.CapPageStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Deals with the user in the main CAP page."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class CapCommandParser extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(CapCommandParser.class.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * module name of the module."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Modular Credit of the module."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public int moduleCredit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Alphabetical score for the module."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String grade;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** Back to main menu message.*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String MAIN_MENU_PAGE \u003d \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"Content Page:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"------------------ \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"1. help\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"2. contacts\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"3. expenses\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"4. places\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"5. tasks\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"6. cap\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"7. spec\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"9. notes\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"10. change password\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"To exit: bye\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** Welcome message.*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String WELCOME \u003d \"Welcome to your CAP Calculator page! \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"What would you like to do?\\n\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Constructor for CapCommandParser."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param moduleCode   name of the module"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param moduleCredit about of Modular Credit of the module"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param grade        Alphabetical score attained"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public CapCommandParser(final String moduleCode,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            final int moduleCredit, final String grade) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.moduleCredit \u003d moduleCredit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Shows the list of commands for CAP page."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static void showListOfCommands() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"__________________\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"________________________________________\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. Add module: add semester number,\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"module\u0027s code, module\u0027s credit, module\u0027s grade\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. Find module: find moduleCode\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. Delete a module: delete module\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. See your CAP list: list all/semester number\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. List of commands for CAP page: commands\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. Help page: help\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. Exit CAP page: esc\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_________________\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_________________________________________\\n\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Decodes the command input in the CAP page."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            IOException, NullPointerException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            CapPageStorage capPageStorage \u003d new CapPageStorage();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e map"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \u003d capPageStorage.readFromCapFile(); //Read the file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(WELCOME);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            showListOfCommands();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String lineBreak \u003d \"------------------------------\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            while (!(ui.fullCommand.equals(\"esc\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    || ui.fullCommand.equals(\"7\"))) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                double cap \u003d new CalculateCapCommand().calculateCap(caplist);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (ui.fullCommand.split(\" \")[0].equals(\"add\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"1\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new AddCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"find\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"2\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new FindCapCommand(ui, caplist, lineBreak);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"list\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"4\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new ListCapCommand(ui, caplist, lineBreak);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"delete\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"3\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new DeleteCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"help\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"6\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    (new HelpCommand()).execute(null, ui, null,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            null, null, null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"commands\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"5\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    showListOfCommands();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String toStore \u003d \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    for (int i \u003d 0; i \u003c caplist.get(key).size(); i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + caplist.get(key).get(i).moduleCode"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"|\" + caplist.get(key).get(i).moduleCredit"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                                + \"|\" + caplist.get(key).get(i).grade + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                capPageStorage.writeToCapFile(toStore);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What do you want to do next ?\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(MAIN_MENU_PAGE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (IOException | NumberFormatException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Error in CAP.txt\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Error in CAP.txt\", e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return true to exit"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 177
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/ChangePasswordCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.PasswordStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Allows user to change their current password"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * to a new password."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ChangePasswordCommandParser extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method will verify current password and"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * write the new password to the Password.txt file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         task lists"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           deals with printing things to the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      deals with storing data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack keep stack of previous commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list, final Ui ui,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, ParseException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Enter your current password:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        PasswordStorage passwordStorage \u003d new PasswordStorage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (ui.fullCommand.equals(passwordStorage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    .readFromPasswordFile().get(0).toString())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Enter new password:\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String realPassword \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                char[] decryption \u003d realPassword.toCharArray();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                StringBuilder decodedPassword \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (int i \u003d realPassword.length() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    decodedPassword.append(decryption[i]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                passwordStorage.writeToPasswordFile(decodedPassword.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Password successfully changed.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Wrong password, \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"exit by entering esc or try again:\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return true to exit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 74
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/ContactCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.ListContactCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.UndoContactCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.ContactPageStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " * Deals with the user input in the contacts page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ContactCommandParser extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(ContactCommandParser.class.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** Welcome message.*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String WELCOME \u003d \"Welcome to your contacts page! \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"What would you like to do?\\n\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** Back to main menu message.*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String MAIN_MENU_PAGE \u003d \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"Content Page:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"------------------ \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"1. help\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"2. contacts\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"3. expenses\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"4. places\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"5. tasks\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"6. cap\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"7. spec\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"9. notes\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"10. change password\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"To exit: bye\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Shows list of commands in contact page."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static void showListOfCommands() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.print(\"_________________________\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_________________________________\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. Add contacts: add name,number\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. Find contacts base on name: find name\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. Delete a contact: delete name\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. See your contacts list: list\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. Undo Command: undo\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. List of commands for contacts page: commands\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. Help page: help\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. Exit contact page: esc\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_____________________________\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"_____________________________\\n\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method is the list of all the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * contact numbers and you got add/find/delete contacts."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list         list of all tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param ui           printing things to the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param storage      the object that deals with storing data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param commandStack store the commands in stack"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException Catch error if the read file fails"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Ui ui,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Storage storage,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException, DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ContactPageStorage contactPageStorage \u003d new ContactPageStorage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            HashMap\u003cString, String\u003e map"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    \u003d contactPageStorage.readFromContactFile(); //Read the file"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Map\u003cString, String\u003e contactList \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            Stack\u003cMap\u003cString, String\u003e\u003e oldcontacts \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(WELCOME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            showListOfCommands();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (ui.fullCommand.split(\" \")[0].equals(\"add\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"1\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    copyMap(contactList, oldcontacts);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new AddContactCommand(ui, contactList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"find\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"2\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new FindContactCommand(ui, contactList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"delete\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"3\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    copyMap(contactList, oldcontacts);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new DeleteContactCommand(ui, contactList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"list\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"4\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new ListContactCommand(contactList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"undo\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"5\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    contactList \u003d UndoContactCommand"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            .undo(contactList, oldcontacts, contactPageStorage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"commands\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"6\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    showListOfCommands();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"help\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        || ui.fullCommand.equals(\"7\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    (new HelpCommand()).execute(null, ui, null,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            null, null, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    showListOfCommands();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                String toStore \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                for (String key : contactList.keySet()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    toStore \u003d toStore.concat(key"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                            + \"|\" + contactList.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                contactPageStorage.writeToContactFile(toStore);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"What do you want to do next ?\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.print(MAIN_MENU_PAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } catch (NumberFormatException | IOException"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(\"Error in Contact.txt\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            LOGGER.log(Level.WARNING, \"Error in CAP.txt\", e);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Copy of old contacts."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param contacts    current contacts list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param oldcontacts store deleted contacts."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private void copyMap(final Map\u003cString, String\u003e contacts,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                         final Stack\u003cMap\u003cString, String\u003e\u003e oldcontacts) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e currentcontacts \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (String key : contacts.keySet()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            currentcontacts.put(key, contacts.get(key));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        oldcontacts.push(currentcontacts);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return true to exit"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 169
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/ExpenseCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.AddExpenseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.ExpenseListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.FindExpenseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.UndoExpenseCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.ExpensePageStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Allows user to call commands to record and manage their expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ExpenseCommandParser extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Shows welcome message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Welcome to your expenses page! \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"What would you like to do?\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Shows main menu page."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static void showMainMenu() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Shows list of commands in expense page."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static void showListOfCommands() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.print(\"_________________________\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_________________________________\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1. Add expenses command: add item, price, date\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2. Find expenses on a certain date: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"find yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"3. Delete a certain expense: delete OR delete ITEM_NAME\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"4. See your expense list: list\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"5. Undo Command: undo\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"6. List of commands for expenses page: commands\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"7. Help page: help\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"8. Exit Expense page: esc\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_________________________\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_________________________________\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method is allows user to call commands to add expenses,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * find expenses on a certain date, delete a chosen expense,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * see the expense list and exit the expense page."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          List of all tasks"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            The object that deals with"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       The object that deals with storing data"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ExpensePageStorage expensePageStorage \u003d new ExpensePageStorage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            /*Read file from storage*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \u003d expensePageStorage.readFromExpensesFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    new TreeMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e(map);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean isExitExpenses \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            showWelcomeMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            showListOfCommands();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (!isExitExpenses) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (ui.fullCommand.split(\" \")[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    copyMap(expenses, oldExpenses);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new AddExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (ui.fullCommand.split(\" \")[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    copyMap(expenses, oldExpenses);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new DeleteExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                } else if (ui.fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    new ExpenseListCommand(expenses);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    expenses \u003d UndoExpenseCommand.undoExpenses(expenses,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            oldExpenses, expensePageStorage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (ui.fullCommand.equals(\"commands\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    showListOfCommands();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else if (ui.fullCommand.equals(\"help\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    (new HelpCommand()).execute(null, ui, null,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            null, null, null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isExitExpenses \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    showMainMenu();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                String toStore \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    if (expenses.get(key).size() \u003e 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                            toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + expenses.get(key).get(i)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                    + \"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    } else if (expenses.get(key).size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        toStore \u003d toStore.concat(key + \"|\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + expenses.get(key).get(0)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expensePageStorage.writeToExpensesFile(toStore);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        } catch (NumberFormatException | IOException"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            System.out.println(\"Error in Expense.txt\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * copy map of places into a stack of maps."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param expenses    map of current expenses"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldExpenses stack of map of previous expenses"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void copyMap(final Map\u003cLocalDate,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e\u003e expenses,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                         final Stack\u003cMap\u003cLocalDate,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                 ArrayList\u003cString\u003e\u003e\u003e oldExpenses) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e currentExpenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cString\u003e listNameExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c expenses.get(key).size(); i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                listNameExpenses.add(expenses.get(key).get(i));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentExpenses.put(key, listNameExpenses);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldExpenses.push(currentExpenses);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 156,
      "mononokehime14": 1,
      "JasonLeeWeiHern": 2,
      "e0309463": 29,
      "yueyuu": 4
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/GeneralNoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NotePageStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deals with the commands input at the note page."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class GeneralNoteCommandParser extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(GeneralNoteCommandParser.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ESC \u003d \"esc\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_EDIT_GOAL \u003d \"edit /n NEW_GOAL\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_ADD_MODULE \u003d \"add /n MODULE_NAME\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_DELETE_MODULE \u003d \"delete /n MODULE_NAME\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_MODULE \u003d \"module /n MODULE_NAME\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String COMMANDS \u003d \"commands\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_GOAL \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ADD_MODULE \u003d \"add\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE_MODULE \u003d \"delete\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Prints out a summary of the list of commands that can be used in the note page. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void showListOfCommands() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"1. View goal and list of modules: \" + VIEW);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"2. Edit goal: \" + D_EDIT_GOAL); //edit /n"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"3. Add a module: \" + D_ADD_MODULE); //add /n"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"4. Delete a module: \" + D_DELETE_MODULE); //delete /n"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"5. View/edit a particular module: \" + D_MODULE); //module /n module_name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"6. View this list of commands: \" + COMMANDS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"7. View help page: \" + HELP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"8. View help for a page: help PAGE_NAME\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"9. Exit note page: \" + ESC);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Decodes the command input in the note page. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Welcome to your note page! What would you like to do?\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        showListOfCommands();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        logger.log(Level.INFO, \"entered note page\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        GeneralNotePage gnp \u003d new GeneralNotePage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (!ui.fullCommand.equals(ESC)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] commands \u003d ui.fullCommand.split(\" /n\", 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (ui.fullCommand.equals(VIEW)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    gnp.viewGeneralNotePage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (ui.fullCommand.equals(COMMANDS)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    showListOfCommands();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(MODULE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    ui.fullCommand \u003d commands[1].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    (new ModuleCommandParser()).execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(EDIT_GOAL)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    gnp.editGoal(commands[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToGoalFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(ADD_MODULE)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    gnp.addModule(commands[1].trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(DELETE_MODULE)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    gnp.deleteModule(commands[1].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(HELP)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    (new HelpCommand()).execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                switch (commands[0]) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case EDIT_GOAL:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027edit /n NEW_GOAL\\\u0027.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case ADD_MODULE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027add /n MODULE_NAME\\\u0027.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case DELETE_MODULE:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027delete /n MODULE_NAME\\\u0027.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case MODULE:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027module /n MODULE_NAME\\\u0027.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                default: logger.log(Level.WARNING, \"bug in try catch\", e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (DukeException d) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 140
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/ModuleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.NotePageStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Deals with the commands input on the module page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class ModuleCommandParser extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(ModuleCommandParser.class.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_EDIT_MODULE \u003d \"edit mod /n NEW_NAME\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_ADD_ASSMT \u003d \"add assmt /n NAME /a WEIGHTAGE\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_EDIT_ASSMT \u003d \"edit assmt /n INDEX /a NEW_NAME\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_EDIT_WEIGHTAGE \u003d \"edit weight /n INDEX /a NEW_WEIGHTAGE\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_DELETE_ASSMT \u003d \"delete assmt /n INDEX\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_ADD_MSC \u003d \"add msc /n DESCRIPTION\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_EDIT_MSC \u003d \"edit msc /n INDEX /a NEW_DESCRIPTION\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String D_DELETE_MSC \u003d \"delete msc /n INDEX\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String COMMANDS \u003d \"commands\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ESC \u003d \"esc\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_MODULE \u003d \"edit mod\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ADD_ASSMT \u003d \"add assmt\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_ASSMT \u003d \"edit assmt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_WEIGHTAGE \u003d \"edit weight\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE_ASSMT \u003d \"delete assmt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String ADD_MSC \u003d \"add msc\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EDIT_MSC \u003d \"edit msc\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String DELETE_MSC \u003d \"delete msc\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Checks if the module specified exist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param moduleName the module to be found"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the Module if found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DukeException if the module does not exist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Module findModule(String moduleName) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        for (Module m: GeneralNotePage.modules) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (m.name.equals(moduleName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        throw new DukeException(\"Sorry there is no such module.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private void showListOfCommands() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"1. View module notes: \" + VIEW);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"2. Edit module name: \" + D_EDIT_MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"3. Add an assessment: \" + D_ADD_ASSMT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"4. Edit an assessment name: \" + D_EDIT_ASSMT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"5. Edit an assessment\u0027s weightage: \" + D_EDIT_WEIGHTAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"6. Delete an assessment: \" + D_DELETE_ASSMT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"7. Add a miscellaneous information: \" + D_ADD_MSC);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"8. Edit a miscellaneous information: \" + D_EDIT_MSC);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"9. Delete a miscellaneous information: \" + D_DELETE_MSC);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"10. View list of commands for module page: \" + COMMANDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"11. View help page: \" + HELP);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"12. View help for a page: help PAGE_NAME\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"13. Exit module notes: \" + ESC);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /** Decodes the commands input on the module page. */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ParseException, IOException, NullPointerException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        if (ui.fullCommand.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.INFO, \"module name not specified by user\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            throw new DukeException(\"Please input a module name.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Module module \u003d findModule(ui.fullCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Welcome to your module page! What would you like to do?\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        showListOfCommands();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        logger.log(Level.INFO, \"entering module page\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        while (!ui.fullCommand.equals(ESC)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            String[] commands \u003d ui.fullCommand.split(\" /n\", 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                if (ui.fullCommand.equals(VIEW)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.viewModule();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(EDIT_MODULE)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.editName(commands[1].trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(ADD_ASSMT)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.addAssessment(commands[1].trim());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(EDIT_ASSMT)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.editAssessmentName(commands[1].trim());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(EDIT_WEIGHTAGE)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.editAssessmentWeightage(commands[1].trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(DELETE_ASSMT)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.deleteAssessment(commands[1].trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(ADD_MSC)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.addMiscellaneous(commands[1].trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(EDIT_MSC)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.editMiscellaneous(commands[1].trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(DELETE_MSC)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    module.deleteMiscellaneous(commands[1].trim());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    NotePageStorage.writeToModulesFile();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(COMMANDS)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    showListOfCommands();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else if (commands[0].equals(HELP)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    (new HelpCommand()).execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                switch (commands[0]) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case EDIT_MODULE:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027edit mod /n NEW_NAME\\\u0027.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case ADD_ASSMT:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027add assmt /n NAME /a WEIGHTAGE\u0027.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case EDIT_ASSMT:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027edit assmt /n INDEX /a NEW_NAME\\\u0027.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case EDIT_WEIGHTAGE:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027edit weight /n INDEX /a NEW_WEIGHTAGE\\\u0027.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case DELETE_ASSMT:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027delete assmt /n INDEX\\\u0027.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case ADD_MSC:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027add msc /n DESCRIPTION\\\u0027.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case EDIT_MSC:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027edit msc /n INDEX /a NEW_DESCRIPTION\\\u0027.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                case DELETE_MSC:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    System.out.println(\"Please input the command \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                            + \"in the format \\\u0027delete msc /n INDEX\\\u0027.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                default: logger.log(Level.WARNING, \"bug in try catch\", e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (DukeException d) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        logger.log(Level.INFO, \"user typed esc\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Going back to note page...\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        GeneralNoteCommandParser.showListOfCommands();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        logger.log(Level.INFO, \"leaving module page\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 192
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/ParserManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Parser command to parse the input into different pages."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param command full command that is input into the command line"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException Throws custom exception when"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *                        format of find command is wrong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException Catch error if parsing of command fails"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException    Catch error if the read file fails"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public static Command parse(final String command,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                final Ui ui)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws DukeException, IOException, ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        if (splitCommand[0].equals(\"help\") || command.equals(\"1\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"contacts\") || command.equals(\"2\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ContactCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"expenses\") || command.equals(\"3\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ExpenseCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"places\") || command.equals(\"4\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new PlacesCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"spec\") || command.equals(\"7\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new SpecializationCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"tasks\") || command.equals(\"5\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new TaskCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"moduleplanner\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                || command.equals(\"8\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new StudyAssistCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"cap\") || command.equals(\"6\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int moduleCredit \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String grade \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return new CapCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (splitCommand[0].equals(\"notes\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                || command.equals(\"9\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            return new GeneralNoteCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else if (command.equals(\"change password\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                || command.equals(\"10\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            new ChangePasswordCommandParser().execute(null, ui, null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    null, null, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 34,
      "mononokehime14": 2,
      "e0309463": 24,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/PlacesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.UndoPlacesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.AddPlacesCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.DeletePlacesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.ListPlacesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.FindPlacesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.PlacesPageStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesCommandParser extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(PlacesCommandParser.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String PLACES_COMMANDS \u003d \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"1. Add location: add-room,location\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"2. Find a place in SOC: find-place\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"3. Delete a place: delete-place\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"4. See all places in SOC: list\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"5. Undo previous command: undo\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"6. See all commands: commands\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"7. Help command: help\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"8. Exit places: esc\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"__________________________________________________________\\n\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String MAIN_MENU_PAGE \u003d \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Content Page:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"------------------ \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"1. help\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"2. contacts\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"3. expenses\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"4. places\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"5. tasks\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"6. cap\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"7. spec\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"9. notes\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"10. change password\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"To exit: bye\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String INVALID_COMMAND \u003d \"There is no such command in Places.\\nWhat do you want to do next ?\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to your places in SOC! What would you like to do?\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"Check input format again\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Parses the user input and return a command object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list the list of all tasks."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException exception thrown when there is an input error."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException parse exception from help command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list, Ui ui, Storage storage, Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask, TriviaManager triviaManager) throws DukeException, ParseException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(PLACES_COMMANDS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            LogCenter.setUpLogger(LOGGER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            PlacesPageStorage placesPageStorage \u003d new PlacesPageStorage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            HashMap\u003cString, String\u003e map \u003d placesPageStorage.readPlaces();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean isExitFromPlaces \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            while (!isExitFromPlaces) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ui.readCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (ui.fullCommand.contains(\"add\") || ui.fullCommand.equals(\"1\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    copyMap(places, oldplaces);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new AddPlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.contains(\"find\") || ui.fullCommand.equals(\"2\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new FindPlacesCommand(ui, places);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"list\") || ui.fullCommand.equals(\"4\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new ListPlacesCommand(places);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.contains(\"delete\") || ui.fullCommand.equals(\"3\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    copyMap(places, oldplaces);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new DeletePlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"commands\") || ui.fullCommand.equals(\"6\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(PLACES_COMMANDS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"help\") || ui.fullCommand.equals(\"7\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    new HelpCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                            commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"esc\") || ui.fullCommand.equals(\"8\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(MAIN_MENU_PAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    isExitFromPlaces \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (ui.fullCommand.equals(\"undo\") || ui.fullCommand.equals(\"5\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    places \u003d UndoPlacesCommand.undoPlaces(places, oldplaces);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    System.out.println(INVALID_COMMAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String toStore \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    toStore \u003d toStore.concat(key + \"|\" + places.get(key) + \"\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                placesPageStorage.writePlacesFile(toStore);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            System.out.println(INVALID_INPUT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            LOGGER.log(Level.WARNING,\"invalid input\", e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * copy map of places into a stack of maps."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param places map of current places"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldplaces stack of map of previous places"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private void copyMap(Map\u003cString, String\u003e places, Stack\u003cMap\u003cString, String\u003e\u003e oldplaces) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e currentplaces \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String key : places.keySet()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentplaces.put(key, places.get(key));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(currentplaces);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return true to exit"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 146
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/SpecializationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.CompletedCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.ListOfSpecializationAndModules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.ListSpecializationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.specialization.ModuleCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.CompletedElectivesStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.SpecializationPageStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class SpecializationCommandParser extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Shows welcome message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static void showWelcomeMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Welcome to your specialization page!\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"What would you like to do?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Shows main menu page."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static void showMainMenu() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Shows list of commands in specialization page."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static void showListOfCommands() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.print(\"____________________________\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"_____________________________\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1. Show list of specializations\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \" and technical electives : list\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2. Key in completed electives: complete\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"3. List of commands for specialization page: commands\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"4. Help page: help\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"5. Exit contact page: esc\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"____________________________\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"______________________________\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method is allows user to call commands to add expenses,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * find expenses on a certain date, delete a chosen expense,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * see the expense list and exit the expense page."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param list          list of all tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param storage       the object that deals with storing data"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param commandStack  Stores the stack of previous commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param deletedTask   Stores the list of deleted tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager The object for triviaManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException   Catch error if the read file fails"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException throws a custom exception if"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                       module index does not exist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void execute(final ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            throws IOException, DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        SpecializationPageStorage specPageStorage \u003d new SpecializationPageStorage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cModuleCategory\u003e\u003e smap"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \u003d specPageStorage.readFromSpecializationFile(); //Read the file"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cString, ArrayList\u003cModuleCategory\u003e\u003e specMap \u003d new TreeMap\u003c\u003e(smap);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        CompletedElectivesStorage completedElectivesStorage \u003d new CompletedElectivesStorage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e emap"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                \u003d completedElectivesStorage.readFromCompletedElectivesFile(); //Read the file"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e completedEMap \u003d new TreeMap\u003c\u003e(emap);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new ListOfSpecializationAndModules(specMap);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        showListOfCommands();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.readCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (ui.fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ListSpecializationCommand(ui, specMap, completedEMap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.equals(\"complete\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CompletedCommand(ui, specMap, completedEMap);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.equals(\"commands\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                showListOfCommands();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (ui.fullCommand.equals(\"help\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                (new HelpCommand()).execute(null, ui, null,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        null, null, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        showMainMenu();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 126,
      "mononokehime14": 1,
      "e0309463": 6,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/StudyAssistCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.studyassist.StudyPlannerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.studyassist.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.studyassist.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.studyassist.ShiftModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.studyassist.CheckPrerequisiteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.studyassist.UndoStudyPlannerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class StudyAssistCommandParser extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /** This method allows user to enter the module planner page,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Delete/shift/add/view their 4 year study plan, view prerequisite tree of modules"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * the method keeps repeating in while loop unless esc command is given."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param list          list of all tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param ui            the object that deals with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                      printing things to the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage       the object that deals with storing data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param commandStack  the stack of previous commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param deletedTask   the list of deleted task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException   Catch error if the read file fails"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException throws a custom exception if"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *                       module index does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Ui ui,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Storage storage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        TriviaManager triviaManager) throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        showCommands();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d  new StudyPlannerCommand(studyStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String command \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (splitCommand[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new HelpCommand().execute("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        null, null, null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        null, null,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"plan\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                studyPlan.showPlan();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"add\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                copyStudyPlan(oldStudyPlan,studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new AddModuleCommand().execute(studyPlan,studyStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                copyStudyPlan(oldStudyPlan,studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new DeleteModuleCommand().execute(studyPlan,studyStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"shift\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                copyStudyPlan(oldStudyPlan, studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ShiftModuleCommand().execute(studyPlan, studyStorage, ui);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"prerequisite\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new CheckPrerequisiteCommand().execute(ui, studyStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (ui.fullCommand.equals(\"undo\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                studyPlan.StudyPlan \u003d new UndoStudyPlannerCommand()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .undoStudyPlanner(oldStudyPlan, studyPlan.StudyPlan, studyStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (ui.fullCommand.equals(\"commands\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                showCommands();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (!ui.fullCommand.equals(\"moduleplanner\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                System.out.println(\"Invalid input that i could not understand~\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"To exit: bye\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This methods saves a copy for undo function"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param oldStudyPlan data structure stores previous copy."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param currentMods data structure stores copy after changes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private void copyStudyPlan(Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                               ArrayList\u003cArrayList\u003cString\u003e\u003e currentMods) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e currentPlan \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (ArrayList\u003cString\u003e mods : currentMods) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (String name : mods) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                arrayList.add(name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            currentPlan.add(arrayList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldStudyPlan.push(currentPlan);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method checks input is esc or not, if yes quit."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return boolean value of whether inout is esc or not."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method displays instructions of user inputs."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showCommands() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"Welcome to Module Planner!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"1. Add module to your plan: add CSXXXX to n(Semester number)\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"2. Delete module from your plan: Delete CSXXXX from n(Semester number)\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"3. Shift module to other semester: shift CSXXXX to n(Semester number)\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"4. See your Study Plan: plan\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"5. See your Prerequisite of a module: prerequisite CSXXXX(module code)\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"6. Undo Previous Command: undo\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"7. Exit Module Planner page: esc\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"__________________________________________________________\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 100,
      "JasonLeeWeiHern": 14,
      "e0309463": 17,
      "yueyuu": 8
    }
  },
  {
    "path": "src/main/java/gazeeebo/parser/TaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.CalendarView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.UndoTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.CategoryListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.ChangePriority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.ConfirmTentativeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DoAfterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DoneListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.EventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.FixDurationCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.RescheduleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.UndoneListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.UndoneCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TimeboundCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TentativeEventCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.SnoozeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TagCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.help.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleDailyCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleMonthlyCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.schedule.ScheduleWeeklyCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class TaskCommandParser extends Command {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String COMMAND_LIST \u003d \"_______________________________________________________________\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"____________________\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a todo: todo task_description\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a deadline: deadline task_description /by YYYY-MM-DD HH:MM:SS\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding an event: event task_description /at YYYY-MM-DD HH:MM:SS-HH:SS:MM\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"See all your task list: list\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"See your task based on category: category_name list\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Delete task(s): delete task_number1 and task_number2 and...\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Delete all tasks: delete all\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Mark task as done: done task_number\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Search for a task: find keyword\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"View daily schedule: scheduleDaily YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"View weekly schedule: scheduleWeekly YYYY-MM-DD YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"View monthly schedule: scheduleMonthly YYYY-MM\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a \u0027do-within-a-period\u0027 task: task_description /between YYYY-MM-DD and YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a tentative event: tentative task_description\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Confirming a tentative event: confirm task_number\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Editing a task: edit task_number\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a task with fixed duration: task_description /require amount_of_time\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Ranking your task: task_number rank rank_number\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"View monthly calendar: calendar monthly view\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"View annual calendar: calendar annual view\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Marking a task as undone: undone task_number\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a do-after task: follow_up_task /after completed_task\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Reschedule a task: reschedule task_number\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Prolong a task: snooze task_number\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Create recurring tasks: task_description weekly/monthly/yearly\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Tagging a task: #tagname\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Undo previous commands: undo\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Adding a note to a day/week/month: addNote day/week/month YYYY-MM-DD/YYYY-MM-DD/YYYY-MM\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Editing a note: editNote day/week/month YYYY-MM-DD/YYYY-MM-DD/YYYY-MM note_number\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Deleting a note: deleteNote day/week/month YYY-MM-DD/YYYY-MM-DD/YYYY-MM note_number\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Listing all notes: listNote day/week/month YYY-MM-DD/YYYY-MM-DD/YYYY-MM note_number\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Show all commands: commands\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"Return to main page: esc\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"________________________________________________________________________________________________\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final String MAIN_MENU_PAGE \u003d \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"Content Page:\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"------------------ \\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"1. help\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"2. contacts\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"3. expenses\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"4. places\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"5. tasks\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"6. cap\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"7. spec\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"9. notes\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            + \"10. change password\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            + \"To exit: bye\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Parses the user input and return a command object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list the list of all tasks."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param ui the object that deals with printing things to the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param storage the object that deals with storing data."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param commandStack the stack of previous commands."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param deletedTask the list of deleted task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param triviaManager the object for triviaManager"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws DukeException exception thrown when there is an input error."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException parse exception from help command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException input or output error when interacting with user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e list,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Ui ui, final Storage storage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final ArrayList\u003cTask\u003e deletedTask,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        final TriviaManager triviaManager)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            throws IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Welcome to your Tasks page!\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"What would you like to do?\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int month \u003d (now.get(Calendar.MONTH) + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int year \u003d now.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        int date \u003d now.get(Calendar.DATE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        calendarView.monthlyView(list,month,year,date);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(COMMAND_LIST);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e oldList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (!ui.fullCommand.equals(\"esc\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.readCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String command \u003d ui.fullCommand;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (splitCommand[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new HelpCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"event list\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"commands\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(COMMAND_LIST);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"deadline list\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"todo list\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"fixed list\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"timebound list\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new CategoryListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.equals(\"done list\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DoneListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"undone list\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new UndoneListCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DoneCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeleteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeadlineCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"/after\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DoAfterCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new EventCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TodoCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"/between\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TimeboundCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new FindCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"/require\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new FixDurationCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"reschedule\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new RescheduleCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"sort\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new SortCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"scheduleDaily\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ScheduleDailyCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"scheduleWeekly\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ScheduleWeeklyCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"scheduleMonthly\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ScheduleMonthlyCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"snooze\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new SnoozeCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"tentative\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TentativeEventCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"confirm\")) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ConfirmTentativeCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].contains(\"undone\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new UndoneCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"undo\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                list \u003d UndoTaskCommand.undo(commandStack, list, storage);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"edit\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                copyOldList(oldList, list);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new EditCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                commandStack.push(oldList);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"addNote\")) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new AddNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"editNote\")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new EditNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"deleteNote\")) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new DeleteNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (splitCommand[0].equals(\"listNote\")) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ListNoteCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else if (splitCommand[0].equals(\"priority\")) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new ChangePriority().execute(list, ui, storage,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else if (command.contains(\"#\")) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                new TagCommand().execute(list, ui, storage,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"calendar monthly view\")) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new CalendarView().monthlyView(list, month, year, date);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"calendar annual view\")) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                new CalendarView().annualView(list, month, year, date);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (command.equals(\"esc\")) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(MAIN_MENU_PAGE);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                ui.showDontKnowErrorMessage();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sb.append(list.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            tasksPageStorage.writeToSaveFile(sb.toString());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Program does not exit and continues running"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * since command \"bye\" is not called."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Copy an Arraylist of task."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param oldList previous list of task before new command executed"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list current list of tasks"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public static void copyOldList(final ArrayList\u003cTask\u003e oldList,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                                   ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.tasks.Deadline\")) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                deadline.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(deadline);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.Event\")) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Event event \u003d new Event(task.description,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                event.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(event);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.Todo\")) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Todo todo \u003d new Todo(task.description);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                todo.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(todo);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.FixedDuration\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                FixedDuration fixedDuration"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d new FixedDuration(task.description,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[3].trim());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                fixedDuration.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(fixedDuration);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else if (task.getClass().getName().equals("
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    \"gazeeebo.tasks.Timebound\")) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                Timebound timebound"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        \u003d new Timebound(task.description,"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                        task.toString().split(\"\\\\|\")[3].trim());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                timebound.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                oldList.add(timebound);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 102,
      "JasonLeeWeiHern": 61,
      "mononokehime14": 1,
      "e0309463": 193,
      "yueyuu": 3
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/CapPageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class CapPageStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * CAP storage file name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private String relativePathCapResource"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"CAP.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Write to the CAP.txt file (save in the file)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent string to put into the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToCapFile(final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathCapResource);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Read from the file CAP.txt and put the details into a HashMap."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return Returns the HashMap of contacts, key is the contact name and the value is the phone number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e readFromCapFile()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                caplist \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        File f \u003d new File(relativePathCapResource);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cCapCommandParser\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] splitStringTxtFile \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String semNumber \u003d splitStringTxtFile[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String moduleCode \u003d splitStringTxtFile[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            int mc \u003d Integer.parseInt(splitStringTxtFile[2]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String grade \u003d splitStringTxtFile[3];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            CapCommandParser newCap \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    new CapCommandParser(moduleCode, mc, grade);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (String key : caplist.keySet()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                if (semNumber.equals(key)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    caplist.get(key).add(newCap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            /* semNumber doesn\u0027t exist in the list */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (!isEqual) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                moduleList.add(newCap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                caplist.put(semNumber, moduleList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return caplist;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 71
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/CompletedElectivesStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CompletedElectivesStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Completed electives storage file name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private String relativePathCompletedElectivesResource"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            \u003d \"CompletedElectives.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method writes to the file CompletedElectives.txt."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param fileContent save the completed technical electives into this file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void writeToCompletedElectivesFile(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathCompletedElectivesResource);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method read from the file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * CompletedElectives.txt and put the details into a HashMap."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return Returns the HashMap of completedEMap,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *         key is the specialization title and the value is"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *         list of completed technical electives under that specialization."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFromCompletedElectivesFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e completedEMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        File file \u003d new File(relativePathCompletedElectivesResource);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e completedElectiveList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String checkKey \u003d split[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (completedEMap.containsKey(checkKey)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedEMap.get(checkKey).add(split[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedElectiveList.add(split[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                completedEMap.put(checkKey, completedElectiveList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return completedEMap;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 59
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/ContactPageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ContactPageStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Contact storage file name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private String relativePathContactResource"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Contact.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * THis method writes to the file Contact.txt."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent save the contact information into this file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToContactFile("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathContactResource);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method read from the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Contact.txt and put the details into a HashMap."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return Returns the HashMap of contacts, key is the contact name and the value is the phone number."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public HashMap\u003cString, String\u003e readFromContactFile()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e contactList \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        File f \u003d new File(relativePathContactResource);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            contactList.put(split[0], split[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return contactList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 54
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/ExpensePageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpensePageStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Expense storage file name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private String relativePathExpensesResource"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            \u003d \"Expenses.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method writes to the file Expense.txt."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param fileContent save the expenses into this file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void writeToExpensesFile(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathExpensesResource);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method read from the file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Expense.txt and put the details into a HashMap."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return Returns the HashMap of expenses,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *         key is the date of purchase and the value is list of items and price."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e readFromExpensesFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        File f \u003d new File(relativePathExpensesResource);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cString\u003e itemAndPriceList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            LocalDate dateOfPurchase \u003d LocalDate.parse(split[0], fmt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            boolean isEqual \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            for (LocalDate key : expenses.keySet()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                if (dateOfPurchase.equals(key)) { //if date equal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    expenses.get(key).add(split[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                    isEqual \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            if (!isEqual) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                itemAndPriceList.add(split[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                expenses.put(dateOfPurchase, itemAndPriceList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return expenses;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 67
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/NotePageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NotePageStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(NotePageStorage.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String FILE_GOAL \u003d \"goal.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String FILE_MODULES \u003d \"modules.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Write data to the goal file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToGoalFile() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            FileWriter file \u003d new FileWriter(FILE_GOAL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.write(GeneralNotePage.goal);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.SEVERE, \"Can\u0027t write to goal file. Creating a new one...\", e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            File f \u003d new File(FILE_GOAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IOException a) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                logger.log(Level.SEVERE, \"Can\u0027t create a new goal file.\", a);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Reads data from the goal file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromGoalFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File f \u003d new File(FILE_GOAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Scanner txtFile \u003d new Scanner(f);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            if (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                GeneralNotePage.goal \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.SEVERE, \"Can\u0027t read from goal file. Creating a new one...\", e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IOException a) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                logger.log(Level.SEVERE, \"Can\u0027t create a new goal file.\", a);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Writes data to the modules file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToModulesFile() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            FileWriter file \u003d new FileWriter(FILE_MODULES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (Module m : GeneralNotePage.modules) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(m.name + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(m.assessments.size() + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (Assessment a : m.assessments) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    file.write(a.name + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    file.write(a.weightage + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(m.miscellaneousInfo.size() + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (String s : m.miscellaneousInfo) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    file.write(s + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.flush();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.SEVERE, \"Can\u0027t write to modules file. Creating a new one...\", e);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            File f \u003d new File(FILE_GOAL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IOException a) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                logger.log(Level.SEVERE, \"Can\u0027t create a new modules file.\", a);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Reads data from the modules file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromModulesFile() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File f \u003d new File(FILE_MODULES);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Scanner txtFile \u003d new Scanner(f);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            while (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Module m \u003d new Module(txtFile.nextLine()); //read in module name"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                int numOfAssmt \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (int i \u003d 0; i \u003c numOfAssmt; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    m.assessments.add(new Assessment(txtFile.nextLine(), Integer.parseInt(txtFile.nextLine())));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                int numOfMsc \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (int j \u003d 0; j \u003c numOfMsc; j++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    m.miscellaneousInfo.add(txtFile.nextLine());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                GeneralNotePage.modules.add(m);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.SEVERE, \"Can\u0027t read from modules file. Creating a new one...\", e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IOException a) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                logger.log(Level.SEVERE, \"Can\u0027t create a new modules file.\", a);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 128
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/NoteStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * Reads and writes data for the NoteCommands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class NoteStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(NoteStorage.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Writes the whole list of Notes to the specified text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Overrides the existing data in the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param fileName the text file to write the data to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToWrite the list of Notes to be written to the text file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void writeToFile(String fileName, ArrayList\u003cNote\u003e listToWrite) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            FileWriter file \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            for (Note n : listToWrite) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(Note.noteFormatter.format(n.noteDate) + \"\\n\"); //date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                file.write(n.notes.size() + \"\\n\"); //size of individual note list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (String s : n.notes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    file.write(s + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.SEVERE, \"Can\u0027t write to \" + fileName + \" file. Creating a new one...\", e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IOException a) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                logger.log(Level.SEVERE, \"Can\u0027t create a new \" + fileName + \" file.\", a);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Reads the list of Notes from a text file and stores it into the given container."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param fileName the text file the data is to be read from"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param listToReadTo the container that the data is to be stored in"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void readFromFile(String fileName, ArrayList\u003cNote\u003e listToReadTo) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LogCenter.setUpLogger(logger);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            Scanner txtFile \u003d new Scanner(f);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            while (txtFile.hasNextLine()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String date \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                int sizeOfNotes \u003d Integer.parseInt(txtFile.nextLine());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                String firstNote \u003d txtFile.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Note newNote \u003d new Note(date, firstNote);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                for (int i \u003d 0; i \u003c sizeOfNotes - 1; i++) { //sizeOfNotes-1 as the first note has already been added"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    newNote.notes.add(txtFile.nextLine());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                listToReadTo.add(newNote);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            logger.log(Level.SEVERE, \"Can\u0027t read from \" + fileName + \" file. Creating a new one...\", e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            } catch (IOException a) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                logger.log(Level.SEVERE, \"Can\u0027t create a new \" + fileName + \" file.\", a);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 84
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/PasswordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class PasswordStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** File for jar file.*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private String relativePathPasswordResource"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Password.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Write the encoded password into the Password.txt file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param fileContent string to put into the txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void writeToPasswordFile("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathPasswordResource);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Read from the Password.txt file,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * decode the passwords and put it into an array."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the arrays of password"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public ArrayList\u003cStringBuilder\u003e readFromPasswordFile()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cStringBuilder\u003e passwordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        File f \u003d new File(relativePathPasswordResource);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            String decodedPassword \u003d sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            char[] decryption \u003d decodedPassword.toCharArray();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            StringBuilder realPassword \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            for (int i \u003d decodedPassword.length() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                realPassword.append(decryption[i]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            passwordList.add(realPassword);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return passwordList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 55
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/PlacesPageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.logger.LogCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesPageStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(PlacesPageStorage.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final String relativePathPlacesResource \u003d \"Places.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Write to Places.txt file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param fileContent Concatenate all the places into a single string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException exception when the file is unable to be written"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void writePlacesFile(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathPlacesResource);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Read Places.txt file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return A HashMap of the places and their locations."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException exception when the file is unable to be read"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public HashMap\u003cString, String\u003e readPlaces() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        LogCenter.setUpLogger(LOGGER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e placesList \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathPlacesResource);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                placesList.put(split[0], split[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                System.out.println(\"Places.txt cannot be read, check format of Places.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                LOGGER.log(Level.SEVERE,\"Places.txt cannot be read, check format of Places.txt\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return placesList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 56
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/SpecializationPageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.specialization.ModuleCategory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class SpecializationPageStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Specialization storage file name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private String relativePathSpecializationResource"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            \u003d \"Specialization.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method writes to the file Specialization.txt."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param fileContent save the specializations and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                    technical electives into this file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public void writeToSpecializationFile(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathSpecializationResource);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * This method read from the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Specialization.txt and put the details into a HashMap."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @return Returns the HashMap of specMap,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * key is the specialization title and the value is"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * list of technical electives under that specialization."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *     key is the specialization title and the value is"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *     list of technical electives under that specialization."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 71056c071ad3642f49ddb4af5c29b09b20be25ad"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws FileNotFoundException catch the error if the read file fails."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cModuleCategory\u003e\u003e readFromSpecializationFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cModuleCategory\u003e\u003e specMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        File file \u003d new File(relativePathSpecializationResource);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            String[] split \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ArrayList\u003cModuleCategory\u003e moduleBD \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ModuleCategory mc \u003d new ModuleCategory(split[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            moduleBD.add(mc);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            specMap.put(split[1], moduleBD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return specMap;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 65
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePath"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Save.txt\", \"/Save.txt\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathPassword"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Password.txt\", \"/Password.txt\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathContact"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Contact.txt\", \"/Contact.txt\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathExpenses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Expenses.txt\", \"/Expenses.txt\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathPlaces"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Places.txt\", \"/Places.txt\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathTrivia"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Trivia.txt\", \"/Trivia.txt\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathCap"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"CAP.txt\", \"/CAP.txt\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathSpecialization"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Specialization.txt\", \"/Specialization.txt\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathStudyPlanner"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Study_Plan.txt\", \"/Study_Plan.txt\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathCompletedElectives"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"CompletedElectives.txt\", \"/CompletedElectives.txt\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] relativePathPrerequisite"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"Prerequisite.txt\", \"/Prerequisite.txt\"};"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativePathGoal"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"goal.txt\", \"/goal.txt\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativePathModule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"modules.txt\", \"/modules.txt\"};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativeNoteDaily"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"NoteDaily.txt\", \"/NoteDaily.txt\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativeNoteWeekly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"NoteMonthly.txt\", \"/NoteMonthly.txt\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String[] getrelativeNoteMonthly"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d {\"NoteWeekly.txt\", \"/NoteWeekly.txt\"};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathPlacesResource"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Places.txt\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathTriviaResource"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Trivia.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathStudyPlannerResource"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Study_Plan.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private String relativePathPrerequisiteResource"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            \u003d \"Prerequisite.txt\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //@@author jessteoxizhi"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Check if there are save txt file in the directory, if there is not, create a new txt file and copy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * preloaded data into the new txt file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException exception when there is an error read the txt file"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void startUp() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cString[]\u003e resourcelist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathPassword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathContact);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathExpenses);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathExpenses);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathPlaces);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathTrivia);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathCap);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathSpecialization);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathStudyPlanner);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathCompletedElectives);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(relativePathPrerequisite);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativePathGoal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativeNoteDaily);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativeNoteWeekly);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativeNoteMonthly);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        resourcelist.add(getrelativePathModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (String[] path : resourcelist) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            File tmpDir \u003d new File(path[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            boolean exists \u003d tmpDir.exists();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (!exists) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                InputStream inputStream"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        \u003d Storage.class.getResourceAsStream(path[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Scanner sc \u003d new Scanner(inputStream);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                FileWriter fw \u003d new FileWriter(path[0], true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                String s;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    s \u003d sc.nextLine() + \"\\n\"; // read a line"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    fw.write(s); // write to output file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    fw.flush();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 3,
      "JasonLeeWeiHern": 25,
      "e0309463": 72,
      "yueyuu": 1
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/StudyAssistPageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class StudyAssistPageStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private String[] relativePathStudyPlanner"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            \u003d {\"Study_Plan.txt\", \"/Study_Plan.txt\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private String relativePathStudyPlannerResource"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            \u003d \"Study_Plan.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private String relativePathPrerequisiteResource"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            \u003d \"Prerequisite.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method reads from Study_Plan.txt, get users\u0027 current module plan"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return double ArrayList storing the table."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if reading went wrong."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cArrayList\u003cString\u003e\u003e readFromStudyPlanFile() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e studyPlan \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        File file \u003d new File(relativePathStudyPlannerResource);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (sc.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                String[] split \u003d sc.nextLine().split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e temp \u003d Arrays.stream(split).collect(Collectors.toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                studyPlan.add(temp);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e temp \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                studyPlan.add(temp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return studyPlan;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method writes to Study_Plan.txt, updates changes in module plan."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param fileContent String of content to be saved."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if the saving process goes wrong."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void writeToStudyPlanFile(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        BufferedWriter fileWriter \u003d new BufferedWriter(new FileWriter(relativePathStudyPlannerResource));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method reads from prerequisite txt file, gets information about courses\u0027 prerequisites."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return a data structure containing information of prerequisites."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if reading went wrong."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFromPrerequisiteFile() throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e prerequisiteList \u003d new HashMap\u003cString, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        File file \u003d new File(relativePathPrerequisiteResource);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String wholeSentence \u003d sc.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String head \u003d wholeSentence.split(\" \")[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e prerequisites \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            for (int i \u003d 1; i \u003c wholeSentence.split(\" \").length; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                prerequisites.add(wholeSentence.split(\" \")[i]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            prerequisiteList.put(head, prerequisites);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return prerequisiteList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 77
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/TasksPageStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class TasksPageStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private final String relativePathResource"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            \u003d \"Save.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Save the task list to Save.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param fileContent concatenate the list into a single string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException exception when there is an error writing to the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void writeToSaveFile(final String fileContent) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(relativePathResource);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.write(fileContent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Read from Save.txt file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @return ArrayList of Tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws FileNotFoundException exception if the file path is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public ArrayList\u003cTask\u003e readFromSaveFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tlist \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        File f \u003d new File(relativePathResource);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            String[] details \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (details[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Todo t \u003d new Todo(details[2].trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    t.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    t.isDone \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(t);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Deadline d \u003d new Deadline(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    d.isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    d.isDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(d);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"E)\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    e.isDone \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    e.isDone \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"P\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                Timebound tb \u003d new Timebound(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    tb.isDone \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    tb.isDone \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(tb);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"FD\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                FixedDuration fd \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    fd.isDone \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    fd.isDone \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(fd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"DA\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                DoAfter da \u003d new DoAfter(details[3].trim(), details[3].trim(), details[2].trim());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    da.isDone \u003d true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    da.isDone \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(da);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (details[0].equals(\"TE\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                ArrayList\u003cString\u003e timeslots \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                for (int i \u003d 3; i \u003c details.length; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    timeslots.add(details[i]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                TentativeEvent te \u003d new TentativeEvent(details[2].trim(), timeslots);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    te.isDone \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    te.isDone \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                tlist.add(te);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                if (details[3].contains(\"at:\") || details[3].contains(\"by:\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Event e \u003d new Event(details[2].trim(), details[3].substring(3).trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        e.isDone \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        e.isDone \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    tlist.add(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else if (details[0].contains(\"P\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    Timebound tb \u003d new Timebound(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        tb.isDone \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        tb.isDone \u003d false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    tlist.add(tb);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    FixedDuration fd \u003d new FixedDuration(details[2].trim(), details[3].trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    if (details[1].equals(\"D\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        fd.isDone \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                        fd.isDone \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    tlist.add(fd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return tlist;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 140
    }
  },
  {
    "path": "src/main/java/gazeeebo/storage/TriviaStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private String relativePathTriviaResource"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            \u003d \"Trivia.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method read Trivia.txt, get users\u0027 past inputs from the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return hash-map of keywords and inputs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws FileNotFoundException if reading fail."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public Map\u003cString, ArrayList\u003cString\u003e\u003e readFromTriviaFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e commandMemory \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        File f \u003d new File(relativePathTriviaResource);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String inputCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (commandMemory.containsKey(inputCommand.split(\" \")[0])) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e oldlist \u003d new ArrayList\u003cString\u003e(commandMemory.get(inputCommand.split(\" \")[0]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                if (!oldlist.contains(inputCommand)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    oldlist.add(inputCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    commandMemory.put(inputCommand.split(\" \")[0], oldlist);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                ArrayList\u003cString\u003e newlist \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                newlist.add(inputCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                commandMemory.put(inputCommand.split(\" \")[0], newlist);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return commandMemory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method writes to Trivia.txt file, record down updates in record of user inputs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param fileContent String of content to be saved"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if the saving process goes wrong."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void writeToTriviaFile(String fileContent) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        File file \u003d new File(relativePathTriviaResource);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (file.exists() \u0026\u0026 !file.canWrite()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"File exists and it is read only, making it writable\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            file.setWritable(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(relativePathTriviaResource, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            bufferedWriter.newLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            bufferedWriter.write(fileContent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            bufferedWriter.flush();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            bufferedWriter.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 63,
      "yueyuu": 5
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");//24h clock"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by, fmtD);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"D\" + \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"by: \" + by.format(fmtD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(by:\" + by.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy HH:mm:ss\")) + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 6,
      "e0309463": 11,
      "yueyuu": 9
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/DoAfter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** task to do before... */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** task to do after ...*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String after;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * constructor of DoAfter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param before before task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param after after task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public DoAfter(final String description,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                   final String before, final String after) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.before \u003d before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.after \u003d after;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Save this format in the txt file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"DA\" + \"|\" + super.getStatusIcon()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|\" + after + \"|\" + before;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[DA]\" + \"[\" + super.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + after + \"(/after:\" + before + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 41
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " * An event object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalTime start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public LocalTime end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"); //formatter for date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\"); //formatter for time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Creates an event object given a description, date and time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @param at contains the date and time of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws DateTimeParseException if the date and time is in the wrong format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the date and/or time is not provided"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] dateTime \u003d at.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.date \u003d LocalDate.parse(dateTime[0], fmtED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.start \u003d LocalTime.parse(time[0], fmtET);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        this.end \u003d LocalTime.parse(time[1], fmtET);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"E\" + \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + \"at: \" + fmtED.format(date)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \" \" + this.start.format(fmtET) + \"-\" + this.end.format(fmtET);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * Formats the event\u0027s description, date and time into the correct format to be printed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     * @return the event as a formatted string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"]\" + super.description + \"(at:\" + dateString + \" \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + this.start.format(fmtET) + \"-\" + this.end.format(fmtET) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 1,
      "yueyuu": 56
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/FixedDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixedDuration extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** Duration of the event.*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Constructor of FixedDuration."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param duration duration of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public FixedDuration(final String description, final String duration) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * save this format into the txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"FD\" + \"|\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + super.getStatusIcon() + \"|\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + super.description + \"|\" + duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Add this format to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return \"[FD]\" + \"[\" + super.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + super.description + \"(requires:\" + duration + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 40
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public int priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Parent class of Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param description Name of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.priority \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return (isDone ? \"D\" : \"ND\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 2,
      "e0309463": 7,
      "yueyuu": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/TentativeEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEvent extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public ArrayList\u003cString\u003e tentativetimes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method initialize a tentative event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param description String of description of event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param tentativetimes Times slots that are possible."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TentativeEvent(String description,ArrayList\u003cString\u003e tentativetimes) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.tentativetimes \u003d tentativetimes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method changes tentative event to a String format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String format of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"TE\" + \"|\" + super.getStatusIcon() + \"|\" + super.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            timeslots +\u003d  \"|\" + tentativetimes.get(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method changes tentative event to String format for saving purpose."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @return String of tentative event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"[TE]\" + \"[\" + super.getStatusIcon() + \"] \" + description + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    .parse(dateTime[0], fmtED)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    .format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    +  LocalTime.parse(time[0], fmtET).format(fmtET)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \"-\" + LocalTime.parse(time[1], fmtET).format(fmtET)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \" + output + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \" + output + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 60,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Timebound.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class Timebound extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public LocalDate dateStart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public LocalDate dateEnd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public static DateTimeFormatter fmtD \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Timebound command, Tasks with a specific time period."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param description Name of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @param period The specific time period of time the task lasts (e.g. 2h)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public Timebound(String description, String period) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String[] date \u003d period.split(\" and \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.dateStart \u003d LocalDate.parse(date[0], fmtD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        this.dateEnd \u003d LocalDate.parse(date[1], fmtD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return \"P\" + \"|\" + super.getStatusIcon() + \"|\" + super.description + \"|\" + dateStart.format(fmtD) + \" and \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + dateEnd.format(fmtD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        return \"[P]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description + \"(between: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + dateStart.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")) + \" and \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + dateEnd.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\")) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 44
    }
  },
  {
    "path": "src/main/java/gazeeebo/tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return \"T\" + \"|\" + super.getStatusIcon() + \"| \" + super.description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public String listFormat() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + super.description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 4,
      "e0309463": 11,
      "yueyuu": 2
    }
  },
  {
    "path": "src/main/java/gazeeebo/triviamanager/TriviaManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package gazeeebo.triviamanager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public static Map\u003cString, ArrayList\u003cString\u003e\u003e CommandMemory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method initialize a trivial manager object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object deals with access, modify and save files."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if the storage methods go wrong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public TriviaManager(TriviaStorage storage) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        this.CommandMemory \u003d storage.readFromTriviaFile();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This methods records and stores users\u0027 inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param inputCommand String of input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param storage The object that deals with access,modify and save files."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if storage process fail."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void learnInput(String inputCommand,TriviaStorage storage) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (CommandMemory.containsKey(inputCommand.split(\" \")[0])) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e oldlist \u003d new ArrayList\u003cString\u003e(CommandMemory.get(inputCommand.split(\" \")[0]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (!oldlist.contains(inputCommand)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                oldlist.add(inputCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                CommandMemory.put(inputCommand.split(\" \")[0], oldlist);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                storage.writeToTriviaFile(inputCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            ArrayList\u003cString\u003e newlist \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            newlist.add(inputCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            CommandMemory.put(inputCommand.split(\" \")[0],newlist);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            storage.writeToTriviaFile(inputCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * This method shows suggestions if user input is empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @param key the type of inputs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws DukeException if now such input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showPossibleInputs(String key) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (CommandMemory.get(key) \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                throw new DukeException(\"Suggestions pool is empty \u003d \u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(\"Could it be one of the below inputs?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(CommandMemory.get(key));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * Test function that prints out the map."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void showAllMap() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        CommandMemory.entrySet().forEach(entry -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            System.out.println(entry.getKey() + \"\\n\" + entry.getValue());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 72
    }
  },
  {
    "path": "src/main/java/gazeeebo/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package gazeeebo.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.PasswordStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Reads the user\u0027s input into the command line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "     * @throws IOException if input is wrong."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void readCommand() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        BufferedReader reader \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                new BufferedReader(new InputStreamReader(System.in));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        fullCommand \u003d reader.readLine().trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * This method prompts the user to input the password"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * to login into GAZEEEBO and print a logo and message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * to welcome the user when he successfully log in."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @return the logo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @throws IOException catch the error if the read file fails."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public String showWelcome() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Input password to enter Gazeeebo:\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String logo \u003d \" ___   ___  ___  ___  ___  ___  ___   ___ \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|     |   |   / |    |    |    |   \\\\ |   |\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|  __ |__ |  /  |___ |___ |___ |___| |   |\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|___| |   | /__ |___ |___ |___ |___/ |___|\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String welcomemessage \u003d \"\\nWelcome to Gazeeebo\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            ArrayList\u003cStringBuilder\u003e passwordList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            PasswordStorage store \u003d new PasswordStorage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            passwordList \u003d store.readFromPasswordFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            if (fullCommand.equals(passwordList.get(0).toString())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(welcomemessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                LocalDate a \u003d LocalDate.now();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Today is \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + a.format(DateTimeFormatter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        .ofLocalizedDate(FormatStyle.FULL)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                System.out.println(\"Incorrect password, please try again:\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        return welcomemessage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * List of major features."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void majorCategories() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cString\u003e majorCategories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"help\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"contacts\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"expenses\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"places\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"tasks\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"cap\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        majorCategories.add(\"spec\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        majorCategories.add(\"moduleplanner\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        majorCategories.add(\"notes\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        majorCategories.add(\"change password\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"\\nContent Page:\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"------------------ \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c majorCategories.size(); i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(i + 1 + \". \" + majorCategories.get(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"To exit: bye\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * Reminder for upcoming tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     * @param list Task list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws ParseException exception when there is an error parsing the date of the task"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void upcomingTask(final ArrayList\u003cTask\u003e list) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003cDeadline\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            if (task.getClass().getName().equals(\"gazeeebo.tasks.Deadline\") \u0026\u0026 !task.isDone) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.description, task.toString().split(\"by:\")[1].trim());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                deadline.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                deadlineList.add(deadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            } else if (task.getClass().getName().equals(\"gazeeebo.tasks.Event\") \u0026\u0026 !task.isDone) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                Event event \u003d new Event(task.description, task.toString().split(\"at:\")[1].trim());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                event.isDone \u003d task.isDone;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                eventList.add(event);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Collections.sort(deadlineList, Comparator.comparing(u -\u003e u.by));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Collections.sort(eventList, Comparator.comparing(u -\u003e u.date));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Upcoming deadlines:\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlineList.size(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(i + 1 + \".\" + deadlineList.get(i).listFormat());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.println(\"Upcoming events:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "            System.out.println(i + 1 + \".\" + eventList.get(i).listFormat());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Shows the progress of the tasks done."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @param list Array list of tasks"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void showProgessiveBar(final ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int undoneNumber \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int doneNumber \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (list.get(i).isDone) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                doneNumber++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                undoneNumber++;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        double progressPercentageTemp \u003d (doneNumber * 1.00 / (doneNumber + undoneNumber) * 1.00) * 100.000;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int progressPercentage \u003d (int) progressPercentageTemp;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StringBuilder progressivebar \u003d new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c progressPercentage / 2; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            progressivebar.append(\"/\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        for (int i \u003d 0; i \u003c (100 - progressPercentage) / 2; i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            progressivebar.append(\"_\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Task progressive: \" + progressivebar.toString() + \"(\" + progressPercentage + \"%)\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showDateFormatError() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.err.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public static void showDeadlineDateFormatError() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    /** Incorrect date input.*/"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public static void showEventDateFormatError() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.println(\"Date Time has to be in \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"YYYY-MM-DD HH:mm:ss-HH:mm:ss format\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void showIoErrorMessage(final Exception e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.err.println(\"An IOException was caught :\" + e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void showSystemTerminateMessage() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.err.println(\"System terminating without an input\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    public void showErrorMessage(final Exception e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    public void showDontKnowErrorMessage() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.out.println(\"OOPS!!! I\u0027m sorry, \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                + \"but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 1,
      "JasonLeeWeiHern": 112,
      "mononokehime14": 23,
      "e0309463": 38,
      "yueyuu": 18
    }
  },
  {
    "path": "src/test/java/GazeeeboTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class GazeeeboTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void test() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(\"An IOException was caught :\" + e.getStackTrace()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                    + \"The system cannot find the path specified\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\",e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testUpcomingTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            ui.upcomingTask(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\",e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            assertEquals(e.getMessage(),e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 56
    }
  },
  {
    "path": "src/test/java/ShowWelcomeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class ShowWelcomeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void test() throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String logo \u003d \" ___   ___  ___  ___  ___  ___  ___   ___ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|     |   |   / |    |    |    |   \\\\ |   |\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|  __ |__ |  /  |___ |___ |___ |___| |   |\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"|___| |   | /__ |___ |___ |___ |___/ |___|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"jjjjjj\".getBytes());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream second \u003d new ByteArrayInputStream(\"jjjry\".getBytes());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(second);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"\\nWelcome to Gazeeebo\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + logo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n__________________________________________\\n\",ui.showWelcome());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 22,
      "e0309463": 3,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/TriviaManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TriviaManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    //private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    //private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        //System.setErr(originalErr);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testLearnInput() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String testinput \u003d \"Love Qinhuai River\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.learnInput(testinput,triviaStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(\"Love Qinhuai River\",triviaManager.CommandMemory.get(\"Love\").get(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testShowPossibleInput() throws IOException, DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String testinput \u003d \"Love Qinhuai River\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager\u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.learnInput(testinput,triviaStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        triviaManager.showPossibleInputs(\"Love\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.print(\"Could it be one of the below inputs?\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//        System.out.print(triviaManager.CommandMemory.get(\"Love\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(\"Could it be one of the below inputs?\\r\\n\"+triviaManager.CommandMemory.get(\"Love\").toString()+\"\\r\\n\",outContent.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 56
    }
  },
  {
    "path": "src/test/java/captest/AddCapCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package captest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.AddCapCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class AddCapCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testAddCapCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"add 1,CS1231,4,A\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddCapCommand test \u003d new AddCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Successfully added: CS1231\\n\", output.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testIncorrectFormatAddCapCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"add 1,CS1231,4,A and 2,EE2026,4,B\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddCapCommand test \u003d new AddCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 54
    }
  },
  {
    "path": "src/test/java/captest/ConvertGradeToScoreCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package captest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.ConvertGradeToScoreCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ConvertGradeToScoreCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertAplustoScoreCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(5.0, test.converter(\"A+\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertAtoScoreCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(5.0, test.converter(\"A\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertAminustoScoreCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(4.5, test.converter(\"A-\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertBplustoScoreCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(4.0, test.converter(\"B+\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertBtoScoreCommand() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(3.5, test.converter(\"B\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertBminustoScoreCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(3.0, test.converter(\"B-\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertCplustoScoreCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(2.5, test.converter(\"C+\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertCtoScoreCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(2.0, test.converter(\"C\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertDplustoScoreCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(1.5, test.converter(\"D+\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertDtoScoreCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(1.0, test.converter(\"D\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertFtoScoreCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(0.0, test.converter(\"F\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testConvertToOtherScoreCommand() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ConvertGradeToScoreCommand test \u003d new ConvertGradeToScoreCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(0.1, test.converter(\"CS\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 105
    }
  },
  {
    "path": "src/test/java/captest/DeleteCapCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package captest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.DeleteCapCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteCapCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteCapCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete CS1231\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteCapCommand test \u003d new DeleteCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Successfully deleted: CS1231\\n\", output.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteNotInCapListCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete CG1111\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteCapCommand test \u003d new DeleteCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"CG1111 is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteIncorrectFormatInCapListCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete CG1111 and CS1231\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteCapCommand test \u003d new DeleteCapCommand(ui, caplist);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 74
    }
  },
  {
    "path": "src/test/java/captest/FindCapCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package captest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.FindCapCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindCapCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK \u003d \"------------------------------\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindByModuleCodeCapCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find CG1112\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindCapCommand test \u003d new FindCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2   | CG1112      | 6  | A\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINEBREAK, output.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindNotInTheCapListCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find CS2101\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindCapCommand test \u003d new FindCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"CS2101 is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindIncorrectFormatInTheCapListCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find cs2101 cs2203\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindCapCommand test \u003d new FindCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 88
    }
  },
  {
    "path": "src/test/java/captest/ListCapCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package captest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.capcalculator.ListCapCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListCapCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private static final String LINEBREAK \u003d \"------------------------------\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private HashMap\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Map\u003cString, ArrayList\u003cCapCommandParser\u003e\u003e caplist \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListAllCapCommand() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list all\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCapCommand test \u003d new ListCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1   | CS1231      | 4  | A\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2   | CG1112      | 6  | A\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINEBREAK"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Total CAP: 5.0\\n\", output.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListSemFoundCapCommand() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list 1\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCapCommand test \u003d new ListCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1   | CS1231      | 4  | A\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + LINEBREAK"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Sem 1 CAP: 5.0\\n\", output.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListSemFoundEmptyCapCommand() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list 3\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCapCommand test \u003d new ListCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Sem | Module code | MC | CAP\\n\" + LINEBREAK"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"No modules in this semester!\\n\", output.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListSemNotFoundCapCommand() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list 1 and 2\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCapCommand test \u003d new ListCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListNonsenseCapCommand() throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap \u003d new CapCommandParser(\"CS1231\", 4, \"A\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newCap);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ArrayList\u003cCapCommandParser\u003e list2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser newCap2 \u003d new CapCommandParser(\"CG1112\", 6, \"A\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list2.add(newCap2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"1\", list);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        caplist.put(\"2\", list2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"list nonsense\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListCapCommand test \u003d new ListCapCommand(ui, caplist, LINEBREAK);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 125
    }
  },
  {
    "path": "src/test/java/captest/MainCapCalculatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package captest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.CapCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class MainCapCalculatorTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMainEscCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String grade \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int moduleCredit \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser test \u003d new CapCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        test.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Assertions.assertEquals(\"Welcome to your CAP Calculator page! What would you like to do?\\n\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. Add module: add semester number,\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"module\u0027s code, module\u0027s credit, module\u0027s grade\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. Find module: find moduleCode\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. Delete a module: delete module\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. See your CAP list: list all/semester number\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. List of commands for CAP page: commands\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. Help page: help\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. Exit CAP page: esc\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nGoing back to Main Menu...\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"To exit: bye\\n\", output.toString()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMainNumCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String grade \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        int moduleCredit \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        CapCommandParser test \u003d new CapCommandParser(moduleCode, moduleCredit, grade);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"7\".getBytes());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        test.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Assertions.assertEquals(\"Welcome to your CAP Calculator page! What would you like to do?\\n\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. Add module: add semester number,\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"module\u0027s code, module\u0027s credit, module\u0027s grade\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. Find module: find moduleCode\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. Delete a module: delete module\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. See your CAP list: list all/semester number\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. List of commands for CAP page: commands\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. Help page: help\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. Exit CAP page: esc\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nGoing back to Main Menu...\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"To exit: bye\\n\", output.toString()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 124
    }
  },
  {
    "path": "src/test/java/contacttest/AddContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contacttest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.AddContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "class AddContactCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testAddContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"add Test,96251822\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddContactCommand test \u003d new AddContactCommand(ui, contact);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Successfully added: Test,96251822\\n\", output.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testIncorrectFormatAddContactsCommand() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"add Test,96251822 and Jason,123412\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        AddContactCommand test \u003d new AddContactCommand(ui, contact);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 56
    }
  },
  {
    "path": "src/test/java/contacttest/DeleteContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contacttest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.DeleteContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DeleteContactCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteInContactsCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9625 1722\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete jason\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Successfully deleted: jason\\n\", output.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteNotInContactsCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete jason\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"jason is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeleteIncorrectFormatContactsCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"delete jason and janel\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DeleteContactCommand test \u003d new DeleteContactCommand(ui, contact);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 67
    }
  },
  {
    "path": "src/test/java/contacttest/FindContactsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contacttest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.FindContactCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FindContactsCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFindContactsCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find jason\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String linebreak \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindContactCommand test \u003d new FindContactCommand(ui, contact);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Name:                         | Number:\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + linebreak"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"jason                         | 9825 1822\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + linebreak, output.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testUnableFindContactCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find jay\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindContactCommand test \u003d new FindContactCommand(ui, contact);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"jay is not found in the list.\\n\", output.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testIncorrectFormatFindContactCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"find janel and jason\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FindContactCommand test \u003d new FindContactCommand(ui, contact);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Please Input in the correct format\\n\", output.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 75
    }
  },
  {
    "path": "src/test/java/contacttest/ListContactCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contacttest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.contact.ListContactCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class ListContactCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testListContactsCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Map\u003cString, String\u003e contact \u003d new TreeMap\u003c\u003e(map);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        String linebreak \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"janel\", \"9625 1722\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        contact.put(\"jason\", \"9825 1822\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ListContactCommand test \u003d new ListContactCommand(contact);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Name:                         | Number:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + linebreak"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"janel                         | 9625 1722\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + linebreak"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"jason                         | 9825 1822\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + linebreak"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nCEG CONTACTS:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNUS CONTACTS:\\n\", output.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 55
    }
  },
  {
    "path": "src/test/java/contacttest/MainContactsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package contacttest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.parser.ContactCommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class MainContactsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testWelcome() throws IOException, DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ContactCommandParser test \u003d new ContactCommandParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        test.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Welcome to your contacts page! What would you like to do?\\n\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"1. Add contacts: add name,number\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"2. Find contacts base on name: find name\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"3. Delete a contact: delete name\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"4. See your contacts list: list\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"5. Undo Command: undo\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"6. List of commands for contacts page: commands\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"7. Help page: help\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"8. Exit contact page: esc\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"__________________________________________________________\\n\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Content Page:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"------------------ \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"1. help\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"2. contacts\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"3. expenses\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"4. places\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"5. tasks\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"6. cap\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"7. spec\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"9. notes\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"10. change password\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"To exit: bye\\n\", output.toString()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 82
    }
  },
  {
    "path": "src/test/java/editcmdtest/EditBothTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package editcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditBothCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditBothTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEventBoth() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"banner rev\", \"2019-12-12 10:10:10-11:00:00\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream((\"basketball trg \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"/at 2019-12-12 09:00:00-11:00:00\").getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Event description and time.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [E][ND]banner rev(at:12 Dec 2019 10:10:10-11:00:00)\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [E][ND]basketball trg (at:12 Dec 2019 09:00:00-11:00:00)\\n\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeadlineBoth() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testE \u003d new Deadline(\"banner rev\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"assignment /by 2019-12-12 09:00:00\".getBytes());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Deadline description and time.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [D][ND] banner rev(by:12 Dec 2019 10:10:10)\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [D][ND] assignment (by:12 Dec 2019 09:00:00)\\n\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFixDurationBoth() throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration testE \u003d new FixedDuration(\"banner rev\", \"1 hour\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"assignment /require 2 hours\".getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your FixDuration description and time.\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [FD][ND] banner rev(requires:1 hour)\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [FD][ND] assignment(requires:2 hours)\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testTimeboundBoth() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Timebound testE \u003d new Timebound(\"banner rev\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream((\"assignment /between \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"2019-08-12 and 2019-09-13\").getBytes());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Timebound description and time.\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [P][ND] banner rev(between: 12 Aug 2019 and 13 Aug 2019)\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [P][ND] assignment(between: 12 Aug 2019 and 13 Sep 2019)\\n\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testNotAbleToEditBoth() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter testE \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream((\"assignment \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"/between 2019-08-12 and 2019-09-13\").getBytes());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditBothCommand test \u003d new EditBothCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description \u0026 date:\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"That input has \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"no time/description to be edited.\\n\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 115
    }
  },
  {
    "path": "src/test/java/editcmdtest/EditDescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package editcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditDescriptionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditDescriptionTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditTodoDescription() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Todo testT \u003d new Todo(\"tutorial homework\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your ToDo description.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [T][ND] tutorial homework\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [T][ND] tutorial assignment\\n\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditDeadlineDescription() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Deadline description.\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [D][ND] tutorial homework(by:12 Dec 2019 10:10:10)\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [D][ND] tutorial assignment(by:12 Dec 2019 10:10:10)\\n\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditEventDescription() throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"Career Talk\", \"2019-12-12 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"Career GE Talk\".getBytes());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Event description.\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [E][ND]Career Talk(at:12 Dec 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [E][ND]Career GE Talk(at:12 Dec 2019 10:10:10-11:11:11)\\n\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditDoAfterDescription() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter testd \u003d new DoAfter(\"brush teeth\", \"brush teeth\", \"sleep\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"bathe /after brush teeth\".getBytes());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your DoAfter description.\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [DA][ND] sleep(/after:brush teeth)\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [DA][ND] bathe(/after:brush teeth)\\n\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditFixDurationDescription() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration testF \u003d new FixedDuration(\"tutorial homework\", \"2 hours\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testF);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your FixedDuration description.\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [FD][ND] tutorial homework(requires:2 hours)\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [FD][ND] tutorial assignment(requires:2 hours)\\n\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEditTimeBoundDescription() throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Timebound testT \u003d new Timebound(\"tutorial homework\", \"2019-10-10 and 2019-11-10\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"tutorial assignment\".getBytes());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditDescriptionCommand test \u003d new EditDescriptionCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your description:\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Timebound description.\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [P][ND] tutorial homework(between: 10 Oct 2019 and 10 Nov 2019)\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [P][ND] tutorial assignment(between: 10 Oct 2019 and 10 Nov 2019)\\n\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 127
    }
  },
  {
    "path": "src/test/java/editcmdtest/EditTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package editcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.edit.EditTimeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class EditTimeTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testDeadlineEditTime() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline testd \u003d new Deadline(\"tutorial homework\", \"2019-12-12 10:10:10\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2020-12-12 11:11:11\".getBytes());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Deadline time.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [D][ND] tutorial homework(by:12 Dec 2019 10:10:10)\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [D][ND] tutorial homework(by:12 Dec 2020 11:11:11)\\n\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testEventEditTime() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event testE \u003d new Event(\"trg\", \"2019-12-12 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2020-12-12 11:11:11-12:12:12\".getBytes());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Event time.\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [E][ND]trg(at:12 Dec 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [E][ND]trg(at:12 Dec 2020 11:11:11-12:12:12)\\n\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testFixDurationEditTime() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        FixedDuration testF \u003d new FixedDuration(\"trg\", \"2 hours\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testF);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"3 hours\".getBytes());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your FixDuration time.\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [FD][ND] trg(requires:2 hours)\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [FD][ND] trg(requires:3 hours)\\n\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testTimeBoundEditTime() throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Timebound testT \u003d new Timebound(\"trg\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2019-08-12 and 2019-09-13\".getBytes());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"Ok, we have edited your Timebound time.\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tFrom: [P][ND] trg(between: 12 Aug 2019 and 13 Aug 2019)\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                        + \"\\n\\tTo:   [P][ND] trg(between: 12 Aug 2019 and 13 Sep 2019)\\n\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testUnableToEditEditTime() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        DoAfter testT \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        tasks.add(testT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ByteArrayInputStream third \u003d new ByteArrayInputStream(\"2019-08-12 and 2019-09-13\".getBytes());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setIn(third);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        EditTimeCommand test \u003d new EditTimeCommand(tasks, ui, 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"Type your time:\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"That input has no time to be edited.\\n\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                output.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 110
    }
  },
  {
    "path": "src/test/java/expensetest/AddExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package expensetest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.AddExpenseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Testing AddExpenseCommand for successful expense addition and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * wrong formats (e.g. date and price format)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class AddExpenseCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Message shown when price format in adding expenses is wrong."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String PRICE_FORMAT_ERROR_MESSAGE \u003d \"Please key in the correct format for money: $__\\r\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Message shown when the date format in adding expenses is wrong."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String WRONG_DATE_FORMAT_ERROR_MESSAGE \u003d \"Wrong date format\\r\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Message shown when general format in adding expenses is wrong."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String INCORRECT_FORMAT_ERROR_MESSAGE \u003d \"Please input in the correct format\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Create UI object that deals with printing things to user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Output stream in which data is written into a byte array."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of actual data values."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of original data values."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test when adding expense is successful."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testAddExpenseCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        oldExpenses.push(expenses);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"add coffee, $4, 2019-09-09\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new AddExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"Successfully added: \\n\" + \"coffee, $4, bought on 2019-09-09\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test the adding of expense in the incorrect format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testAddWrongFormatExpenseCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        oldExpenses.push(expenses);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"add coffee$42019-09-09\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new AddExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertIncorrectFormatErrorMessageDisplayed();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test the adding of expense in the incorrect date format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testAddWrongDateTimeFormatExpenseCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        oldExpenses.push(expenses);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"add coffee,$4,2019-9-09\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new AddExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertWrongDateFormatErrorMessageDisplayed();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test the adding of expense in the incorrect price format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testAddWrongPriceFormatExpenseCommand() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        oldExpenses.push(expenses);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"add coffee,4,2019-09-09\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new AddExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertPriceFormatErrorMessageDisplayed();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Display assertion of price format error message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertPriceFormatErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(PRICE_FORMAT_ERROR_MESSAGE, output.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Display assertion of wrong date format error message."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertWrongDateFormatErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(WRONG_DATE_FORMAT_ERROR_MESSAGE, output.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Display assertion of incorrect format error message."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertIncorrectFormatErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(INCORRECT_FORMAT_ERROR_MESSAGE, output.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 143
    }
  },
  {
    "path": "src/test/java/expensetest/DeleteExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package expensetest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.DeleteExpenseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Testing DeleteExpenseCommand for successful deletion"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * of expenses and deletion of nonexistent items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class DeleteExpenseCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Message shown when user tries to delete nonexistent item."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String ITEM_NOT_FOUND_MESSAGE \u003d \"Item not found!\\r\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Create UI object that deals with printing things to user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Output stream in which data is written into a byte array."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of actual data values."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of original data values."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test when deletion of expense is successful."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException Catch error when read file fails"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testDeleteExpenseCommand() throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        oldExpenses.push(expenses);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"delete book\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new DeleteExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"Successfully deleted: book, $3\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \" | bought on 2019-09-09\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test deleting of nonexistent item."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException Catch error when read file fails"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testDeleteNotInExpenseCommand() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e\u003e oldExpenses \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        oldExpenses.push(expenses);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"delete bread\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new DeleteExpenseCommand(ui, expenses, oldExpenses);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertItemNotFoundErrorMessageDisplayed();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Display assertion of deletion of nonexistent item format error message."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertItemNotFoundErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(ITEM_NOT_FOUND_MESSAGE, output.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 112
    }
  },
  {
    "path": "src/test/java/expensetest/ExpenseCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package expensetest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.parser.ExpenseCommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpenseCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to your expenses page!\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \" What would you like to do?\\r\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"_________________________\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"_________________________________\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"1. Add expenses command: add item, price, date\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"2. Find expenses on a certain date: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"find yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"3. Delete a certain expense: delete OR delete ITEM_NAME\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"4. See your expense list: list\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"5. Undo Command: undo\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"6. List of commands for expenses page: commands\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"7. Help page: help\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"8. Exit Expense page: esc\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"_________________________\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"_________________________________\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"Content Page:\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"------------------ \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"1. help\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"2. contacts\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"3. expenses\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"4. places\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"5. tasks\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"6. cap\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"7. spec\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"9. notes\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"10. change password\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            + \"To exit: bye\\n\\r\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testExpenseCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ExpenseCommandParser expenseCommandParser \u003d new ExpenseCommandParser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenseCommandParser.execute(list, ui, storage, commandStack, deletedTask, triviaManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertWelcomeMessageDisplay();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertWelcomeMessageDisplay() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(WELCOME_MESSAGE,output.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 94
    }
  },
  {
    "path": "src/test/java/expensetest/ExpenseListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package expensetest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.ExpenseListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Testing ExpenseListCommand when list is called."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class ExpenseListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Output stream in which data is written into a byte array."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of actual data values."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of original data values."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test the displaying of expense list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testExpenseListCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList2.add(\"bread, $2.50\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String breadDate \u003d \"2019-04-04\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate breadDateOfPurchase \u003d LocalDate.parse(breadDate, fmt);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(breadDateOfPurchase, itemAndPriceList2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new ExpenseListCommand(expenses);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"Here is the list of your expenses:\\r\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1. bread, $2.50 | bought on 2019-04-04\\r\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2. book, $3 | bought on 2019-09-09\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 75
    }
  },
  {
    "path": "src/test/java/expensetest/FindExpenseCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package expensetest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.expenses.FindExpenseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class FindExpenseCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String WRONG_DATE_FORMAT_ERROR_MESSAGE \u003d \"Wrong date format\\r\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private static final String INCORRECT_FORMAT_ERROR_MESSAGE \u003d \"Please input in the correct format\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testFindExpenseCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList2.add(\"bread, $2.50\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String breadDate \u003d \"2019-04-04\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate breadDateOfPurchase \u003d LocalDate.parse(breadDate, fmt);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(breadDateOfPurchase, itemAndPriceList2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"find 2019-09-09\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        FindExpenseCommand test \u003d new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"1.book, $3\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testUnableFindExpenseCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList2.add(\"bread, $2.50\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String breadDate \u003d \"2019-04-04\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate breadDateOfPurchase \u003d LocalDate.parse(breadDate, fmt);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(breadDateOfPurchase, itemAndPriceList2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"find 2018-03-09\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"2018-03-09 is not found in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testIncorrectDateFormatFindExpenseCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList2.add(\"bread, $2.50\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String breadDate \u003d \"2019-04-04\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate breadDateOfPurchase \u003d LocalDate.parse(breadDate, fmt);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(breadDateOfPurchase, itemAndPriceList2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"find 2019-9-9\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertWrongDateFormatErrorMessageDisplayed();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testIncorrectFormatFindExpenseCommand() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        HashMap\u003cLocalDate, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Map\u003cLocalDate, ArrayList\u003cString\u003e\u003e expenses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cString\u003e itemAndPriceList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList1.add(\"book, $3\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        itemAndPriceList2.add(\"bread, $2.50\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String bookDate \u003d \"2019-09-09\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        String breadDate \u003d \"2019-04-04\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        DateTimeFormatter fmt \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate bookDateOfPurchase \u003d LocalDate.parse(bookDate, fmt);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        LocalDate breadDateOfPurchase \u003d LocalDate.parse(breadDate, fmt);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(bookDateOfPurchase, itemAndPriceList1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        expenses.put(breadDateOfPurchase, itemAndPriceList2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"find\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        new FindExpenseCommand(ui, expenses);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertIncorrectFormatErrorMessageDisplayed();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertWrongDateFormatErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(WRONG_DATE_FORMAT_ERROR_MESSAGE, output.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private void assertIncorrectFormatErrorMessageDisplayed() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(INCORRECT_FORMAT_ERROR_MESSAGE, output.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 135
    }
  },
  {
    "path": "src/test/java/generalnotepagetest/GeneralNotePageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package generalnotepagetest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class GeneralNotePageTest extends GeneralNotePage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EMPTY_DESCRIPTION \u003d \"The description of the command cannot be empty.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void createNewNotePage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        goal \u003d \"i want to be a rock star\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        modules.add(new Module(\"cs2101\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editGoal_userInputsAGoal_success() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        editGoal(\"hello\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully updated your goal to:\\r\\n\" + \"hello\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editGoal_userDoesNotInputGoal_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editGoal(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(EMPTY_DESCRIPTION, d.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addModule_noModuleProvided_exceptionThrown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            addModule(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(EMPTY_DESCRIPTION, d.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addModule_addingAnExistingModule_errorMessageShown() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        addModule(\"cs2101\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"You already have a module with the same name. \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Please add a module with a different name.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addModule_addingANotExistingModule_success() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        addModule(\"cs2113t\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully added this module:\\r\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"cs2113t\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteModule_moduleNotProvided_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            deleteModule(\"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(EMPTY_DESCRIPTION, d.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteModule_moduleNonExistent_errorMessageShown() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        deleteModule(\"cg2028\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Sorry there is no such module.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteModule_moduleExists_success() throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        deleteModule(\"cs2101\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully deleted this module:\\r\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"cs2101\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 105
    }
  },
  {
    "path": "src/test/java/moduletest/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package moduletest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Assessment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.GeneralNotePage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private static final String EMPTY_DESCRIPTION \u003d \"The description of the command cannot be empty.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Module module \u003d new Module(\"cg2028\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private GeneralNotePage gnp \u003d new GeneralNotePage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupPages() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.assessments.add(new Assessment(\"project\", 45));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.miscellaneousInfo.add(\"no webcasts\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editName_newNameExists_errorMessageShown() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        gnp.addModule(\"cg1111\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.editName(\"cg1111\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully added this module:\\r\\n\" + \"cg1111\\r\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"You already have a module with the same name. Please use a different name.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        gnp.deleteModule(\"cg1111\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editName_newNameDoesNotAlreadyExist_success() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.editName(\"cg1112\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully updated the module name to:\\r\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"cg1112\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addAssessment_weightageIsAString_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.addAssessment(\"exam /ahello\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a number for the weightage.\", d.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addAssessment_weightageIsANegativeNum_exceptionThrown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.addAssessment(\"exam /a-35\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a positive number for the weightage.\", d.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addAssessment_noWeightageGivenAndGotSlashA_exceptionThrown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.addAssessment(\"exam /a\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a weightage.\", d.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addAssessment_noWeightageGivenAndNoSlashA_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.addAssessment(\"exam \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input the command in the format \\\u0027add assmt /n NAME /a WEIGHTAGE\\\u0027.\", d.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addAssessment_weightageGivenIsPositive_success() throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.addAssessment(\"exam /a 45\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully added this assessment:\\r\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"exam (45%)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editAssessmentName_assmtNameNotProvidedAndGotSlashA_exceptionThrown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.editAssessmentName(\"1 /a\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a new assessment name.\", d.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editAssessmentName_assmtNameNotProvidedAndNoSlashA_exceptionThrown() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.editAssessmentName(\"1 \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input the command in the format \\\u0027edit assmt /n INDEX /a NEW_NAME\\\u0027.\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    d.getMessage());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editAssessmentName_noDescriptionAtAll_exceptionThrown() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.editAssessmentName(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(EMPTY_DESCRIPTION, d.getMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editAssessmentName_inputFormatCorrect_success() throws DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.editAssessmentName(\"1 /a new assmt\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully changed the name of \\\"project (45%)\\\" to:\\r\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"new assmt\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editAssessmentWeightage_weightageIsaPositiveNumber_success() throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.editAssessmentWeightage(\"1 /a 34\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully changed the weightage to:\\r\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"34%\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteAssessment_indexIsAPositiveNumber_success() throws DukeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.deleteAssessment(\"1\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully deleted this assessment:\\r\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"project (45%)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteAssessment_indexIsANegativeNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.deleteAssessment(\"-10\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Sorry there is no such index.\", d.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteAssessment_indexIsZero_exceptionThrown() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.deleteAssessment(\"0\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Sorry there is no such index.\", d.getMessage());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteAssessment_indexIsAString_exceptionThrown() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.deleteAssessment(\"*\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a number for the index.\", d.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addMiscellaneous_descriptionProvided_success() throws DukeException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.addMiscellaneous(\"new msc\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully added this miscellaneous information:\\r\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"new msc\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void addMiscellaneous_descriptionIsEmpty_exceptionThrown() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.addMiscellaneous(\"\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(EMPTY_DESCRIPTION, d.getMessage());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editMiscellaneous_descriptionProvided_success() throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.editMiscellaneous(\"1 /aedited msc\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully changed \\\"no webcasts\\\" to:\\r\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"edited msc\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editMiscellaneous_newMscNotProvidedAndWithSlashA_exceptionThrown() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.editMiscellaneous(\"1 /a\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a new miscellaneous information.\", d.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editMiscellaneous_newMscNotProvidedAndWithoutSlashA_exceptionThrown() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.editMiscellaneous(\"1\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input the command in the format \\\u0027edit msc /n INDEX /a NEW_DESCRIPTION\\\u0027.\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                    d.getMessage());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteMiscellaneous_indexIsAPositiveNum_success() throws DukeException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        module.deleteMiscellaneous(\"1\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Okay we have successfully deleted this miscellaneous information:\\r\\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"no webcasts\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteMiscellaneous_indexIsZero_exceptionThrown() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.deleteMiscellaneous(\"0\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Sorry there is no such index.\", d.getMessage());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteMiscellaneous_indexIsNegative_exceptionThrown() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.deleteMiscellaneous(\"-2\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Sorry there is no such index.\", d.getMessage());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void deleteMiscellaneous_indexIsString_exceptionThrown() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            module.deleteMiscellaneous(\"#\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a number for the index.\", d.getMessage());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 269
    }
  },
  {
    "path": "src/test/java/note/AddNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.AddNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class AddNoteCommandTest extends AddNoteCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //processCommand() tests"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote\".split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! The description of a(n) addNote cannot be empty.\", d.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongSecondWord_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote weekly 2019-09-09\".split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The second word in the command has to be \\\u0027day\\\u0027, \\\u0027week\\\u0027 or \\\u0027month\\\u0027.\", d.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_emptyDateField_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote day\".split(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"Please input a date.\", d.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForDay_exceptionThrown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote day 2019-1-1\".split(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM-DD format.\", d.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForWeek_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote week 2019-2-1\".split(\" \"); //this date is not a Monday"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM-DD format.\", d.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_wrongDateFormatForMonth_exceptionThrown() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote month 2019-2-1\".split(\" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"The date has to been in YYYY-MM format.\", d.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void processCommand_dateForWeekIsNotMonday_exceptionThrown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d \"addNote week 2019-02-01\".split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! The date provided must be a Monday.\", d.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //execute() tests"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"addNote day 2019-10-12\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that day:\\r\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that day.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"addNote week 2019-10-14\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that week:\\r\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that week.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"addNote month 2019-12\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"addNote\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"testing note\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note noteSpecified;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.daily, userDate, usersNote, command[2], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.weekly, userDate, usersNote, command[2], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d addToList(NoteList.monthly, userDate, usersNote, command[2], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                noteSpecified \u003d null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assert noteSpecified !\u003d null : \"there is a bug in AddNoteCommand\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printConfirmationMessage(usersNote, noteSpecified.notes.size(), command[1]);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"The \" + command[1] + \" file cannot be opened.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this note to that month:\\r\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"testing note\\r\\n\" + \"Now you have 1 note(s) for that month.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 236
    }
  },
  {
    "path": "src/test/java/note/DeleteNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.DeleteNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class DeleteNoteCommandTest extends DeleteNoteCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-09-11\", \"note 1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote day 2020-09-11 2\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that day:\\r\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-01-06\", \"note 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.weekly.add(note);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote week 2020-01-06 2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that week:\\r\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-03-01\", \"note 1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.monthly.add(note);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote month 2020-03 2\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve deleted this note for that month:\\r\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"note 2\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNotSpecified_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote month 2020-03\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please specify a note number.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNonExistent_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2020-09-11\", \"note 1\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote day 2020-09-11 3\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"OOPS!!! That note number does not exist.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noNotesOnSpecifiedDay_errorMessagePrinted() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"deleteNote day 2020-12-29 3\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"OOPS!!! There are no notes for this day to delete.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 92
    }
  },
  {
    "path": "src/test/java/note/EditNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.EditNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class EditNoteCommandTest extends EditNoteCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editNoteInList_noteNumberNonExistent_exceptionThrown() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(new Note(\"2019-08-11\", \"note to be edited\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-08-11\", Note.noteFormatter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editNoteInList(3, NoteList.daily, date, \"edited note\", \"day\", \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! That note number does not exist.\", d.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void editNoteInList_noNotesOnSpecifiedDay_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2019-06-03\", Note.noteFormatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            editNoteInList(1, NoteList.weekly, date, \"edited note\", \"week\", \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            assertEquals(\"OOPS!!! There are no notes for this week to edit from.\", d.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noteNumberNotSpecified_errorMessagePrinted() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote day 2019-08-11\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Please specify a note number.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_day_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(new Note(\"2019-08-11\", \"note to be edited\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote day 2019-08-11 1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that day:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_week_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.weekly.add(new Note(\"2019-10-14\", \"note to be edited\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote week 2019-10-14 1\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that week:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_month_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.monthly.add(new Note(\"2019-08-01\", \"note to be edited\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"editNote month 2019-08 1\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String[] command \u003d ui.fullCommand.split(\" \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        LocalDate userDate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            userDate \u003d processCommand(command, \"editNote\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        int noteNum;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            noteNum \u003d Integer.parseInt(command[3]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException v) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            System.out.println(\"Please specify a note number.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        String usersNote \u003d \"updated note\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            switch (command[1]) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"day\": editNoteInList(noteNum, NoteList.daily, userDate, usersNote, command[1], \"NoteDaily.txt\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"week\": editNoteInList(noteNum, NoteList.weekly, userDate, usersNote, command[1], \"NoteWeekly.txt\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            case \"month\": editNoteInList(noteNum, NoteList.monthly, userDate, usersNote, command[1], \"NoteMonthly.txt\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            default: System.out.println(\"Bug in EditNoteCommand\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                System.exit(1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            printEditSuccess(usersNote, command[1]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (DukeException d) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ui.showErrorMessage(d);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve edited this note for that month:\\r\\n\" + \"updated note\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 192
    }
  },
  {
    "path": "src/test/java/note/ListNoteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "//@@author yueyuu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package note;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.note.ListNoteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.notes.NoteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class ListNoteCommandTest extends ListNoteCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_notesExistForTheSpecifiedPeriod_success() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Note note \u003d new Note(\"2019-11-12\", \"note 1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        note.notes.add(\"note 3\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        NoteList.daily.add(note);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"listNote day 2019-11-12\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Here are your notes for that day:\\r\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"1. note 1\\r\\n2. note 2\\r\\n3. note 3\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_noNotesExistForTheSpecifiedPeriod_success() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"listNote month 2019-10\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        execute(null, ui, null, null, null,null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"There are no notes for that month.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 52
    }
  },
  {
    "path": "src/test/java/placestest/PlacesAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package placestest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.AddPlacesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class PlacesAddCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testAddPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(places);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"add-Test,COM3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        AddPlacesCommand test \u003d new AddPlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Successfully added :Test,COM3\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testAddWrongPlacesCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(places);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"add-TestCOM3\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        AddPlacesCommand test \u003d new AddPlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Please input add command in the correct format\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0309463": 62
    }
  },
  {
    "path": "src/test/java/placestest/PlacesDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package placestest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.DeletePlacesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class PlacesDeleteCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteInPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT19\", \"COM5\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete-LT19\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeletePlacesCommand test \u003d new DeletePlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Successfully deleted: LT19\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteNotInPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(places);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT19\", \"COM5\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete-LT30\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeletePlacesCommand test \u003d new DeletePlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"LT30 is not found in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteWrongFormatPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(places);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT19\", \"COM5\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete -\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeletePlacesCommand test \u003d new DeletePlacesCommand(ui, places, oldplaces);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Please input delete command in the correct format\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0309463": 74
    }
  },
  {
    "path": "src/test/java/placestest/PlacesFindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package placestest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.FindPlacesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class PlacesFindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * test find places command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException exception when there is an error reading the command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testFindPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT50\", \"COM6\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT20\", \"COM7\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"find-LT20\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FindPlacesCommand test \u003d new FindPlacesCommand(ui,places);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"LT20                                              | COM7\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"------------------------------------------\\n\", output.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0309463": 56
    }
  },
  {
    "path": "src/test/java/placestest/PlacesListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package placestest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.ListPlacesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class PlacesListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * test list command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when file cannot be read"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testListPlacesCommand() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e(); //Read the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        String linebreak \u003d \"------------------------------------------\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT50\", \"COM6\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT20\", \"COM7\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ListPlacesCommand test \u003d new ListPlacesCommand(places);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Room:                                             | Location:\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"------------------------------------------\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"LT20                                              | COM7\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"------------------------------------------\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"LT50                                              | COM6\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"------------------------------------------\\n\", output.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0309463": 60
    }
  },
  {
    "path": "src/test/java/placestest/PlacesParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package placestest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parser.PlacesCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class PlacesParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testPlaceCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        PlacesCommandParser placesCommandParser \u003d new PlacesCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"esc\".getBytes());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setIn(in);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        placesCommandParser.execute(list,ui,storage,commandStack,deletedTask,triviaManager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Welcome to your places in SOC! What would you like to do?\\r\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"1. Add location: add-room,location\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"2. Find a place in SOC: find-place\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"3. Delete a place: delete-place\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"4. See all places in SOC: list\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"5. Undo previous command: undo\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"6. See all commands: commands\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"7. Help command: help\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"8. Exit places: esc\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"__________________________________________________________\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Going back to Main Menu...\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Content Page:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"------------------ \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"1. help\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"2. contacts\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"3. expenses\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"4. places\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"5. tasks\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"6. cap\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"7. spec\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"8. moduleplanner\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"9. notes\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"10. change password\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"To exit: bye\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\",output.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0309463": 83
    }
  },
  {
    "path": "src/test/java/placestest/PlacesUndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package placestest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.places.UndoPlacesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "public class PlacesUndoCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testUndoPlacesCommand() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Map\u003cString, String\u003e places \u003d new TreeMap\u003cString, String\u003e(map);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cMap\u003cString, String\u003e\u003e oldplaces \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        oldplaces.push(places);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        places.put(\"LT50\", \"COM6\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        UndoPlacesCommand undoTest \u003d new UndoPlacesCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        undoTest.undoPlaces(places,oldplaces);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"You have undo the previous command.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 55
    }
  },
  {
    "path": "src/test/java/studyAssistTest/addModuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package studyAssistTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.StudyPlannerCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class addModuleCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_emptyException() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"add\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new AddModuleCommand().execute(StudyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please follow the correct input format~\",e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_wrongModuleException() throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"add CD1234 to 5\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new AddModuleCommand().execute(StudyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"We currently do not support this module.\",e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_wrongSemesterException() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"add CS2040C to 9\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new AddModuleCommand().execute(StudyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please input correct Semester number.\",e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_wrongFormatException() throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"add CS2040C to\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new AddModuleCommand().execute(StudyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e){"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please follow the correct input format~\",e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_duplicatedModuleException() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"add CS2113T sem 5\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new AddModuleCommand().execute(StudyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"This module is already inside the study plan\",e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModuleTest() throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand StudyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(StudyPlan.StudyPlan);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"add CS2040C sem 5\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String ModuleCode \u003d \"CS2040C\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for(int i\u003d0;i\u003cStudyPlan.StudyPlan.size()\u0026\u0026 !flag;i++){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if(StudyPlan.StudyPlan.get(i).contains(ModuleCode)) flag \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if(flag){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new AddModuleCommand().execute(StudyPlan, studyAssistPageStorage, ui, oldStudyPlan);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module is already inside the study plan\", e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new AddModuleCommand().execute(StudyPlan, studyAssistPageStorage, ui, oldStudyPlan);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//            fail();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module \" + ModuleCode + \" has been successfully added to Sem\" + 5+\".\", e.getMessage());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 146
    }
  },
  {
    "path": "src/test/java/studyAssistTest/checkPrerequisiteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package studyAssistTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.CheckPrerequisiteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class checkPrerequisiteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void checkPrerequisite_wrongModuleException(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003dnew Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"prerequisite CS2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new CheckPrerequisiteCommand().execute(ui,studyAssistPageStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException | IOException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"We currently do not support this module\",e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void checkPrerequisiteTest(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003dnew Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"prerequisite CS2040C\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new CheckPrerequisiteCommand().execute(ui,studyAssistPageStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }catch (DukeException | IOException e){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"CS2040C\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    \"└── CS1010\\n\",outContent.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 58
    }
  },
  {
    "path": "src/test/java/studyAssistTest/deleteModuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package studyAssistTest;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.StudyPlannerCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.DeleteModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class deleteModuleCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void deleteModule_emptyException() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new DeleteModuleCommand().execute(studyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please follow the correct input format~\",e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void deleteModule_wrongModuleException() throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"delete CD1234 from 5\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new DeleteModuleCommand().execute(studyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"We currently do not have this module.\",e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_wrongSemesterException() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"delete CS2040C from 9\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new DeleteModuleCommand().execute(studyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please input correct Semester number.\",e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_wrongFormatException() throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"delete CS2040C from\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new DeleteModuleCommand().execute(studyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please follow the correct input format~\",e.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void addModule_not_existModuleException() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"delete CS3230 sem 5\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new DeleteModuleCommand().execute(studyPlan,studyAssistPageStorage,ui,oldStudyPlan);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"This module is not inside the study plan\",e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void deleteModuleTest() throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e oldStudyPlan \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        oldStudyPlan.push(studyPlan.StudyPlan);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"delete CS2040C from 5\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String moduleCode \u003d \"CS2040C\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int semester_number \u003d -1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c studyPlan.StudyPlan.size() \u0026\u0026 !flag;i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (studyPlan.StudyPlan.get(i).contains(moduleCode)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                semester_number \u003d i;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (!flag) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new DeleteModuleCommand().execute(studyPlan, studyAssistPageStorage, ui,oldStudyPlan);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module is not inside the study plan\", e.getMessage());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (flag \u0026\u0026 semester_number !\u003d semester) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new DeleteModuleCommand().execute(studyPlan, studyAssistPageStorage, ui, oldStudyPlan);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module is not in Sem \" + (semester + 1) + \" but inside Sem \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + (semester_number + 1), e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new DeleteModuleCommand().execute(studyPlan, studyAssistPageStorage, ui,oldStudyPlan);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module \" + moduleCode + \" has been successfully deleted from Sem\" + 5"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + \".\", e.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 158
    }
  },
  {
    "path": "src/test/java/studyAssistTest/shiftModuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "//@@author mononokehime14"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package studyAssistTest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.StudyPlannerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.studyassist.ShiftModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.StudyAssistPageStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "class shiftModuleCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void shiftModule_emptyException() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"shift\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new ShiftModuleCommand().execute(studyPlan,studyAssistPageStorage,ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please follow the correct input format~\",e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void shiftModule_wrongModuleException() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"shift CD1234 to 5\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new ShiftModuleCommand().execute(studyPlan,studyAssistPageStorage,ui);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"We currently do not support this module.\",e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void shiftModule_wrongSemesterException() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"shift CS2040C to 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new ShiftModuleCommand().execute(studyPlan,studyAssistPageStorage,ui);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please input correct Semester number.\",e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void shiftModule_wrongFormatException() throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"shift CS2040C to\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new ShiftModuleCommand().execute(studyPlan,studyAssistPageStorage,ui);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"Please follow the correct input format~\",e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void shiftModule_existedModuleException() throws IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"shift CS2040C to 2\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            new ShiftModuleCommand().execute(studyPlan,studyAssistPageStorage,ui);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            assertEquals(\"This module is already inside Sem \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + (Integer.parseInt(ui.fullCommand.split(\" \")[3])) + \".\",e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    void shiftModuleTest() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyAssistPageStorage studyAssistPageStorage \u003d new StudyAssistPageStorage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        StudyPlannerCommand studyPlan \u003d new StudyPlannerCommand(studyAssistPageStorage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"shift CS2040C sem 2\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String moduleCode \u003d \"CS2040C\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int Semester \u003d Integer.parseInt(ui.fullCommand.split(\" \")[3]) - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int semesterNumber \u003d -1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0;i \u003c studyPlan.StudyPlan.size() \u0026\u0026 !flag; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (studyPlan.StudyPlan.get(i).contains(moduleCode)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                semesterNumber \u003d i;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        if (!flag) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ShiftModuleCommand().execute(studyPlan, studyAssistPageStorage, ui);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module is not inside the study plan\", e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else if (Semester \u003d\u003d semesterNumber) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ShiftModuleCommand().execute(studyPlan, studyAssistPageStorage, ui);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module is already inside Sem \" + (Semester+1) + \".\", e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                new ShiftModuleCommand().execute(studyPlan, studyAssistPageStorage, ui);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                assertEquals(\"This module \" + moduleCode + \" has been successfully shifted to Sem\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                        + (Semester + 1) + \".\", e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 144
    }
  },
  {
    "path": "src/test/java/taskcmdtest/CalendarViewTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.CalendarView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class CalendarViewTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void leapYearTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertTrue(calendarView.isLeapYear(2020));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertFalse(calendarView.isLeapYear(2019));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void startDayTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(3, calendarView.startDay(10,23,2019));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void monthlyViewTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"test\",\"2019-11-12 12:12:12\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        calendarView.monthlyView(list,11,2019, 10);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"          November 2019\\r\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                            1    2 \\r\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   3    4    5    6    7    8    9 \\r\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \" |10|  11  12*   13   14   15   16 \\r\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  17   18   19   20   21   22   23 \\r\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  24   25   26   27   28   29   30 \\r\\n\", output.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    public void annualViewTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        CalendarView calendarView \u003d new CalendarView();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"test\",\"2019-10-12 12:12:12\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        list.add(deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        calendarView.annualView(list, 11, 2019,6);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"          January 2019\\r\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"             1    2    3    4    5 \\r\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   6    7    8    9   10   11   12 \\r\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  13   14   15   16   17   18   19 \\r\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  20   21   22   23   24   25   26 \\r\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  27   28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          February 2019\\r\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                            1    2 \\r\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   3    4    5    6    7    8    9 \\r\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  10   11   12   13   14   15   16 \\r\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  17   18   19   20   21   22   23 \\r\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  24   25   26   27   28 \\r\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          March 2019\\r\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                            1    2 \\r\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   3    4    5    6    7    8    9 \\r\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  10   11   12   13   14   15   16 \\r\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  17   18   19   20   21   22   23 \\r\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  24   25   26   27   28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          April 2019\\r\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"        1    2    3    4    5    6 \\r\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   7    8    9   10   11   12   13 \\r\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  14   15   16   17   18   19   20 \\r\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  21   22   23   24   25   26   27 \\r\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          May 2019\\r\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                  1    2    3    4 \\r\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   5    6    7    8    9   10   11 \\r\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  12   13   14   15   16   17   18 \\r\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  19   20   21   22   23   24   25 \\r\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  26   27   28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          June 2019\\r\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                                 1 \\r\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   2    3    4    5    6    7    8 \\r\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   9   10   11   12   13   14   15 \\r\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  16   17   18   19   20   21   22 \\r\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  23   24   25   26   27   28   29 \\r\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  30 \\r\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          July 2019\\r\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"        1    2    3    4    5    6 \\r\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   7    8    9   10   11   12   13 \\r\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  14   15   16   17   18   19   20 \\r\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  21   22   23   24   25   26   27 \\r\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          August 2019\\r\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                       1    2    3 \\r\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   4    5    6    7    8    9   10 \\r\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  11   12   13   14   15   16   17 \\r\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  18   19   20   21   22   23   24 \\r\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  25   26   27   28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          September 2019\\r\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   1    2    3    4    5    6    7 \\r\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   8    9   10   11   12   13   14 \\r\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  15   16   17   18   19   20   21 \\r\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  22   23   24   25   26   27   28 \\r\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  29   30 \\r\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          October 2019\\r\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"             1    2    3    4    5 \\r\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   6    7    8    9   10   11  12* \\r\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  13   14   15   16   17   18   19 \\r\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  20   21   22   23   24   25   26 \\r\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  27   28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          November 2019\\r\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"                            1    2 \\r\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   3    4    5   |6|   7    8    9 \\r\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  10   11   12   13   14   15   16 \\r\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  17   18   19   20   21   22   23 \\r\\n\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  24   25   26   27   28   29   30 \\r\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"\\r\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"          December 2019\\r\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  S    M    Tu   W    Th   F    S\\r\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   1    2    3    4    5    6    7 \\r\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"   8    9   10   11   12   13   14 \\r\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  15   16   17   18   19   20   21 \\r\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  22   23   24   25   26   27   28 \\r\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  29   30 \\r\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"  31 \\r\\n\", output.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 171
    }
  },
  {
    "path": "src/test/java/taskcmdtest/CategoryListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.tasks.CategoryListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Testing CategoryListCommand when calling todo, deadline and event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * lists, and nonexistent list error."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class CategoryListCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Output stream in which data is written into a byte array."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of actual data values."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of original data values."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test calling category todo list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of tag command is wrong"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if reading of file fails"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testTodoCategoryTest() throws ParseException,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            IOException, DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"todo list\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl1 \u003d new Deadline(\"assignment\", \"2019-02-01 12:12:12\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl2 \u003d new Deadline(\"essay\", \"2019-01-03 01:01:01\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e1 \u003d new Event(\"project meeting\", \"2018-09-09 07:00:00-09:00:00\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e2 \u003d new Event(\"gathering\", \"2019-09-09 12:00:00-13:00:00\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td1 \u003d new Todo(\"go to lecture\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td2 \u003d new Todo(\"do tutorials\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        final TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        CategoryListCommand catList \u003d new CategoryListCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catList.execute(list, ui, storage, commandStack,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deletedTask, triviaManager);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"List of todo tasks:\\r\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1.[T][ND] go to lecture\\r\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2.[T][ND] do tutorials\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test calling category event list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of tag command is wrong"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if reading of file fails"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testEventCategoryTest() throws ParseException,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            IOException, DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"event list\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl1 \u003d new Deadline(\"assignment\", \"2019-02-01 12:12:12\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl2 \u003d new Deadline(\"essay\", \"2019-01-03 01:01:01\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e1 \u003d new Event(\"project meeting\", \"2018-09-09 07:00:00-09:00:00\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e2 \u003d new Event(\"gathering\", \"2019-09-09 12:00:00-13:00:00\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td1 \u003d new Todo(\"go to lecture\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td2 \u003d new Todo(\"do tutorials\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        CategoryListCommand catList \u003d new CategoryListCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catList.execute(list, ui, storage, commandStack,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deletedTask, triviaManager);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"List of events tasks:\\r\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1.[E][ND]project meeting\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"(at:09 Sep 2018 07:00:00-09:00:00)\\r\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2.[E][ND]gathering\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"(at:09 Sep 2019 12:00:00-13:00:00)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test calling category deadline list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if reading of file fails"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testDeadlineCategoryTest() throws ParseException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            IOException, DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"deadline list\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl1 \u003d new Deadline(\"assignment\", \"2019-02-01 12:12:12\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl2 \u003d new Deadline(\"essay\", \"2019-01-03 01:00:00\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e1 \u003d new Event(\"project meeting\", \"2018-09-09 07:00:00-09:00:00\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e2 \u003d new Event(\"gathering\", \"2019-09-09 12:00:00-13:00:00\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td1 \u003d new Todo(\"go to lecture\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td2 \u003d new Todo(\"do tutorials\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        CategoryListCommand catList \u003d new CategoryListCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catList.execute(list, ui, storage, commandStack,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deletedTask, triviaManager);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"List of deadlines tasks:\\r\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1.[D][ND] assignment\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"(by:01 Feb 2019 12:12:12)\\r\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2.[D][ND] essay\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"(by:03 Jan 2019 01:00:00)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test calling nonexistent category list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if reading of file fails"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testNoListCategoryTest() throws ParseException,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            IOException, DukeException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"abc list\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl1 \u003d new Deadline(\"assignment\", \"2019-02-01 12:12:12\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl2 \u003d new Deadline(\"essay\", \"2019-01-03 01:00:00\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e1 \u003d new Event(\"project meeting\", \"2018-09-09 07:00:00-09:00:00\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e2 \u003d new Event(\"gathering\", \"2019-09-09 12:00:00-13:00:00\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td1 \u003d new Todo(\"go to lecture\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td2 \u003d new Todo(\"do tutorials\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(dl2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(e2);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        list.add(td2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        CategoryListCommand catList \u003d new CategoryListCommand();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        catList.execute(list, ui, storage, commandStack,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deletedTask, triviaManager);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"\", output.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "e0323290": 219
    }
  },
  {
    "path": "src/test/java/taskcmdtest/DeadlineCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test deadline line command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeadlineCommand() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"deadline sleep/by 2019-12-12 12:03:03\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deadlineCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException | IOException e1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"[D][ND] sleep(by:12 Dec 2019 12:03:03)\\r\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Now you have 1 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test invalid deadline command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testWrongDeadlineCommand() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"deadline sleep/by 2019-12-2 12:03:03\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deadlineCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException | IOException e1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Date Time has to be in YYYY-MM-DD HH:mm:ss format\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 94
    }
  },
  {
    "path": "src/test/java/taskcmdtest/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of invalid delete command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testWrongDeleteCommand() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete chemistry homework\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deleteCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Wrong input for delete command\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of delete command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteCommand() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete 1\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deleteCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task: \\r\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"[T][ND] chemistry homework\\r\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Now you have 0 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of empty delete command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testEmptyDeleteCommand() throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deleteCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"OOPS!!! The description of a deletion cannot be empty.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of delete all command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testDeleteAllCommand() throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"delete all\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            deleteCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed all the tasks.\\r\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Now you have 0 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 151
    }
  },
  {
    "path": "src/test/java/taskcmdtest/DoAfterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package taskcmdtest;//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class DoAfterCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    DoAfter testdoAfter \u003d new DoAfter(\"read book\",\"read book\",\"return book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"DA|ND|return book|read book\", testdoAfter.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"[DA][ND] return book(/after:read book)\", testdoAfter.listFormat());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 22,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/taskcmdtest/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "package taskcmdtest;//@@author yueyuu"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.commands.tasks.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "class EventCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash1() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of clashing events are the same"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 03:03:03-04:04:04\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ec.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"[E][ND]sleep(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash2() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is earlier than old event but clash still occurs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 02:03:03-03:10:04\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ec.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"[E][ND]sleep(at:12 Dec 2019 02:03:03-03:10:04)\\r\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_clash3() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        //start time of new event being added is after that of old event but clash still occurs"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 03:10:03-03:50:04\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ec.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"The following event(s) clash with your current event:\\r\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"1.[E][ND]eat(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\\r\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"[E][ND]sleep(at:12 Dec 2019 03:10:03-03:50:04)\\r\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    void execute_scheduleAnomalies_noClash() throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ui.fullCommand \u003d \"event sleep/at 2019-12-12 12:03:03-14:10:04\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        EventCommand ec \u003d new EventCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        Event e \u003d new Event(\"eat\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            ec.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        } catch (ParseException | DukeException e1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"[E][ND]sleep(at:12 Dec 2019 12:03:03-14:10:04)\\r\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "                + \"Now you have 2 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyuu": 146
    }
  },
  {
    "path": "src/test/java/taskcmdtest/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of find command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testFindCommand() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"find chemistry homework\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            findCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:\\r\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"1.[T][ND] chemistry homework\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of invalid find command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testWrongFindCommand() throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"find \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            findCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException | DukeException e1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"OOPS!!! The description of a search cannot be empty.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 97
    }
  },
  {
    "path": "src/test/java/taskcmdtest/FixDurationCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package taskcmdtest;//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.FixedDuration;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class FixDurationCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    FixedDuration testFD \u003d new FixedDuration(\"playing basketball\", \"4 hours\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testtoString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"FD|ND|playing basketball|4 hours\", testFD.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testlistformat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"[FD][ND] playing basketball(requires:4 hours)\", testFD.listFormat());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 21,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/taskcmdtest/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of list command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testListCommand() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"list\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Todo todo \u003d new Todo(\"chemistry homework\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            listCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | IOException e1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:\\r\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"1.[T][ND] chemistry homework\\r\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Task progressive: __________________________________________________(0%)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 70
    }
  },
  {
    "path": "src/test/java/taskcmdtest/RecurringCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "package taskcmdtest;//@@author JasonLeeWeiHern"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.commands.tasks.RecurringCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "public class RecurringCommandTest  {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private RecurringCommand testR \u003d new RecurringCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testWeeklyDeadlineRecurring() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"weekly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this weekly task again:\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n[D][ND] weekly assignment\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(by:08 Jan 2019 01:01:01)\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testWeeklyEventRecurring() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event newE \u003d new Event(\"weekly Career Talk\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                \"2019-10-10 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0, list.get(0).toString(), storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this weekly task again:\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n[E][ND]weekly Career Talk\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(at:17 Oct 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMonthlyDeadlineRecurring() throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"monthly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this monthly task again:\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n[D][ND] monthly assignment\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(by:01 Feb 2019 01:01:01)\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testMonthlyEventRecurring() throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event newE \u003d new Event(\"monthly Career Talk\", \"2019-10-10 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0, list.get(0).toString(), storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this monthly \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"task again:\\n[E][ND]monthly Career Talk\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(at:10 Nov 2019 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testYearlyEventRecurring() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Event newE \u003d new Event(\"yearly Career Talk\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                \"2019-10-10 10:10:10-11:11:11\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0, list.get(0).toString(), storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this yearly task again:\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n[E][ND]yearly Career Talk\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(at:10 Oct 2020 10:10:10-11:11:11)\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    void testYearlyDeadlineRecurring() throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        Deadline newd \u003d new Deadline(\"yearly assignment\", \"2019-01-01 01:01:01\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        list.add(newd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        ui.fullCommand \u003d \"done 1\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        testR.addRecurring(list, 0,list.get(0).toString(),storage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "        assertEquals(\"\\nI\u0027ve automatically added this yearly task again:\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\n[D][ND] yearly assignment\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"(by:01 Jan 2020 01:01:01)\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "                + \"\\nNow you have \" + list.size() + \" tasks in the list.\\n\",output.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonLeeWeiHern"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonLeeWeiHern": 117,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/taskcmdtest/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package taskcmdtest;//@@author mononokehime14"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.tasks.SnoozeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testExecuteSnooze() throws ParseException,IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            dukeException.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"reschedule 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String description \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"2019-09-18 05:05:05\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task rescheduledDeadline \u003d new Deadline(description, ui.fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.add(rescheduledDeadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|ND|return book |by: 2019-09-18 05:05:05\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 51,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/taskcmdtest/SnoozeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package taskcmdtest;//@@author mononokehime14"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.tasks.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.commands.tasks.SnoozeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class SnoozeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testExecuteSnooze() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        DeadlineCommand deadlineCommand \u003d new DeadlineCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        SnoozeCommand snoozeCommand \u003d new SnoozeCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ui.fullCommand \u003d \"deadline return book /by 2008-07-07 03:03:03\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            deadlineCommand.execute(tasks,ui,storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        } catch (DukeException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int year \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int month \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        int hour \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String description \u003d tasks.get(index).description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String date \u003d tasks.get(index).toString().split(\"\\\\|\")[3].substring(4);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        LocalDateTime newDate  \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        newDate \u003d newDate.plusYears(year).plusMonths(month).plusDays(day).plusHours(hour);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String newBy \u003d newDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        Task snoozedDeadline \u003d new Deadline(description,newBy);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tasks.add(snoozedDeadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(tasks.get(0).toString(),\"D|ND|return book |by: 2009-08-08 04:03:03\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 60,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/taskcmdtest/TagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.commands.tasks.TagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0323290"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * Testing TaskCommandTest.TagCommandTest when there is an existing tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0323290"
        },
        "content": " * and when a nonexistent tag is called."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0323290"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Output stream in which data is written into a byte array."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of actual data values."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Print representation of original data values."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test when existing tag is called."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of tag command is wrong"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if reading of file fails"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testTagCommandTest() throws DukeException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ParseException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"#school\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e \u003d new Event(\"meeting #school\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td \u003d new Todo(\"go to lecture #school\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl \u003d new Deadline(\"project #school\", \"2019-03-04 12:12:12\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tasks.add(td);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tasks.add(dl);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TagCommand tc \u003d new TagCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tc.execute(tasks, ui, storage, commandStack,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deletedTask, triviaManager);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"Here are the matching tags in your list:\\r\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"1.[E][ND]meeting #school\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"(at:12 Dec 2019 03:03:03-04:04:04)\\r\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"2.[T][ND] go to lecture #school\\r\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"3.[D][ND] project #school\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                + \"(by:04 Mar 2019 12:12:12)\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * Test when nonexistent tag is called."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws DukeException  Throws custom exception when"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     *                        format of tag command is wrong"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws ParseException Catch error if parsing of commands fails"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     * @throws IOException    Catch error if reading of file fails"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0323290"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void testNonExistingTagCommandTest() throws DukeException,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0323290"
        },
        "content": "            ParseException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ui.fullCommand \u003d \"#abc\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Event e \u003d new Event(\"meeting #school\", \"2019-12-12 03:03:03-04:04:04\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Todo td \u003d new Todo(\"go to lecture #school\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Deadline dl \u003d new Deadline(\"project #school\", \"2019-03-04 12:12:12\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tasks.add(td);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tasks.add(dl);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        TagCommand tc \u003d new TagCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        tc.execute(tasks, ui, storage, commandStack,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0323290"
        },
        "content": "                deletedTask, triviaManager);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"Here are the matching tags in your list:\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 129
    }
  },
  {
    "path": "src/test/java/taskcmdtest/TentativeEventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyuu"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "package taskcmdtest;//@@author mononokehime14"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import gazeeebo.tasks.TentativeEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "public class TentativeEventTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    public void testListFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String description \u003d \"return book\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        ArrayList\u003cString\u003e tentativetimes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2008-06-07 05:05:05-08:08:08\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        tentativetimes.add(\"2007-03-02 04:04:04-10:10:10\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        TentativeEvent newtentative \u003d new TentativeEvent(description,tentativetimes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        String timeslots \u003d \"[TE]\" + \"[\" + newtentative.getStatusIcon() + \"] \" + description + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        for (int i \u003d 0; i \u003c tentativetimes.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtED \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            DateTimeFormatter fmtET \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] dateTime \u003d tentativetimes.get(i).split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String[] time \u003d dateTime[1].split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String datestring \u003d LocalDate.parse(dateTime[0], fmtED)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    .format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            String output \u003d datestring + \" \" +  LocalTime.parse(time[0], fmtET).format(fmtET) + \"-\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                    + LocalTime.parse(time[1], fmtET).format(fmtET) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"at \" + output + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "                timeslots +\u003d \"or \" + output + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "        assertEquals(newtentative.listFormat(),timeslots);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mononokehime14"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mononokehime14": 40,
      "yueyuu": 1
    }
  },
  {
    "path": "src/test/java/taskcmdtest/TimeboundTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0323290"
        },
        "content": "//@@author e0323290"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0323290"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import gazeeebo.tasks.Timebound;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0323290"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0323290"
        },
        "content": "public class TimeboundTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    private Timebound timeboundTest \u003d new Timebound(\"task to be done\", \"2019-08-12 and 2019-08-13\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void getDescriptionTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"[P][ND] task to be done(between: 12 Aug 2019 and 13 Aug 2019)\", timeboundTest.listFormat());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0323290"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    void getFormatTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0323290"
        },
        "content": "        assertEquals(\"P|ND|task to be done|2019-08-12 and 2019-08-13\", timeboundTest.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0323290"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0323290"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0323290": 23
    }
  },
  {
    "path": "src/test/java/taskcmdtest/TodoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class TodoCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //creating a stream to hold the output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    //saving the original System.out"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        //tell java to print to my own stream"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * Test of adding a todo task command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     * @throws IOException Exception when there is an error reading the triviaStorage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void testTodoCommand() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"todo chemistry homework\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            todoCommand.execute(tasks, ui, storage, commandStack, deletedTask,triviaManager);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        } catch (ParseException | DukeException | IOException e1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "            e1.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"[T][ND] chemistry homework\\r\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Now you have 1 tasks in the list.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 69
    }
  },
  {
    "path": "src/test/java/taskcmdtest/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0309463"
        },
        "content": "//@@author jessteoxizhi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0309463"
        },
        "content": "package taskcmdtest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TriviaStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.triviamanager.TriviaManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.parser.TaskCommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.TodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.commands.tasks.UndoTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.storage.TasksPageStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import gazeeebo.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0309463"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0309463"
        },
        "content": "class UndoCommandTest extends UndoTaskCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream mine \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    private PrintStream original \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void setupStream() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(mine);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void restoreStream() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        System.setOut(original);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void emptyCommandStackTest() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        undo(commandStack,list,storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"You cannot undo the previous command.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0309463"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    void commandStackTest() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Stack\u003cArrayList\u003cTask\u003e\u003e commandStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TasksPageStorage tasksPageStorage \u003d new TasksPageStorage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasksPageStorage.readFromSaveFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e oldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TaskCommandParser.copyOldList(oldList, list);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        commandStack.push(oldList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ui.fullCommand \u003d \"todo study\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaStorage triviaStorage \u003d new TriviaStorage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TriviaManager triviaManager \u003d new TriviaManager(triviaStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        TodoCommand todoCommand \u003d new TodoCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        todoCommand.execute(list,ui,storage,commandStack,deletedTask, triviaManager);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        undo(commandStack,list,storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0309463"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\r\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"[T][ND] study\\r\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"Now you have \" + list.size() + \" tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0309463"
        },
        "content": "                + \"You have undo the previous command.\\r\\n\", output.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0309463"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0309463"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0309463": 74
    }
  }
]
