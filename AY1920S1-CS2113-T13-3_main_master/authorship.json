[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The main project class. Initializes a simple task list manager \u0027Duke\u0027 which"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * helps users curate and manage a task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v3.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath \u003d System.getProperty(\"user.dir\") + \"/src/DukeDatabase/ArrayList\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This constructor creates a new instance of vital classes and also loads tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * if any from persistent storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile(file));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method runs the main program."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printReminder(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String userInput \u003d Ui.readInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Command command \u003d Parser.parse(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                command.execute(tasks, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } while (!isExit);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "hanskw4267": 6,
      "-": 57
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The AddCommand class is used when the user has input a command which requires"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * a task to be added to the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String taskFeatures;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private final LocalDateTime nullDate \u003d LocalDateTime.of(1, 1, 1, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime formattedToDate \u003d nullDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime formattedAtDate \u003d nullDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime formattedFromDate \u003d nullDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This AddCommand function is used to assign the different parameters required"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * when adding a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command      this string holds command type determinant to decide how"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     to process the user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskFeatures this string holds the description of the task provided by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param atDate       string contains the formatted user input that has the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     desired date time format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param toDate       string contains the formatted user input that has the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     desired date time format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param fromDate     string contains the formatted user input that has the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     desired date time format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public AddCommand(String command, String taskFeatures, LocalDateTime atDate, LocalDateTime toDate,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            LocalDateTime fromDate) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskFeatures \u003d taskFeatures;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formattedFromDate \u003d fromDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formattedAtDate \u003d atDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.formattedToDate \u003d toDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d new Todo(taskFeatures, formattedFromDate, formattedToDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d new Deadline(taskFeatures, formattedAtDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            task \u003d new Event(taskFeatures, formattedToDate, formattedFromDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Ui.printOutput(\"Got it! I\u0027ve added this task:\" + \"\\n  \" + task.toString() + \"\\nNow you have \" + tasks.getSize()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 29,
      "-": 60,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The command abstract class is used to ensure that all the classes have"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * implementations of the methods and have the implementation of isExit()."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This Command constructor defines that exit is false when instantiated to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * allow the running of the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        exit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This CommandOut function is to set exit to true, in order to terminate the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void commandOut() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Contracts all Command type classes to have their own respective execute"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * methods to ensure that the date is processed and stored properly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   The TaskList that was loaded from persistent storage is passed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                to the caller to utilise it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage The storage is passed to the user to allow the user to save"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                the file after updating TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException The DukeException class has all the respective methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       and messages."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This isExit function is called by a program to check the status of exit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 15,
      "-": 38
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The DeleteCommand class is used when the user intends to delete a particular"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * task from their task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int indexOfTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Used to add the respective tasks to the TaskList and save to persistent"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfTask \u003e\u003d 0 \u0026\u0026 indexOfTask \u003c\u003d (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d tasks.delete(indexOfTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printOutput(\"Noted. I\u0027ve removed this task:\" + \"\\n \" + task.toString() + \"\\nNow you have \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The DoneCommand class is used when the user intends to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int indexOfTaskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTaskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.markAsDone(indexOfTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printMessage(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printMessage(\"  \" + task.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 7,
      "-": 35
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * The EditCommand class is used whenever the user wishes to edit their task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * due to any changes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String newDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public EditCommand(int indexOfTask,String newDescription) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.newDescription \u003d newDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (indexOfTask \u003e\u003d 0 \u0026\u0026 indexOfTask \u003c\u003d (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskDescription(indexOfTask,newDescription);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"Noted. Your new task description is:\" + \"\\n \" + taskToEdit.description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 34
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The ExitCommand class is used when the user inputs bye and intends to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * terminate the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function calls the super.CommandOut function which is used to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * terminate the program by updating the boolean flag exit to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super.commandOut();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printGoodbye();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The FindCommand class is used when the user intends to check all tasks for a keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * This execute function is used to find the tasks with a particular keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d tasks.find(keyWord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (holdFoundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : holdFoundTasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 7,
      "-": 40
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The ListCommand class is used when the user intends to view his entire"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printOutput(\"You have currently no tasks in your list.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 10,
      "-": 28
    }
  },
  {
    "path": "src/main/java/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private final LocalDateTime nullDate \u003d LocalDateTime.of(1, 1, 1, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime atDate \u003d nullDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime toDate \u003d nullDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime fromDate \u003d nullDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * creates a postpone task command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask index of task in loaded tasks list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param atDate      current start time of task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param fromDate    new start time of task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param toDate      new end time of task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime atDate, LocalDateTime fromDate, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.atDate \u003d atDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fromDate \u003d fromDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToBeChanged \u003d taskList.get(indexOfTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d taskToBeChanged.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String oldTime \u003d taskToBeChanged.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (taskToBeChanged.toString().contains(\"[E]\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task checkTask \u003d new Event(description, toDate, fromDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(checkTask)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                tasks.updateDate(taskToBeChanged, \"event\", atDate, toDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                Ui.printOutput(\"Got it! I\u0027ve postponed this event:\" + \"\\n  \" + oldTime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        + \"\\nNow the tasks details are:\\n  \" + taskToBeChanged.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (taskToBeChanged.toString().contains(\"[D]\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task checkTask \u003d new Deadline(description, atDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(checkTask)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                tasks.updateDate(taskToBeChanged, \"deadline\", atDate, toDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                Ui.printOutput(\"Got it! I\u0027ve postponed this deadline:\" + \"\\n  \" + oldTime"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        + \"\\nNow the tasks details are:\\n  \" + taskToBeChanged.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printOutput(\"Todo tasks has no schedule\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 21,
      "TanYiXiang": 5,
      "-": 44,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int days;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public RemindCommand(int index, int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        boolean outOfBound \u003d indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (outOfBound) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        task.setReminder(days);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printMessage(String.format(\"Okay! You\u0027ll get a reminder for this task %d days beforehand:\", days));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printMessage(\"  \" + task.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 12,
      "-": 26,
      "fauzt": 3
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Used to find the next free timeslot of a duration of user\u0027s choosing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private long durationToFind;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public SearchCommand(Long duration) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.durationToFind \u003d duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * get the duration to find for."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return the durationToFind"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public long getDurationToFind() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return durationToFind;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * executes the search command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   the current loaded task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage the current loaded storage configuration"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        ArrayList\u003cEvent\u003e dateList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        for (Task item : tasks.getTasks()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (item.getClass() \u003d\u003d task.Event.class) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                dateList.add((Event) item);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Collections.sort(dateList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (dateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"You have no events that will clash with a slot of this duration\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            found \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (dateList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"You can schedule something after \" + dateList.get(0).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            for (int i \u003d 0; i \u003c dateList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (i !\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(dateList.get(i - 1).endDate, dateList.get(i).startDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(LocalDateTime.now(), dateList.get(i).startDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (durationToFind \u003c\u003d duration) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    if (i !\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        Ui.printOutput("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                \"Next free time slot of duration \" + Long.toString(durationToFind) + \"hrs is between \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                        + dateList.get(i - 1).toString() + \" and \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        Ui.printOutput(\"You can schedule something from now till \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                Ui.printOutput(\"You can schedule something after the \" + dateList.get(dateList.size() - 1).toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 59,
      "-": 26,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The ViewCommand class is used when the user intends to see all tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * scheduled on a date!."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String dateToFind;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(String dateToFind) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateToFind \u003d dateToFind;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * This execute function is used to view the schedule on a particular date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e sortedRequiredSchedule \u003d tasks.schedule(dateToFind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (sortedRequiredSchedule.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"There are no tasks scheduled on that date.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"Here is your schedule for that day:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : sortedRequiredSchedule) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 10,
      "-": 35
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Exception class is used to handle all of the expected exceptions and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * certain unexpected exceptions to give the user a better understanding of why"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the program crashed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles wrong date or time errors."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String wrongDateOrTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return \"☹ OOPS!!! The date or time of this add type command is not of the correct format.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + \"See the manual above!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if a new task clashes with a existing task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskClash() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! There is already a task scheduled at the same time, use view command to check your schedule \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"for the day\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty task description errors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyUserDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The description of the command is missing. See the manual above!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles when parser does not understand input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unknownUserCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The command you have entered is not of a valid type. See the manual above!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty date or time errors."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyDateOrTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The date or time of this add type command is missing. See the manual above!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if task searched does not exist."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskDoesNotExist() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The task you searched for does not exist. See the manual above!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to save the tasks list to file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToWriteFile() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! Unable to write file. The program will be terminated.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to read an existing file for tasks list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToReadFile() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! Unable to read from file. The program will be terminated.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if class does not exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String classDoesNotExist() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return \"☹ OOPS!!! Unable to extract certain features of the Duke Project\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + \"Please ensure the project was imported properly\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if file does not exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String fileDoesNotExist() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! Unable to read from previous task list. A new file has been created for you\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 67,
      "-": 53
    }
  },
  {
    "path": "src/main/java/parser/DateTimeExtractor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This DateTimeExtractor class allows the identification of dates and is used"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * to print out dates and times."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeExtractor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static final LocalDateTime NULL_DATE \u003d LocalDateTime.of(1, 1, 1, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateEvent \u003d NULL_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateDeadline \u003d NULL_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime datePostpone \u003d NULL_DATE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateTodo \u003d NULL_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateView \u003d NULL_DATE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final LocalDateTime dateError \u003d NULL_DATE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function appends the end time of an event to provide a standardised"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * output of date and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dateTimeFromUser A string containing only the date segment of the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                         input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return String A string containing the end time of an event will also"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         returned."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ParseException The ParseException is called if the date or time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                        format provided by the user is incorrect!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDateTime extractDateTime(String dateTimeFromUser, String command) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            dateEvent \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateEvent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTodo \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateTodo;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDeadline \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateDeadline;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"postpone\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            datePostpone \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return datePostpone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"view\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            dateView \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateView;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // Allows the developer to know that a command other than deadline or event was"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // passed to the function!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateError;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 16,
      "TanYiXiang": 1,
      "-": 33,
      "fauzt": 7
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.PostponeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import static parser.DateTimeExtractor.NULL_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The parser class is used to parse and make sense of the different queries the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * user inputs into the program and tag them for further processing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Parses the user input of string type and returns the respective command type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userInput This string is provided by the user to ask \u0027Duke\u0027 to perform"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                  a particular action"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return Command After processing the user\u0027s input it returns the correct"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         command for further processing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException The DukeException class has all the respective methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       and messages!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d userInput.split(\"\\\\s+\", 2)[0].trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskFeatures;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String checkType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Integer indexOfTask;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDateTime nullDate \u003d LocalDateTime.of(1, 1, 1, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return parseTodo(command, userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            // fall through to avoid rewriting the same code multiple times!"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                taskFeatures \u003d userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (taskFeatures.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    checkType \u003d \"/by\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    checkType \u003d \"/at\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                String taskDescription \u003d taskFeatures.split(checkType, 2)[0].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                String dateTimeFromUser;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                LocalDateTime atDate \u003d nullDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                LocalDateTime toDate \u003d nullDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                LocalDateTime fromDate \u003d nullDate;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    if (checkType.contains(\"/by\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        atDate \u003d DateTimeExtractor.extractDateTime(dateTimeFromUser, command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                        String obtainStartDate \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                        fromDate \u003d DateTimeExtractor.extractDateTime(obtainStartDate, command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        String obtainEndDate \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                        toDate \u003d DateTimeExtractor.extractDateTime(obtainEndDate, command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return new AddCommand(command, taskDescription, atDate, toDate, fromDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            String findKeyWord \u003d userInput.split(command, 2)[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (findKeyWord.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new FindCommand(findKeyWord);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] commandPortion \u003d userInput.split(\" \", 3);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(commandPortion[1]) - 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            description \u003d commandPortion[2];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new EditCommand(indexOfTask, description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            description \u003d userInput.split(command, 2)[1].trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(description) - 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new DeleteCommand(indexOfTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            description \u003d userInput.split(command, 2)[1].trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(description) - 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new DoneCommand(indexOfTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"remind\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return parseRemind(userInput, command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"postpone\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            LocalDateTime atDate \u003d nullDate;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            LocalDateTime toDate \u003d nullDate;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            LocalDateTime fromDate \u003d nullDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            final String dateTimeFromUser;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            checkType \u003d \"/to\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (!userInput.contains(checkType)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                throw new DukeException(\"No checkType(/to)\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            description \u003d userInput.substring(userInput.indexOf(command) + 8, userInput.indexOf(checkType)).trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            dateTimeFromUser \u003d userInput.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (dateTimeFromUser.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(description) - 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                if (dateTimeFromUser.contains(\"-\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    String obtainStartDate \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    fromDate \u003d DateTimeExtractor.extractDateTime(obtainStartDate, command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    String obtainEndDate \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    toDate \u003d DateTimeExtractor.extractDateTime(obtainEndDate, command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    atDate \u003d DateTimeExtractor.extractDateTime(dateTimeFromUser, command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeCommand(indexOfTask, atDate, fromDate, toDate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            String userScheduleDate \u003d userInput.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new ViewCommand(userScheduleDate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            long duration;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                duration \u003d Long.parseLong(userInput.split(command, 2)[1].trim());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return new SearchCommand(duration);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            // Empty string or unknown command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printUnknownInput();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command parseTodo(String command, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String taskFeatures;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            taskFeatures \u003d userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskFeatures.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String checkType \u003d \"/between\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String[] taskDetails \u003d taskFeatures.split(checkType, 2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (taskDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new AddCommand(command, taskDetails[0], NULL_DATE, NULL_DATE, NULL_DATE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return parseToDoDuration(taskFeatures, taskDetails, checkType, command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static Command parseToDoDuration(String taskFeatures, String[] taskDetails, String checkType,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                             String command) throws DukeException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String dateTimeFromUser \u003d taskDetails[1];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String taskDescription \u003d taskFeatures.split(checkType, 2)[0].trim();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String fromDate;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String toDate;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                fromDate \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                toDate \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            LocalDateTime to;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            LocalDateTime from;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                to \u003d DateTimeExtractor.extractDateTime(toDate, command);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                from \u003d DateTimeExtractor.extractDateTime(fromDate, command);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new AddCommand(command, taskDescription, NULL_DATE, to, from);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command parseRemind(String userInput, String command) throws DukeException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int indexOfTask;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        description \u003d extractDescription(userInput, command);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        indexOfTask \u003d extractIndexOfTask(description);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        days \u003d extractReminderValue(description);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new RemindCommand(indexOfTask, days);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static String extractDescription(String userInput, String command) throws DukeException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static int extractIndexOfTask(String description) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return Integer.parseInt(description.split(\"in\", 2)[0].trim()) - 1;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static int extractReminderValue(String description) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d description.split(\"in\", 2)[1].trim();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return Integer.parseInt(substring.split(\" \", 2)[0].trim());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 59,
      "hanskw4267": 46,
      "TanYiXiang": 44,
      "-": 43,
      "fauzt": 71
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Storage class is utilised to do both the reading and writing to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * persistent storage using the two primary methods saveFile and loadFile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This Storage constructor is used to function is used to assign the different"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * parameters required by the Storage methods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file This parameter holds the file to write to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This saveFile method is used repeatedly throughout the other classes to save"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates made to the TaskList to the persistent storage to ensure the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * does not loose data due to sudden termination of the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param listOfTasks This parameter holds the updated TaskList of the user and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    used to save the updated TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException This exception is thrown if there is not file at the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       given location to save to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e listOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            objectOutputStream.writeObject(listOfTasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            objectOutputStream.close(); // always close"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fileOutputStream.close(); // always close"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unableToWriteFile());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This saveFile method is used repeatedly throughout the other classes to save"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates made to the TaskList to the persistent storage to ensure the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * does not loose data due to sudden termination of the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file This parameter is passed as to be able to write to the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException This exception is thrown for any unexpected issues such"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       as no file in location, unable to read the file or a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       class in not found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile(File file) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            listOfTasks \u003d (ArrayList\u003cTask\u003e) objectInputStream.readObject();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fileInputStream.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return listOfTasks;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.fileDoesNotExist());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unableToReadFile());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.classDoesNotExist());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.classDoesNotExist());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 38,
      "-": 47,
      "fauzt": 1
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import static parser.DateTimeExtractor.NULL_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * deadline type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Deadline extends Task implements Serializable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * contructs a deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param atDate      time of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Deadline(String description, LocalDateTime atDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d atDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remindInHowManyDays \u003d 3;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This override of the toString function of the task class etches the different"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * portions of the user input into a single string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + \"[\" + super.getStatusIcon() + \"]\" + this.description + \"(by: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean checkForClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate.isEqual(NULL_DATE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isEqual(taskToCheck.startDate));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (taskToCheck.startDate.isBefore(this.startDate) \u0026\u0026 taskToCheck.endDate.isAfter(this.startDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 13,
      "-": 26,
      "fauzt": 11
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import static parser.DateTimeExtractor.NULL_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class Event extends Task implements Serializable, Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * creates a new Event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param toDate      end time of task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param atDate      start time of task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description, LocalDateTime toDate, LocalDateTime atDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endDate \u003d toDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d atDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remindInHowManyDays \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * custom comparator for sorting."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return this.startDate.compareTo(o.startDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This override of the toString function of the task class etches the different"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * portions of the user input into a single string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return \"[E]\" + \"[\" + super.getStatusIcon() + \"]\" + this.description + \"(at: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \"-\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    boolean checkForClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate.isEqual(NULL_DATE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isBefore(taskToCheck.startDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return this.startDate.isBefore(taskToCheck.endDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "hanskw4267": 19,
      "-": 33,
      "fauzt": 10
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import static parser.DateTimeExtractor.NULL_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Task class is extended by the other tasks and serves as a template for"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * all tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String description; // basically similar to describing features of the class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public LocalDateTime endDate \u003d NULL_DATE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public LocalDateTime startDate \u003d NULL_DATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime createdDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Period eventPeriod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public int remindInHowManyDays \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This task constructor is used to obtain the parameters required by the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description This string holds the description provided by the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) { // constructor"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.createdDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This getStatusIcon function returns the tick or cross symbols to be printed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * as output."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This function returns either a tick or a cross."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() { // return tick or X symbols"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * This markAsDone function allows the user to mark a task as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This toString function of the task class etches the different portions of the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * user input into a single string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remindInHowManyDays \u003d days;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * check if any task reminders are triggered."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return if triggered"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean checkReminderTrigger() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (!startDate.isEqual(NULL_DATE)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime reminderDate \u003d startDate.minusDays(remindInHowManyDays);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return LocalDateTime.now().isAfter(reminderDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    abstract boolean checkForClash(Task taskToCheck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 18,
      "-": 59,
      "fauzt": 8
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The TaskList class handles all operations performed on the TaskList as well"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * as stores the TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * This custom comparator allows the sorting of both deadlines and events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Comparator\u003cTask\u003e DateComparator \u003d (firstDate, secondDate) -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (firstDate.startDate.isBefore(secondDate.startDate)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the use to add a particular task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the use to delete a particular task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task delete(int indexOfTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.remove(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to find tasks with a particular keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyWord this string contains the keyword the user is searching for."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String findMatch \u003d listOfTasks.get(i).toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (findMatch.contains(keyWord)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                holdFoundTasks.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return holdFoundTasks;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Performs a check as to determine if the task being added has a clash with"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * another task already scheduled."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskToCheck the task trying to be added by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean true if there is a clash, false if there is not clash."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (task.checkForClash(taskToCheck)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to mark a particular task as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be marked as"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task markAsDone(int indexOfTask) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates the timing of a particular task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskToBeChanged task to be updated"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command         task type to be updated"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param atDate          new start time of task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param toDate          new end time of task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void updateDate(Task taskToBeChanged, String command, LocalDateTime atDate, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (\"event\".equals(command)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            taskToBeChanged.startDate \u003d atDate;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            taskToBeChanged.endDate \u003d toDate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            taskToBeChanged.startDate \u003d atDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return sortDateList the sorted schedule of all the tasks on a particular"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         date."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e schedule(String dayToFind) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e sortedDateList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (!(listOfTasks.get(i).getClass() \u003d\u003d task.Todo.class)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    \u0026\u0026 listOfTasks.get(i).toString().contains(dayToFind)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                sortedDateList.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.sort(sortedDateList, DateComparator);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return sortedDateList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function allows the user to edit the task description."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask Location of task in the list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newDescription The new task description to be updated"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return taskToBeEdited The task that had its description edited"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task editTaskDescription(int indexOfTask,String newDescription) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        taskToBeEdited.description \u003d newDescription;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 33,
      "TanYiXiang": 15,
      "-": 105,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import static parser.DateTimeExtractor.NULL_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of to-do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Creates a ToDo task with a specific duration and timing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param at start time of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param to end time of the task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Todo(String description, LocalDateTime at, LocalDateTime to) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d at;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endDate \u003d to;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.createdDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This override of the toString function of the task class etches the different"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * portions of the user input into a single string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (!this.startDate.isEqual(NULL_DATE) \u0026\u0026 !this.endDate.isEqual(NULL_DATE)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description + \" \" + \" (from: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\" + \" (to: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean checkReminderTrigger() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return LocalDateTime.now().isAfter(createdDate.plusDays(remindInHowManyDays));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    boolean checkForClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 18,
      "-": 33,
      "fauzt": 11
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The Ui class is used to handle all inputs and outputs used to interact with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the end-user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // All the different definitions including the string definitions are here."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String userOutputDash \u003d \"_______________________________\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String goodbye \u003d \"_______________________________\\n\" + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"_______________________________\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String greeting \u003d \"_______________________________\\n\" + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"What can I do for you?\\n\" + \"_______________________________\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Prints Duke logo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * prints a \u0027dashed\u0027 line."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void printDash() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * prints greeting."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * prints the reminders triggered."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void printReminder(TaskList tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"You have these upcoming tasks:\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (t.checkReminderTrigger()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(t.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(goodbye);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printOutput function is used to print the output in the current Ui"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userOutput This string will be used to print the message between to"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                   data."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printOutput(String userOutput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This readInput function is used to constantly take in the userInput by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * checking if there is a line to be read. But if there is no line to be read"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * then the program terminates."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This function will return a String which contains the user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readInput() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d \"bye\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printMessage function is called to print an exception message to the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param message This message contains the message generated by the exception"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                that was caught."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void printMessage(String message) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printManual function is called to aid the user in the usage of \u0027Duke\u0027 by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * guiding them on how to input their task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printManual() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hi, this is Duke!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"I am able to let you add tasks of three types! todo, event and deadline\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"1. To add a todo task, key in todo\u003cspace\u003eyour task description eg. todo borrow books\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"2. To add a deadline, key in deadline\u003cspace\u003eyour deadline description\u003cspace\u003e/by\u003cspace\u003ethe \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + \"date eg. return books/by dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        System.out.println(\"3. To add a event, key in event\u003cspace\u003eyour event description\u003cspace\u003e/at\u003cspace\u003ethe day or \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + \"date and the time eg. Project meeting /at dd/MM/yyyy HHmm-HHmm\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"4. To list out all your tasks simply enter list\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"5. To mark a task as complete just enter done\u003cspace\u003ethe index of the task as listed\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"6. To find a task from the task list enter find\u003cspace\u003eany word in the task\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"7. To delete a task just enter delete\u003cspace\u003ethe index of the task as listed\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"8. To exit, enter bye\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printUnknownInput() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. If you would like to know how to \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + \"use Duke, Enter duke-manual\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 36,
      "-": 94,
      "fauzt": 3
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This class implements the unit testing code for the AddCommand Test class and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * particularly tests IsClash()."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testisClash() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task2 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(testisClash.isClash(task2), true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 7,
      "-": 20,
      "fauzt": 1
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void testEdit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline testTask \u003d new Deadline(\"Minecraft\", testDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test.add(testTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList testList \u003d new TaskList(test);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testList.editTaskDescription(0, \"Roblox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test \u003d testList.getTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(test.get(0).description, \"Roblox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 24
    }
  },
  {
    "path": "src/test/java/RemindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    File file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/ArrayList\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Storage storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Command reminder \u003d new RemindCommand(0, 5);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testReminder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Deadline(\"test\", LocalDateTime.of(2019, 8, 1, 12, 0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(testTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            reminder.execute(tasks, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(testTask.remindInHowManyDays, 5);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertTrue(testTask.checkReminderTrigger());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Parser.parse(\"remind\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "fauzt": 10
    }
  },
  {
    "path": "src/test/java/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid search Command creation\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidSearchCommandCreation() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        SearchCommand actualCmd \u003d new SearchCommand((long) 3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration \u003d actualCmd.getDurationToFind();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals((long) 3, duration);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid search input\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Parser.parse(\"search 3\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid search input\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Parser.parse(\"search h\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 22,
      "-": 19
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the To-do class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Todo todo \u003d new Todo(\"testing todo\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testTodoCreation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String title \u003d todo.description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(title, \"testing todo\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(todo.toString(), \"[T][\" + \"✘\" + \"] testing todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testTodoWithinPeriod() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime from;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime to;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            from \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 0800\", \"todo\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            to \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 2200\", \"todo\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Todo newTodo \u003d new Todo(\"testTodo\", from, to);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Assertions.assertEquals(newTodo.startDate, from);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the ViewCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2019, 9, 23, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e testIfNull \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testIfNull \u003d testisClash.schedule(\"23/09/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals((testIfNull.size() \u003e 0), true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "hanskw4267": 6,
      "-": 22
    }
  }
]
