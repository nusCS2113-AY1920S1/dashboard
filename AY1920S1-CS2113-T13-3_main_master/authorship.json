[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    mainClassName \u003d \"DukeLauncher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "-": 35
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The DialogBox essentially acts as the constructor for the dialog boxes which make up the chat bot section of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * the GUI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text the text portion of the label is passed in through this parameter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param image the image portion of the label is passed in through this parameter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private DialogBox(String text, Image image, Boolean isDuke) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The getUserDialog distinction is needed to enable the flipping of the labels to create the chat bot like"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * structure."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text the text portion of the label designated for the user is passed in through this parameter."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param image the image portion of the label designated for the user is passed in through this parameter."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image, Boolean isDuke) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, image, isDuke);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image, Boolean isDuke) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, image, isDuke);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 55
    }
  },
  {
    "path": "src/main/java/DukeLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10
    }
  },
  {
    "path": "src/main/java/ErrorMessageBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ErrorMessageBar extends HBox {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label errorMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This TodayTaskBox function acts as the constructor for the TaskBox and will hold the user\u0027s tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * for the day and it is automatically generated upon setup."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dukeException the exceptions thrown to duke will be printed using this portion of the GUI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ErrorMessageBar(String dukeException) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/ErrorMessageBar.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        errorMessage.setText(dukeException);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This getUserTaskForToday function is utilised to generate the tasksForToday."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dukeException the exceptions thrown to duke will be printed using this portion of the GUI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static ErrorMessageBar getErrorMessage(String dukeException) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new ErrorMessageBar(dukeException);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 44
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Acts as the bridge between Duke\u0027s logic and the Graphical User Interface based on FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The start class method needs to be created in all JavaFX application and the Anchor pane is created,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * along with the and finally the stage is shown."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            MainWindow.initializeDukeElements();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.getIcons().add(new Image(getClass().getResourceAsStream(\"/images/GuiLogo.png\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            stage.setTitle(\"Chronologer\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 33,
      "hanskw4267": 1
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane errorScrollPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private VBox errorMessageContainer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private VBox todayTaskContainer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane mondayScrollPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane tuesdayScrollPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane wednesdayScrollPane;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane thursdayScrollPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane fridayScrollPane;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane saturdayScrollPane;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane sundayScrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label priorityTaskLabel;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cTask\u003e tasksForTheDay;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e mondayTask;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e tuesdayTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e wednesdayTask;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e thursdayTask;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e fridayTask;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e saturdayTask;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e sundayTask;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label todayLabel;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double mondayX \u003d 1.0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double tuesdayX \u003d 136.0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double wednesdayX \u003d 269.0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double thursdayX \u003d 403.0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double fridayX \u003d 538.0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double saturdayX \u003d 671.0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double sundayX \u003d 806.0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Double moveXOfDays \u003d 0.0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allocation of the images for the chat bot."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String filePath \u003d System.getProperty(\"user.dir\") + \"/src/DukeDatabase/ArrayList\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cTask\u003e holdTodayTasks;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e mondayTasks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e tuesdayTasks;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e wednesdayTasks;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e thursdayTasks;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e fridayTasks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e saturdayTasks;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cString\u003e sundayTasks;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method is utilised to initialize the required aspects of Duke such as the storage and the rendering of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * the TaskList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void initializeDukeElements() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile(file));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This @FXML initialize() is a special function where static members of the GUI can be initialised."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        refreshAllLists();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        todayLabel.setLayoutX(moveXOfDays);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This @FXML handleUserInput() is provides the logic for the text field, whenever the user provides an input"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * this function handles it by passing it to the Duke logic."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command command \u003d ParserFactory.parse(input);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            command.execute(tasks, storage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile(file));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            refreshAllLists();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            errorMessageContainer.getChildren().addAll("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                ErrorMessageBar.getErrorMessage(e.getMessage())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DialogBox toChangeDimension \u003d DialogBox.getDukeDialog(input, userImage, true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        toChangeDimension.setPrefHeight(80.0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            toChangeDimension,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            DialogBox.getUserDialog(Ui.userOutputForUI, dukeImage, false)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method is utilised to refresh the ListViews every time there is a user input and for the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * initialisation."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void refreshAllLists() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        prioritizedTodayTasks();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        populateEveryDay();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasksForTheDay.setItems(holdTodayTasks);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        priorityTaskLabel.setText(\"You have \" + holdTodayTasks.size() + \" High-Medium Priority task(s) today!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        mondayTask.setItems(mondayTasks);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tuesdayTask.setItems(tuesdayTasks);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        wednesdayTask.setItems(wednesdayTasks);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        thursdayTask.setItems(thursdayTasks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        fridayTask.setItems(fridayTasks);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        saturdayTask.setItems(saturdayTasks);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        sundayTask.setItems(sundayTasks);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method populates the ListView with prioritized tasks for the day."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void prioritizedTodayTasks() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        holdTodayTasks \u003d FXCollections.observableArrayList(tasks.obtainPriorityList(dtf.format(now)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method will populate the ListViews of the timeline."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void populateEveryDay() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Monday \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Tuesday \u003d DayOfWeek.TUESDAY;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Wednesday \u003d DayOfWeek.WEDNESDAY;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Thursday \u003d DayOfWeek.THURSDAY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Friday \u003d DayOfWeek.FRIDAY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Saturday \u003d DayOfWeek.SATURDAY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Sunday \u003d DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String sunday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Sunday)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Integer sundayDate \u003d Integer.parseInt(sunday.split(\"/\", 2)[0].trim());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String monday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Monday)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (Integer.parseInt(monday.split(\"/\", 2)[0].trim()) \u003e sundayDate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            monday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.previousOrSame(Monday)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String tuesday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Tuesday)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (Integer.parseInt(tuesday.split(\"/\", 2)[0].trim()) \u003e sundayDate) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            tuesday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.previousOrSame(Tuesday)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String wednesday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Wednesday)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (Integer.parseInt(wednesday.split(\"/\", 2)[0].trim()) \u003e sundayDate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            wednesday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.previousOrSame(Wednesday)));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String thursday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Thursday)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (Integer.parseInt(thursday.split(\"/\", 2)[0].trim()) \u003e sundayDate) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            thursday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.previousOrSame(Thursday)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String friday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Friday)));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (Integer.parseInt(friday.split(\"/\", 2)[0].trim()) \u003e sundayDate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            friday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.previousOrSame(Friday)));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String saturday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.nextOrSame(Saturday)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (Integer.parseInt(saturday.split(\"/\", 2)[0].trim()) \u003e sundayDate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            saturday \u003d dtf.format(LocalDate.now().with(TemporalAdjusters.previousOrSame(Saturday)));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String shiftLocationOfHighlight \u003d dtf.format(now);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (shiftLocationOfHighlight.equals(monday)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d mondayX;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(tuesday)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d tuesdayX;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(wednesday)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d wednesdayX;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(thursday)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d thursdayX;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(friday)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d fridayX;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(saturday)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d saturdayX;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(sunday)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d sundayX;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        mondayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(monday));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tuesdayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(tuesday));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        wednesdayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(wednesday));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        thursdayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(thursday));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        fridayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(friday));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        saturdayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(saturday));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        sundayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(sunday));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 247,
      "fauzt": 5
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a task to TaskList if the user input is correctly parsable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String taskFeatures;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime formattedStartDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime formattedEndDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int duration \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param command      Holds the command type."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskFeatures Holds the description of the task provided by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param startDate    Holds the start date of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param endDate      Holds the end date of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public AddCommand(String command, String taskFeatures, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskFeatures \u003d taskFeatures;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.formattedStartDate \u003d startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.formattedEndDate \u003d endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding a task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param command       Holds the command type."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskFeatures  Holds the description of the task provided by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param duration      Holds the duration period the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public AddCommand(String command, String taskFeatures, Integer duration) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d taskFeatures;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Adds the task to the TaskList and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (formattedStartDate !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                task \u003d new Todo(taskFeatures, formattedStartDate, formattedEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else if (duration !\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                task \u003d new Todo(taskFeatures, duration);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                task \u003d new Todo(taskFeatures);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            task \u003d new Deadline(taskFeatures, formattedStartDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            task \u003d new Event(taskFeatures, formattedStartDate, formattedEndDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Ui.printOutput(\"Got it! I\u0027ve added this task:\" + \"\\n  \" + task.toString() + \"\\nNow you have \" + tasks.getSize()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 19,
      "hanskw4267": 9,
      "-": 44,
      "fauzt": 22
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Ensures that all the classes of command type have implementations of the method execute."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Defines that isExit is false when instantiated to allow program to continue running."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Terminates the program by setting isExit to true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void commandOut() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Checks if the index of a Task provided by the user is within the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param currentSizeOfTasks  Holds the integer value of the current list size."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public boolean isIndexValid(Integer indexOfTask, Integer currentSizeOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (currentSizeOfTasks - 1)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(DukeException.invalidIndex());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new DukeException(DukeException.invalidIndex());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Checks if the index of a Task provided by the user is within the TaskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks  Holds the list that need to be formatted for UI."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void outputRequiredList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Integer i \u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Integer j \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.userOutputForUI +\u003d j++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Contracts all Command type classes to have their own respective execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * methods."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @throws DukeException Throws the exception according to the user-defined list: DukeException."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This getExit function is called by a program to check the status of exit."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public boolean getExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 45,
      "hanskw4267": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/command/CommentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a comment to an existing task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans Kurnia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class CommentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Integer indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when commenting on a task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param comment Holds the comment for the task as given by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public CommentCommand(Integer indexOfTask, String comment) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Adds the comment to the task and saves the updated TaskList it to persistent storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskComment(indexOfTask, comment);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"Noted. Your new task comment is:\" + \"\\n \" + taskToEdit.getComment());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Integer getIndexOfTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return indexOfTask;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 16,
      "hanskw4267": 37
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to delete a particular task from their task list based on index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Integer indexOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public DeleteCommand(Integer indexOfTask) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Removes the task from the TaskList and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d tasks.delete(indexOfTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printOutput(\"Noted. I\u0027ve removed this task:\" + \"\\n \" + task.toString() + \"\\nNow you have \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10,
      "hanskw4267": 3,
      "-": 25
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Marks a task as complete or done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int indexOfTaskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTaskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Marks a task as complete and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Task task \u003d tasks.markAsDone(indexOfTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(\"Nice! I\u0027ve marked this task as done: \" + task.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 9,
      "-": 26
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Edits the user\u0027s task description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String newDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public EditCommand(int indexOfTask, String newDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.newDescription \u003d newDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Edits the description of a task and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if ((isIndexValid(indexOfTask, tasks.getSize()))) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskDescription(indexOfTask, newDescription);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"Noted. Your new task description is:\" + \"\\n \" + taskToEdit.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 11,
      "hanskw4267": 1,
      "TanYiXiang": 27
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String GOODBYE \u003d \"Goodbye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Terminates the program by updating isExit to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super.commandOut();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printGoodbye();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Ui.printOutput(GOODBYE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "hanskw4267": 1,
      "TanYiXiang": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Finds all tasks that contain a particular keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Finds all the tasks with a particular keyword and passes it to UI which prints to user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d tasks.find(keyWord);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (holdFoundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(\"Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            outputRequiredList(holdFoundTasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 14,
      "hanskw4267": 3,
      "TanYiXiang": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/command/IgnoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Marks a task as ignorable or not ignorable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Fauzan and Tan Yi Xiang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class IgnoreCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isIgnore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String IGNORED \u003d \"Noted. This task has been marked as ignored:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String UNIGNORED \u003d \"Noted. This task is no longer ignored:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding the location of a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param isIgnore Holds a boolean of whether a task isIgnorable."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public IgnoreCommand(Integer indexOfTask, boolean isIgnore) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isIgnore \u003d isIgnore;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Marks a task as ignorable and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isIgnore) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                Task task \u003d tasks.markAsIgnorable(indexOfTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Ui.printOutput(IGNORED + task.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Task task \u003d tasks.markAsUnignorable(indexOfTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Ui.printOutput(UNIGNORED + task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 23,
      "TanYiXiang": 12,
      "fauzt": 20
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Prints the entire list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"You have currently no tasks in your list.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRESENT_LIST \u003d \"Here are the task(s) in your list:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Outputs the entire list of tasks to the UI which will print it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e currentList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(EMPTY_LIST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(PRESENT_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            outputRequiredList(currentList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 6,
      "hanskw4267": 6,
      "TanYiXiang": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/command/LocationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a location to an existing task as a comment."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class LocationCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String locationOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding the location of a task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param userInputLocation Holds the location for the task as given by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public LocationCommand(int indexOfTask, String userInputLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.locationOfTask \u003d userInputLocation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Adds the location to the task as a comment and saves the updated TaskList it"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * to persistent storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Task taskWithLocation \u003d tasks.addLocation(indexOfTask, locationOfTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"Noted. Your task location has been added:\" + \"\\n \" + taskWithLocation.toString() + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                            + taskWithLocation.getLocation());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 44,
      "hanskw4267": 2
    }
  },
  {
    "path": "src/main/java/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Postpones a task to different times."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime toDate \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String POSTPONED_DEADLINE \u003d \"Got it! I\u0027ve postponed this deadline:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String POSTPONED_EVENT \u003d \"Got it! I\u0027ve postponed this event:\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TOBEFIXED \u003d \"Postpone for TODO to be fixed once TODO overhaul completed.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Initializes the different parameters to postpone a task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask Holds the index of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate   Holds the start date of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Secondary constructor for event tasks in particular."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate   Holds the new start time of a task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param toDate      Holds the new end time of a task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime startDate, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Postpones a task properly and saves the updated TaskList  it to persistent storage."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (!isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBePostponed \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String description \u003d taskToBePostponed.getDescription();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isDeadline(taskToBePostponed)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isDeadlineClash(description, startDate, tasks)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                taskToBePostponed.setStartDate(startDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Ui.printOutput(POSTPONED_DEADLINE + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (isEvent(taskToBePostponed)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isEventClash(description, startDate, toDate, tasks)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                taskToBePostponed.setStartDate(startDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                taskToBePostponed.setEndDate(toDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Ui.printOutput(POSTPONED_EVENT + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(TOBEFIXED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isDeadline(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return task.getEndDate() \u003d\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEvent(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return task.getEndDate() !\u003d null \u0026\u0026 task.getStartDate() !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isDeadlineClash(String description, LocalDateTime startDate, TaskList tasks) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline deadlineTest \u003d new Deadline(description, startDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return tasks.isClash(deadlineTest);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEventClash(String description, LocalDateTime startDate, LocalDateTime endDate, TaskList tasks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Event eventTest \u003d new Event(description, startDate, endDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return tasks.isClash(eventTest);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10,
      "hanskw4267": 11,
      "TanYiXiang": 56,
      "-": 32
    }
  },
  {
    "path": "src/main/java/command/PriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a priority level to a certain task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String priorityString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PriorityCommand(int indexOfTask, String priorityString) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priorityString \u003d priorityString.toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Updates the priority level of a task that is not ignorable and saves the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updated TaskList to persistent storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Priority newPriority \u003d Priority.getPriorityLevel(priorityString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newPriority \u003d\u003d Priority.INVALID) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.invalidPriorityLevel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        task.setPriority(newPriority);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Ui.printOutput(\"Got it! \" + task.getDescription() + \" priority level is now \" + priorityString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "hanskw4267": 4,
      "TanYiXiang": 39
    }
  },
  {
    "path": "src/main/java/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a reminder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Integer indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Integer days;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public RemindCommand(Integer indexOfTask, Integer days) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Creates a reminder for a task and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        boolean outOfBound \u003d indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (outOfBound) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        task.setReminder(days);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.printOutput(String.format(\"Okay! You\u0027ll get a reminder for this task %d days beforehand:\", days)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"  \" + task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 15,
      "hanskw4267": 6,
      "-": 21,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Finds the next free time slot of a duration of user\u0027s choosing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String NO_CLASH \u003d \"You have no events that will clash with a slot of this duration\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private long durationToFind;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public SearchCommand(Long duration) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.durationToFind \u003d duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public long getDurationToFind() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return durationToFind;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Searches for the next available time slot based on the user\u0027s duration."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        ArrayList\u003cEvent\u003e dateList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        for (Task item : tasks.getTasks()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (item.getClass() \u003d\u003d task.Event.class) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                dateList.add((Event) item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Collections.sort(dateList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (dateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(NO_CLASH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            found \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (dateList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"You can schedule something after \" + dateList.get(0).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            for (int i \u003d 0; i \u003c dateList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (i !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(dateList.get(i - 1).getEndDate(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                            dateList.get(i).getStartDate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(LocalDateTime.now(), dateList.get(i).getStartDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (durationToFind \u003c\u003d duration) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    if (i !\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        Ui.printOutput("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                \"Next free time slot of duration \" + Long.toString(durationToFind) + \"hrs is between \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                        + dateList.get(i - 1).toString() + \" and \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        Ui.printOutput(\"You can schedule something from now till \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                Ui.printOutput(\"You can schedule something after the \" + dateList.get(dateList.size() - 1).toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 52,
      "TanYiXiang": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/command/TaskScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TaskScheduleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Long durationToSchedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private final int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private final int indexOfDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TaskScheduleCommand(int indexOfTask, int indexDeadline) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfDeadline \u003d indexDeadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Todo t;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Deadline d;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            t \u003d (Todo) list.get(indexOfTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(\"Task selected is not a Todo with a duration\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            d \u003d (Deadline) list.get(indexOfDeadline);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(\"Task selected is not a Deadline\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        durationToSchedule \u003d (long) t.duration;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime deadlineDate \u003d d.getStartDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cEvent\u003e dateList \u003d createDateList(list, deadlineDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (dateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.printOutput(\"You can schedule this task from now till the deadline.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    + \"Schedule it at the earliest convenience?\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long duration;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime nextStartDate \u003d dateList.get(0).getStartDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        duration \u003d ChronoUnit.HOURS.between(LocalDateTime.now(), nextStartDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (durationToSchedule \u003c\u003d duration) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.printOutput(\"You can schedule this task from now till \" + nextStartDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        boolean isFreeBetweenEvents \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (int i \u003d 0; i \u003c dateList.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            LocalDateTime currentEndDate \u003d dateList.get(i).getEndDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (i \u003d\u003d dateList.size() - 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                nextStartDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                if (currentEndDate.isAfter(deadlineDate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    currentEndDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                nextStartDate \u003d dateList.get(i + 1).getStartDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            duration \u003d ChronoUnit.HOURS.between(currentEndDate, nextStartDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (durationToSchedule \u003c\u003d duration) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                isFreeBetweenEvents \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                Ui.printOutput(\"You can schedule this task from \" + currentEndDate + \" till \" + nextStartDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (!isFreeBetweenEvents) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.printOutput(\"There is no free slot to insert the task. Consider freeing up your schedule.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private ArrayList\u003cEvent\u003e createDateList(ArrayList\u003cTask\u003e tasks, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cEvent\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (Task item : tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (item.getClass() \u003d\u003d task.Event.class) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (item.getStartDate().isBefore(deadlineDate)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    dateList.add((Event) item);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Collections.sort(dateList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return dateList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    // TODO: Figure a way for GUI to accept subsequent inputs"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private boolean confirmSchedule(Task t, LocalDateTime start, long duration, TaskList tasks, Storage storage)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String answer \u003d Ui.readInput().toLowerCase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (answer.equals(\"y\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                String description \u003d t.getDescription() + \"(Recommended period)\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime end \u003d start.plusHours(duration);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                Command command \u003d new AddCommand(\"todo\", description, start, end);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                command.execute(tasks, storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (answer.equals(\"n\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.printOutput(\"Not a valid input. Please answer as y/n\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 9,
      "fauzt": 105
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Renders all the sorted tasks scheduled on a date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String dateToFind;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String NO_TASK_SCHEDULED \u003d \"There are no tasks scheduled on that date.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRESENT_SCHEDULE \u003d \"Here is your schedule for that day:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODAY_TASK \u003d \"The tasks you have on this date are:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(String dateToFind) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateToFind \u003d dateToFind;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Finds all the tasks scheduled on a particular date and passes it to UI which prints to user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e sortedRequiredSchedule \u003d tasks.schedule(dateToFind);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (sortedRequiredSchedule.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printMessage(NO_TASK_SCHEDULED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printMessage(PRESENT_SCHEDULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            for (Task task : sortedRequiredSchedule) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(TODAY_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Integer j \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            for (Task task : sortedRequiredSchedule) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.userOutputForUI +\u003d j++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 16,
      "hanskw4267": 4,
      "TanYiXiang": 6,
      "-": 25
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Exception class is used to handle all of the expected exceptions and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * certain unexpected exceptions to give the user a better understanding of why"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the program crashed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String WRONG_FORMAT_MSG \u003d \"OOPS!!! The date or time of this add type command is not of the \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"correct format. See the manual above!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String TASK_CLASH_MSG \u003d \"OOPS!!! There is already a task scheduled at the same time, use view \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"command to check your schedule for the day\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_DESCRIPTION_MSG \u003d \"OOPS!!! The description of the command is missing. See \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"the manual above!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String UNKNOWN_COMMAND_MSG \u003d \"OOPS!!! The command you have entered is not of a valid type. \" "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"See the manual above!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_DATETIME_MSG \u003d \"OOPS!!! The date or time of this add type command is missing. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"See the manual above!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String NONEXISTING_TASK_MSG \u003d \"OOPS!!! The task you searched for does not exist. \" "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"See the manual above!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String WRITE_ERROR_MSG \u003d \"OOPS!!! Unable to write file. The program will be terminated.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String READ_ERROR_MSG \u003d \"OOPS!!! Unable to read from file. The program will be terminated.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String NONEXISTING_CLASS_MSG \u003d \"OOPS!!! Unable to extract certain features of the Duke Project\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \" Please ensure the project was imported properly\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_FILE_MSG \u003d \"OOPS!!! Unable to read from previous task list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"A new file has been created for you\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_PRIORITY_MSG \u003d \"OOPS!!! The new priority level is missing. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"Please try typing the command again.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String INAVLID_PRIORITY_MSG \u003d \"OOPS!!! The new priority level is invalid. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"It must be either high,medium or low.Please try again\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String INVALID_INDEX_MSG \u003d \"OOPS!!! The index given is invalid. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                                    + \"It must be a existing index in the list. Please try again\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String INVALID_LOCATION_MSG \u003d \"OOPS!!! The location portion is not provided. Please try again\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_COMMENT_MSG \u003d \"OOPS!!! The comment section is empty. Please try again\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles wrong date or time errors."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String wrongDateOrTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if a new task clashes with a existing task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskClash() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return TASK_CLASH_MSG;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty task description errors."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyUserDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_DESCRIPTION_MSG;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles when parser does not understand input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unknownUserCommand() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return UNKNOWN_COMMAND_MSG;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty date or time errors."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyDateOrTime() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_DATETIME_MSG;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if task searched does not exist."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskDoesNotExist() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return NONEXISTING_TASK_MSG;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to save the tasks list to file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToWriteFile() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return WRITE_ERROR_MSG;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to read an existing file for tasks list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToReadFile() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return READ_ERROR_MSG;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if class does not exists."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String classDoesNotExist() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return NONEXISTING_CLASS_MSG;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if file does not exists."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String fileDoesNotExist() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_FILE_MSG;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Handles if priority level is missing from priority command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyPriorityLevel() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_PRIORITY_MSG;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Handles if priority level is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String invalidPriorityLevel() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return INAVLID_PRIORITY_MSG;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if index is invalid."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String invalidIndex() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return INVALID_INDEX_MSG;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * notifies user if location is not provided."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String invalidLocation() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return INVALID_LOCATION_MSG;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * notifies user if comment is not provided."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyComment() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_COMMENT_MSG;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 16,
      "hanskw4267": 115,
      "TanYiXiang": 13,
      "-": 44
    }
  },
  {
    "path": "src/main/java/parser/CommentParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.CommentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the comment command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class CommentParser extends IndexParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public CommentParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String comment \u003d extractComment(taskFeatures);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new CommentCommand(indexOfTask, comment);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String extractComment(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String comment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] commentCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            comment \u003d commentCommandParts[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.emptyComment());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 37
    }
  },
  {
    "path": "src/main/java/parser/DateTimeExtractor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This DateTimeExtractor class allows the identification of dates and is used"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * to print out dates and times."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeExtractor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateDeadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime datePostpone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateTodo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final LocalDateTime dateError \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function appends the end time of an event to provide a standardised"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * output of date and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dateTimeFromUser A string containing only the date segment of the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                         input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String A string containing the end time of an event will also returned."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ParseException The ParseException is called if the date or time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                        format provided by the user is incorrect!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDateTime extractDateTime(String dateTimeFromUser, String command) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            dateEvent \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateEvent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTodo \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateTodo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDeadline \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateDeadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"postpone\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            datePostpone \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return datePostpone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"view\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            dateView \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateView;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // Allows the developer to know that a command other than deadline or event was"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // passed to the function!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateError;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 14,
      "TanYiXiang": 1,
      "-": 33,
      "fauzt": 6
    }
  },
  {
    "path": "src/main/java/parser/DeadlineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components to add a deadline ."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class DeadlineParser extends DescriptionParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public DeadlineParser(String userInput, String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.BY.getFlag();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d extractStartDate(taskFeatures);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, startDate, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractStartDate(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            startDate \u003d DateTimeExtractor.extractDateTime(dateTimeFromUser, command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 7,
      "fauzt": 38
    }
  },
  {
    "path": "src/main/java/parser/DeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the delete command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class DeleteParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public DeleteParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new DeleteCommand(indexOfTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 25
    }
  },
  {
    "path": "src/main/java/parser/DescriptionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Backbone of all parsers that process input based on strings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class DescriptionParser extends Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String checkType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String taskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public DescriptionParser(String userInput, String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public abstract Command parse() throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void extract() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d removeCommandInput(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskDescription \u003d parseDetails(taskFeatures, checkType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String parseDetails(String taskFeatures, String checkType) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (checkType \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return taskFeatures;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String description \u003d taskFeatures.split(checkType,2)[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 6,
      "fauzt": 32
    }
  },
  {
    "path": "src/main/java/parser/DoneParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the done command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class DoneParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public DoneParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new DoneCommand(indexOfTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 24
    }
  },
  {
    "path": "src/main/java/parser/EditParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the edit command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public EditParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String newDescription \u003d extractNewDescription(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new EditCommand(indexOfTask, newDescription);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String extractNewDescription(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String[] editCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String newDescription \u003d editCommandParts[1].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newDescription.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return newDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 35
    }
  },
  {
    "path": "src/main/java/parser/EventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required to create an event class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EventParser extends DescriptionParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public EventParser(String userInput, String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.checkType \u003d Flag.AT.getFlag();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime fromDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime toDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            fromDate \u003d extractFromDate(dateTimeFromUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            toDate \u003d extractToDate(dateTimeFromUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert toDate !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert fromDate !\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new AddCommand(command, taskDescription, fromDate, toDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime extractFromDate(String dateTimeFromUser) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String fromDateString \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return DateTimeExtractor.extractDateTime(fromDateString, command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime extractToDate(String dateTimeFromUser) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String toDateString \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return DateTimeExtractor.extractDateTime(toDateString, command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 59
    }
  },
  {
    "path": "src/main/java/parser/FindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the find command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class FindParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public FindParser(String userInput, String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new FindCommand(taskFeatures);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 23
    }
  },
  {
    "path": "src/main/java/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public enum Flag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    BY(\"/by\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    AT(\"/at\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    BETWEEN(\"/between\"), FOR(\"/for\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    IN(\"/in\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String flag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Flag(String flag) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fauzt": 21
    }
  },
  {
    "path": "src/main/java/parser/IgnoreParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.IgnoreCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the ignore command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class IgnoreParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Boolean isIgnore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public IgnoreParser(String userInput, String command, Boolean isIgnore) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isIgnore \u003d isIgnore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new IgnoreCommand(indexOfTask, isIgnore);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 28
    }
  },
  {
    "path": "src/main/java/parser/IndexParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Backbone of all parsers that process input based on list index."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class IndexParser extends Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    Integer indexOfTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String NEGATIVE_NUM_DETECTED \u003d \"Please input a positive number for task index.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public IndexParser(String userInput, String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public abstract Command parse() throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void extract() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d removeCommandInput(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d parseIndex(taskFeatures);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int parseIndex(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Integer index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            index \u003d Integer.parseInt(taskFeatures.split(\"\\\\s+\", 2)[0].trim()) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(NEGATIVE_NUM_DETECTED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "TanYiXiang": 9,
      "fauzt": 29
    }
  },
  {
    "path": "src/main/java/parser/LocationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.LocationCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the location command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class LocationParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public LocationParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String locationString \u003d extractNewLocation(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new LocationCommand(indexOfTask, locationString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String extractNewLocation(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String locationString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] locationCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            locationString \u003d locationCommandParts[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.invalidLocation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return locationString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 36
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Ensures that all the classes of parser type have implementations of the method parse."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String taskFeatures;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    String checkType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Parser(String userInput, String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public abstract Command parse() throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String removeCommandInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String taskFeatures;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            taskFeatures \u003d userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return taskFeatures;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "TanYiXiang": 5,
      "-": 12,
      "fauzt": 15
    }
  },
  {
    "path": "src/main/java/parser/ParserFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * The parser class is used to parse and make sense of the different queries the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * user inputs into the program and tag them for further processing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ParserFactory {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final boolean IGNORE \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final boolean UNIGNORE \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String WRONG_COMMAND \u003d \"Wrong Command\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the user input of string type and returns the respective command type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param userInput This string is provided by the user to ask \u0027Duke\u0027 to perform"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                  a particular action"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return Command After processing the user\u0027s input it returns the correct"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                  command for further processing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws DukeException The DukeException class has all the respective methods"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                       and messages!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String command \u003d userInput.split(\"\\\\s+\", 2)[0].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (userInput.contains(Flag.BETWEEN.getFlag())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return new TodoWithinPeriodParser(userInput, command).parse();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (userInput.contains(Flag.FOR.getFlag())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return new TodoWithDurationParser(userInput, command).parse();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TodoParser(userInput, command).parse();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new DeadlineParser(userInput, command).parse();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new EventParser(userInput, command).parse();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new FindParser(userInput, command).parse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new EditParser(userInput, command).parse();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new DeleteParser(userInput, command).parse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PriorityParser(userInput, command).parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new DoneParser(userInput, command).parse();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"remind\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new RemindParser(userInput, command).parse();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"postpone\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeParser(userInput, command).parse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new ViewParser(userInput, command).parse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new SearchParser(userInput, command).parse();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"ignore\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new IgnoreParser(userInput, command, IGNORE).parse();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"unignore\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new IgnoreParser(userInput, command, UNIGNORE).parse();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"comment\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new CommentParser(userInput, command).parse();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"location\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new LocationParser(userInput, command).parse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ScheduleParser(userInput, command).parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            // Empty string or unknown command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.printUnknownInput();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.userOutputForUI \u003d WRONG_COMMAND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "TanYiXiang": 19,
      "fauzt": 68
    }
  },
  {
    "path": "src/main/java/parser/PostponeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.PostponeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the postpone command from the user input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeParser extends IndexParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime newFromDate \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime newToDate \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeParser(String userInput, String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String[] postponeCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            dateString \u003d postponeCommandParts[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (dateString.contains(\"-\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractEventDates(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeCommand(indexOfTask, newFromDate, newToDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractDeadlineDates(dateString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeCommand(indexOfTask, newFromDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void extractEventDates(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String obtainStartDate \u003d dateString.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String obtainEndDate \u003d dateString.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            newFromDate \u003d DateTimeExtractor.extractDateTime(obtainStartDate, command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            newToDate \u003d DateTimeExtractor.extractDateTime(obtainEndDate, command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void extractDeadlineDates(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            newFromDate \u003d DateTimeExtractor.extractDateTime(dateString, command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 63
    }
  },
  {
    "path": "src/main/java/parser/PriorityParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.PriorityCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the priority command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PriorityParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PriorityParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String priorityString \u003d extractPriority(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new PriorityCommand(indexOfTask, priorityString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String extractPriority(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String priorityString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] priorityCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            priorityString \u003d priorityCommandParts[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.emptyPriorityLevel());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return priorityString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 38
    }
  },
  {
    "path": "src/main/java/parser/RemindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the remind command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class RemindParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public RemindParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.IN.getFlag();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days \u003d extractDays(taskFeatures);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new RemindCommand(indexOfTask, days);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDays(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String daysString \u003d substring.split(\"\\\\s+\", 2)[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            days \u003d Integer.parseInt(daysString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 6,
      "fauzt": 34
    }
  },
  {
    "path": "src/main/java/parser/ScheduleParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.TaskScheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the schedule command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ScheduleParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfDeadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public ScheduleParser(String userInput, String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        indexOfDeadline \u003d extractDeadline(taskFeatures);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new TaskScheduleCommand(indexOfTask, indexOfDeadline);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDeadline(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String extractedIndex \u003d taskFeatures.split(Flag.BY.getFlag(), 2)[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int convertedIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            convertedIndex \u003d Integer.parseInt(extractedIndex) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return convertedIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 7,
      "fauzt": 34
    }
  },
  {
    "path": "src/main/java/parser/SearchParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the search command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class SearchParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public SearchParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Long duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        duration \u003d (long) indexOfTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new SearchCommand(duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 26
    }
  },
  {
    "path": "src/main/java/parser/TodoParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required to add a todo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the user\u0027s input into information to be passed into the Command class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return The command to add the task with inputted description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws DukeException if user\u0027s input is in an invalid format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, null, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 6,
      "fauzt": 23
    }
  },
  {
    "path": "src/main/java/parser/TodoWithDurationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required to add a TodoWithDuration task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoWithDurationParser extends TodoParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"Invalid duration format. Duration must be a number\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithDurationParser(String userInput, String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.FOR.getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int duration \u003d extractDuration(taskFeatures);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, duration);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDuration(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            duration \u003d Integer.parseInt(substring.split(\"\\\\s+\", 2)[0].trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(INVALID_DURATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 9,
      "fauzt": 31
    }
  },
  {
    "path": "src/main/java/parser/TodoWithinPeriodParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required to add a TodoWithinPeriod task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Fauzan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoWithinPeriodParser extends TodoParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithinPeriodParser(String userInput, String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.BETWEEN.getFlag();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d extractStartDate(taskFeatures);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime endDate \u003d extractEndDate(taskFeatures);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, startDate, endDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractStartDate(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String from;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            from \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            startDate \u003d DateTimeExtractor.extractDateTime(from, command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractEndDate(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String to;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            to \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            endDate \u003d DateTimeExtractor.extractDateTime(to, command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 6,
      "fauzt": 59
    }
  },
  {
    "path": "src/main/java/parser/ViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the view command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class ViewParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public ViewParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new ViewCommand(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 25
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Storage class is utilised to do both the reading and writing to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * persistent storage using the two primary methods saveFile and loadFile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static \u003cT\u003e T castToAnything(Object obj) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return (T) obj;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private FileOutputStream fileOutputStream;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private ObjectOutputStream objectOutputStream;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private FileInputStream fileInputStream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private ObjectInputStream objectInputStream;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This Storage constructor is used to function is used to assign the different"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * parameters required by the Storage methods."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file This parameter holds the file to write to."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This saveFile method is used repeatedly throughout the other classes to save"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates made to the TaskList to the persistent storage to ensure the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * does not loose data due to sudden termination of the program."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param listOfTasks This parameter holds the updated TaskList of the user and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    used to save the updated TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException This exception is thrown if there is not file at the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       given location to save to."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e listOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            setOutputStreams();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            objectOutputStream.writeObject(listOfTasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            objectOutputStream.close(); // always close"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fileOutputStream.close(); // always close"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unableToWriteFile());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This saveFile method is used repeatedly throughout the other classes to save"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates made to the TaskList to the persistent storage to ensure the user"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * does not loose data due to sudden termination of the program."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file This parameter is passed as to be able to write to the file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException This exception is thrown for any unexpected issues such"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       as no file in location, unable to read the file or a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       class in not found."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile(File file) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            setInputStreams(file);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            listOfTasks \u003d (ArrayList\u003cTask\u003e)(objectInputStream.readObject());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileInputStream.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return listOfTasks;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.fileDoesNotExist());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unableToReadFile());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.classDoesNotExist());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void setOutputStreams() throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.fileOutputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void setInputStreams(File file) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.fileInputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 12,
      "hanskw4267": 36,
      "-": 40,
      "fauzt": 18
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * deadline type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Deadline extends Task implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Constructor for deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description Description of the deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param atDate      Due date for deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Deadline(String description, LocalDateTime atDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d atDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setReminder(3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString \u003d \"(by: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            dateString \u003d dateString + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return message.concat(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isEqual(taskToCheck.startDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (taskToCheck.startDate.isBefore(this.startDate) \u0026\u0026 taskToCheck.endDate.isAfter(this.startDate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 6,
      "TanYiXiang": 7,
      "-": 20,
      "fauzt": 10
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class Event extends Task implements Serializable, Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * creates a new Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param startDate   end time of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param endDate     start time of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Event(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setReminder(3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Custom comparator for sorting."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return this.startDate.compareTo(o.startDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[E]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString \u003d \"(at: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \"-\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            dateString \u003d dateString + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return message.concat(dateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isBefore(taskToCheck.startDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return this.startDate.isBefore(taskToCheck.endDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 14,
      "TanYiXiang": 5,
      "-": 26,
      "fauzt": 12
    }
  },
  {
    "path": "src/main/java/task/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * This enumeration defines the priority levels supported by Chronologer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function obtains a Priority Constant based on the input string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param priorityString String corresponding to priority level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Correct priority level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static Priority getPriorityLevel(String priorityString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        switch (priorityString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.INVALID;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 34
    }
  },
  {
    "path": "src/main/java/task/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "class Reminder implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime reminderDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Reminder(int days, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminderDate \u003d startDate.minusDays(days);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Reminder(int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminderDate \u003d LocalDateTime.now().plusDays(days);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    boolean isReminderTrigger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return LocalDateTime.now().isAfter(reminderDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 1,
      "fauzt": 19
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Task class is extended by the other tasks and serves as a template for"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * all tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected LocalDateTime startDate \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected LocalDateTime endDate \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected Reminder reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String comment;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    protected boolean isIgnored;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\"; // Tick symbol"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String CROSS \u003d \"\\u2718\"; // Cross symbol"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRIORITY_LOW \u003d \"[\\u2605]\";// Low priority symbol"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRIORITY_MED \u003d \"[\\u2605\\u2605]\";// Med priority symbol"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRIORITY_HIGH \u003d \"[\\u2605\\u2605\\u2605]\"; // High priority symbol"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Constructor for task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.isIgnored \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if any task reminders are triggered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return if triggered"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public boolean isReminderTrigger() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isIgnored) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return reminder.isReminderTrigger();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Returns a priority symbol to be printed as output."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Unicode that represent priority level."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getPriorityIcon() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (priority \u003d\u003d Priority.HIGH) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return PRIORITY_HIGH; // Return triple star symbols"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (priority \u003d\u003d Priority.MEDIUM) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return PRIORITY_MED;// Return double star symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return PRIORITY_LOW;// Return single star symbol"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This getStatusIcon function returns the tick or cross symbols to be printed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * as output."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return This function returns either a tick or a cross."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (isDone ? TICK : CROSS); // Return tick or cross symbol"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * converts the task to a string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d getPriorityIcon() + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    abstract boolean isClash(Task taskToCheck);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Reminder getReminder() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        reminder \u003d new Reminder(days, startDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setComment(String comment) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public boolean isIgnored() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return isIgnored;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setIgnored(boolean isIgnored) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.isIgnored \u003d isIgnored;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 74,
      "TanYiXiang": 46,
      "-": 39,
      "fauzt": 6
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The TaskList class handles all operations performed on the TaskList as well"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * as stores the TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * This custom comparator allows the sorting of both deadlines and events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Comparator\u003cTask\u003e DateComparator \u003d (firstDate, secondDate) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (firstDate.startDate \u003d\u003d null \u0026\u0026 secondDate !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else if (firstDate.startDate !\u003d null \u0026\u0026 secondDate.startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (firstDate.startDate.isBefore(secondDate.startDate)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This custom comparator allows the sorting of both deadlines and events."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static final Comparator\u003cTask\u003e PriorityComparator \u003d (firstPriority, secondPriority) -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (firstPriority.priority.equals(Priority.HIGH) \u0026\u0026 secondPriority.priority.equals(Priority.MEDIUM)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else if (firstPriority.priority.equals(Priority.MEDIUM) \u0026\u0026 secondPriority.priority.equals(Priority.MEDIUM)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the use to add a particular task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the use to delete a particular task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be deleted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task delete(int indexOfTask) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.remove(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to find tasks with a particular keyword."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyWord this string contains the keyword the user is searching for."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyWord) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String findMatch \u003d listOfTasks.get(i).toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (findMatch.contains(keyWord)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                holdFoundTasks.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return holdFoundTasks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Performs a check as to determine if the task being added has a clash with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * another task already scheduled."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskToCheck the task trying to be added by the user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean true if there is a clash, false if there is not clash."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (task.isClash(taskToCheck)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to mark a particular task as done."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be marked as"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    done."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task markAsDone(int indexOfTask) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Marks a task to be ignored and have reminders to stop showing up for the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param index The index of the task to be marked"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The marked task"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task markAsIgnorable(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d listOfTasks.get(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        task.setIgnored(true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Marks a task to no longer be ignored and have reminders to show up again."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param index The index of the task to be marked"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The marked task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task markAsUnignorable(int index) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d listOfTasks.get(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        task.setIgnored(false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This function allows the user to add a location to tasks."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskWithLocation is of String type which contains the desired date of"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *                         schedule."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return sortDateList the sorted schedule of all the tasks on a particular"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         date."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Task addLocation(Integer indexOfTask, String taskWithLocation) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task taskHasLocation \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskHasLocation.setLocation(\"Location of the task is \" + taskWithLocation);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return taskHasLocation;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return sortDateList the sorted schedule of all the tasks on a particular"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         date."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e schedule(String dayToFind) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e sortedDateList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (listOfTasks.get(i).toString().contains(dayToFind)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                sortedDateList.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.sort(sortedDateList, DateComparator);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return sortedDateList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date sorted"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * by priority."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return priorityList the tasks of the given day sorted by priority"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e obtainPriorityList(String dayToFind) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e priorityList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (listOfTasks.get(i).toString().contains(dayToFind)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    \u0026\u0026 !listOfTasks.get(i).priority.equals(Priority.LOW)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                priorityList.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.sort(priorityList, PriorityComparator);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return priorityList;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date, but"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * only with description."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return sortDateList which contains only the descriptions of the tasks."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cString\u003e scheduleForDay(String dayToFind) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e obtainDescriptions \u003d schedule(dayToFind);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e scheduleDescriptionOnly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (int i \u003d 0; i \u003c obtainDescriptions.size(); i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (obtainDescriptions.get(i).toString().contains(dayToFind)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                scheduleDescriptionOnly.add(obtainDescriptions.get(i).description.split(\"\\\\d+\", 2)[0].trim());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return scheduleDescriptionOnly;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function allows the user to edit the task description."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask    Location of task in the list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newDescription The new task description to be updated"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return taskToBeEdited The task that had its description edited"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task editTaskDescription(int indexOfTask, String newDescription) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskToBeEdited.setDescription(newDescription);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Function to allow user to edit/add comments to existing tasks."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask Index of task in list"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param comment     commnent to be added/edited"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return taskToBeEdited The task that has its comment edited/added"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Task editTaskComment(int indexOfTask, String comment) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskToBeEdited.setComment(comment);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 68,
      "hanskw4267": 50,
      "TanYiXiang": 30,
      "-": 100,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of to-do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public int duration \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Todo(String description, int duration) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Creates a ToDo task with a specific duration and timing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param startDate   start time of the task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param endDate     end time of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Todo(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This override of the toString function of the task class etches the different"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * portions of the user input into a single string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (this.duration \u003d\u003d 0 \u0026\u0026 this.startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (this.duration \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + \" (from: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\" + \" (to: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + \"(for \" + duration + \" hours)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new Reminder(days);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "hanskw4267": 36,
      "TanYiXiang": 1,
      "-": 28,
      "fauzt": 5
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The Ui class is used to handle all inputs and outputs used to interact with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the end-user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // All the different definitions including the string definitions are here."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String userOutputForUI;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String userOutputDash \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String goodbye \u003d \"_______________________________\\n\" + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        + \"_______________________________\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String greeting \u003d \"_______________________________\\n\" + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"What can I do for you?\\n\" + \"_______________________________\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints a \u0027dashed\u0027 line."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void printDash() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints greeting."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints the reminders triggered."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void printReminder(TaskList tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"You have these upcoming tasks:\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (t.isReminderTrigger()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(t.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(goodbye);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printOutput function is used to print the output in the current Ui"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * format. Moreover it also handles the refresh of the userOutputForUT."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userOutput This string will be used to print the message between to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                   data."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printOutput(String userOutput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.userOutputForUI \u003d userOutput + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This readInput function is used to constantly take in the userInput by"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * checking if there is a line to be read. But if there is no line to be read"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * then the program terminates."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This function will return a String which contains the user input."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d \"bye\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printMessage function is called to print an exception message to the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param message This message contains the message generated by the exception"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                that was caught."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void printMessage(String message) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printManual function is called to aid the user in the usage of \u0027Duke\u0027 by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * guiding them on how to input their task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printManual() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hi, this is Duke!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"I am able to let you add tasks of three types! todo, event and deadline\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"1. To add a todo task, key in todo\u003cspace\u003eyour task description eg. todo borrow books\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"2. To add a deadline, key in deadline\u003cspace\u003eyour deadline description\u003cspace\u003e/by\u003cspace\u003ethe \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"date eg. return books/by dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        System.out.println(\"3. To add a event, key in event\u003cspace\u003eyour event description\u003cspace\u003e/at\u003cspace\u003ethe day or \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"date and the time eg. Project meeting /at dd/MM/yyyy HHmm-HHmm\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"4. To list out all your tasks simply enter list\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"5. To mark a task as complete just enter done\u003cspace\u003ethe index of the task as listed\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"6. To find a task from the task list enter find\u003cspace\u003eany word in the task\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"7. To delete a task just enter delete\u003cspace\u003ethe index of the task as listed\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"8. To exit, enter bye\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printUnknownInput() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. If you would like to know how to \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"use Duke, Enter duke-manual\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 13,
      "hanskw4267": 27,
      "TanYiXiang": 1,
      "-": 87,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"350.0\" style\u003d\"-fx-background-color: #303030;\" type\u003d\"javafx.scene.layout.HBox\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c!-- fitHeight is the height of the dialogBox --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"67.0\" fitWidth\u003d\"78.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-text-fill: #a8a8a8;\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 13
    }
  },
  {
    "path": "src/main/resources/view/ErrorMessageBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cfx:root maxHeight\u003d\"158.0\" maxWidth\u003d\"200.0\" prefWidth\u003d\"240.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"errorMessage\" textAlignment\u003d\"CENTER\" minHeight\u003d\"80.0\" minWidth\u003d\"240.0\" text\u003d\"Label\" wrapText\u003d\"true\" style\u003d\"-fx-border-color: #de1b15; -fx-text-fill: #01f222\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.effect.ColorAdjust?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"503.0\" maxWidth\u003d\"1407.0\" minHeight\u003d\"503.0\" minWidth\u003d\"1407.0\" prefHeight\u003d\"503.0\" prefWidth\u003d\"1407.0\" style\u003d\"-fx-background-color: #303030;\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"2.0\" layoutY\u003d\"456.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"49.0\" prefWidth\u003d\"1062.0\" style\u003d\"-fx-background-color: #000000; -fx-text-fill: #01f222;\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"1064.0\" layoutY\u003d\"451.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #303030;\" text\u003d\"Send\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hvalue\u003d\"1.0\" layoutX\u003d\"1140.0\" layoutY\u003d\"-2.0\" prefHeight\u003d\"354.0\" prefWidth\u003d\"267.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"354.0\" prefWidth\u003d\"253.0\" style\u003d\"-fx-background-color: #303030;\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "               \u003cInsets left\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"priorityTaskLabel\" layoutX\u003d\"940.0\" prefHeight\u003d\"42.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #303030; -fx-border-color: #696969;\" textFill\u003d\"#a8a8a8\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cInsets left\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"todayTaskPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"940.0\" layoutY\u003d\"42.0\" prefHeight\u003d\"413.0\" prefWidth\u003d\"200.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"tasksForTheDay\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"412.0\" prefWidth\u003d\"182.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14; -fx-alternative-row-fill-visible: true\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"errorScrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"1139.0\" layoutY\u003d\"352.0\" prefHeight\u003d\"151.0\" prefWidth\u003d\"267.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cVBox fx:id\u003d\"errorMessageContainer\" alignment\u003d\"TOP_CENTER\" layoutX\u003d\"586.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"150.0\" prefWidth\u003d\"252.0\" style\u003d\"-fx-background-color: #000000;\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"mondayScrollPane\" layoutX\u003d\"2.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"133.0\" style\u003d\"-fx-background-color: #ffffff; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"mondayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"tuesdayScrollPane\" layoutX\u003d\"136.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"tuesdayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"wednesdayScrollPane\" layoutX\u003d\"270.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "             \u003cListView fx:id\u003d\"wednesdayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"thursdayScrollPane\" layoutX\u003d\"404.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "             \u003cListView fx:id\u003d\"thursdayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"fridayScrollPane\" layoutX\u003d\"538.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "             \u003cListView fx:id\u003d\"fridayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"40.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"saturdayScrollPane\" layoutX\u003d\"672.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "             \u003cListView fx:id\u003d\"saturdayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"sundayScrollPane\" layoutX\u003d\"806.0\" layoutY\u003d\"124.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #000000;\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "             \u003cListView fx:id\u003d\"sundayTask\" fixedCellSize\u003d\"0.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"206.0\" prefWidth\u003d\"115.0\" style\u003d\"-fx-background-color: #696969; -fx-font-size: 14;\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "       \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"305.0\" layoutY\u003d\"14.0\" text\u003d\"Your timeline for this week\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"mondayLabel\" layoutX\u003d\"29.0\" layoutY\u003d\"90.0\" text\u003d\"Monday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"163.0\" layoutY\u003d\"90.0\" text\u003d\"Tuesday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"280.0\" layoutY\u003d\"90.0\" text\u003d\"Wednesday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"426.0\" layoutY\u003d\"90.0\" text\u003d\"Thursday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"575.0\" layoutY\u003d\"90.0\" text\u003d\"Friday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"837.0\" layoutY\u003d\"90.0\" text\u003d\"Sunday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"696.0\" layoutY\u003d\"90.0\" text\u003d\"Saturday\" textFill\u003d\"#a8a8a8\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"todayLabel\" layoutY\u003d\"86.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-border-color: #009933; -fx-border-width: 3;\" textFill\u003d\"#787878\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 126
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This class implements the unit testing code for the AddCommand Test class and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * particularly tests IsClash()."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testisClash() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task2 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(testisClash.isClash(task2), true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 7,
      "-": 20,
      "fauzt": 1
    }
  },
  {
    "path": "src/test/java/CommentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import command.CommentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class CommentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid comment command creation\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidCommentCommandCreation() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        CommentCommand actualCmd \u003d new CommentCommand(1, \"this is a test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        int index \u003d actualCmd.getIndexOfTask();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String comment \u003d actualCmd.getComment();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(1, index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(\"this is a test\", comment);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid comment input\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"comment 1 testing\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid comment input\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"comment\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 40,
      "fauzt": 3
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime fromDate \u003d LocalDateTime.of(2001, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    Deadline deadline \u003d new Deadline(\"test\", fromDate);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDeadlineCreation() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String title \u003d deadline.getDescription();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime date \u003d deadline.getStartDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(title, \"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(date, fromDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadline.toString(), \"[\\u2605\\u2605][D][\\u2718] test(by: 01/01/2001 0100)\");//Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void testDeadlinePostponement() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime newFromDate \u003d LocalDateTime.of(2003, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        deadline.setStartDate(newFromDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(deadline.getStartDate(), newFromDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 3,
      "TanYiXiang": 9,
      "fauzt": 24
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void testEdit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline testTask \u003d new Deadline(\"Minecraft\", testDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test.add(testTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList testList \u003d new TaskList(test);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testList.editTaskDescription(0, \"Roblox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test \u003d testList.getTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test.get(0).getDescription(), \"Roblox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 1,
      "TanYiXiang": 23
    }
  },
  {
    "path": "src/test/java/ParserFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ParserFactoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime startDate \u003d LocalDateTime.of(2001,1,1,1,0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime endDate \u003d LocalDateTime.of(2001,1,1,13,0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command event \u003d new AddCommand(\"event\", \"test\", startDate, endDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command deadline \u003d new AddCommand(\"deadline\", \"test\", startDate, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command todo \u003d new AddCommand(\"todo\", \"test\", null, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Field[] getAddCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields \u003d new Field[4];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"command\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"taskFeatures\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2] \u003d command.getClass().getDeclaredField(\"formattedStartDate\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3] \u003d command.getClass().getDeclaredField(\"formattedEndDate\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2].setAccessible(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3].setAccessible(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void assertEqualsAddCommand(Field[] test, Field[] expected, Command testCommand, Command expectedCommand)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throws IllegalAccessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[2].get(testCommand), expected[2].get(expectedCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[3].get(testCommand), expected[3].get(expectedCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testToDoParsing() throws DukeException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] todoFields \u003d getAddCommandFields(todo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command todoTest \u003d ParserFactory.parse(\"todo test\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] toDoTestFields \u003d getAddCommandFields(todoTest);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(toDoTestFields, todoFields, todoTest, todo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDeadlineParsing() throws DukeException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] deadlineFields \u003d getAddCommandFields(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command deadlineTest \u003d ParserFactory.parse(\"deadline test /by 01/01/2001 0100\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] deadlineTestFields \u003d getAddCommandFields(deadlineTest);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(deadlineTestFields, deadlineFields, deadlineTest, deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testEventParsing() throws DukeException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] eventFields \u003d getAddCommandFields(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command eventTest \u003d ParserFactory.parse(\"event test /at 01/01/2001 0100 - 01/01/2001 1300\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] eventTestFields \u003d getAddCommandFields(eventTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(eventTestFields, eventFields, eventTest, event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testExceptionForDeadline() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test /by\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline /by 01/01/2001 0100\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test 01/01/2001 0100\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 84
    }
  },
  {
    "path": "src/test/java/RemindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Setups the necessary base to carry out the test operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/ArrayList\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new RemindCommand(1, 5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo filler \u003d new Todo(\"1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(filler);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testReminder() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Deadline(\"test\", LocalDateTime.of(2019, 8, 1, 12, 0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(testTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder.execute(tasks, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertNotNull(testTask.getReminder());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertTrue(testTask.isReminderTrigger());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testReminderNotTriggered() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Event(\"test\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.of(3019, 8, 1, 12, 0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.of(3019, 8, 2, 12, 0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(testTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder.execute(tasks, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertNotNull(testTask.getReminder());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertFalse(testTask.isReminderTrigger());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"remind\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse((\"remind 0 in 3 days\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new RemindCommand(100, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            test.execute(tasks, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void teardownSetup() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 2,
      "TanYiXiang": 2,
      "-": 21,
      "fauzt": 53
    }
  },
  {
    "path": "src/test/java/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid search Command creation\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidSearchCommandCreation() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        SearchCommand actualCmd \u003d new SearchCommand((long) 3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration \u003d actualCmd.getDurationToFind();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals((long) 3, duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid search input\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"search 3\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid search input\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"search h\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 21,
      "-": 18,
      "fauzt": 3
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the To-do class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Todo todo \u003d new Todo(\"testing todo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testTodoCreation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String title \u003d todo.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(title, \"testing todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(todo.toString(), \"[\\u2605\\u2605][T][\\u2718] testing todo\"); //Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testTodoWithinPeriod() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime from;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime to;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            from \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 0800\", \"todo\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            to \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 2200\", \"todo\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Todo newTodo \u003d new Todo(\"testTodo\", from, to);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Assertions.assertEquals(newTodo.getStartDate(), from);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 5,
      "TanYiXiang": 1,
      "-": 34,
      "fauzt": 8
    }
  },
  {
    "path": "src/test/java/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the ViewCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2019, 9, 23, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e testIfNull \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testIfNull \u003d testisClash.schedule(\"23/09/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue((testIfNull.size() \u003e 0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 6,
      "-": 22,
      "fauzt": 1
    }
  },
  {
    "path": "tutorials/DialogBox.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 59
    }
  },
  {
    "path": "tutorials/Main.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 30
    }
  }
]
