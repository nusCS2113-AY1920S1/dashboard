[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    mainClassName \u003d \"DukeLauncher\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "-": 35
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The DialogBox essentially acts as the constructor for the dialog boxes which make up the chat bot section of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * the GUI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text the text portion of the label is passed in through this parameter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param image the image portion of the label is passed in through this parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The getUserDialog distinction is needed to enable the flipping of the labels to create the chat bot like"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * structure."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text the text portion of the label designated for the user is passed in through this parameter."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param image the image portion of the label designated for the user is passed in through this parameter."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The getDukeDialog is used to flip the labels that are created for Duke to create the chat bot like"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * structure."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text the text portion of the label for Duke is passed in through this parameter."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param image the image portion of the label for Duke is passed in through this parameter."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        var dialogBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 81
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The main project class. Initializes a simple task list manager \u0027Duke\u0027 which"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * helps users curate and manage a task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v3.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath \u003d System.getProperty(\"user.dir\") + \"/src/DukeDatabase/ArrayList\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This constructor creates a new instance of vital classes and also loads tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * if any from persistent storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile(file));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method runs the main program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printGreeting();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printReminder(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String userInput \u003d Ui.readInput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                Command command \u003d ParserFactory.parse(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                command.execute(tasks, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } while (!isExit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "hanskw4267": 6,
      "-": 51,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/DukeLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DukeLauncher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Acts as the bridge between Duke\u0027s logic and the Graphical User Interface based on FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The start class method needs to be created in all JavaFX application and the Anchor pane is created,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * along with the and finally the stage is shown."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void start(Stage stage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            MainWindow.initializeDukeElements();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.getIcons().add(new Image(getClass().getResourceAsStream(\"/images/GuiLogo.png\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            stage.setTitle(\"Chronologer\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 33,
      "hanskw4267": 1
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private VBox todayTaskContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allocation of the images for the chat bot."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String filePath \u003d System.getProperty(\"user.dir\") + \"/src/DukeDatabase/ArrayList\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e holdTodayTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method is utilised to initialize the required aspects of Duke such as the storage and the rendering of"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * the TaskList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void initializeDukeElements() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile(file));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        holdTodayTasks \u003d tasks.schedule(dtf.format(now));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This @FXML initialize() is a special function where static members of the GUI can be initialised."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        todayTaskContainer.getChildren().add(TodayTaskBox.getUserTaskForToday(holdTodayTasks));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This @FXML handleUserInput() is provides the logic for the text field, whenever the user provides an input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * this function handles it by passing it to the Duke logic."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command command \u003d ParserFactory.parse(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            command.execute(tasks, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            DialogBox.getDukeDialog(Ui.userOutputForUI, dukeImage)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 93,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/TodayTaskBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class TodayTaskBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label tasksForTheDay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This TodayTaskBox function acts as the constructor for the TaskBox and will hold the user\u0027s tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * for the day and it is automatically generated upon setup."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasksForToday this ArrayList of Tasks contains all the tasks that the user has on the current day."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TodayTaskBox(ArrayList\u003cTask\u003e tasksForToday) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TodayTaskBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String holdTodayTasks \u003d \"Today\u0027s tasks \" + \"(\" + tasksForToday.size() + \") :\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        holdTodayTasks +\u003d \"------------------------\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (tasksForToday.size() !\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            for (Task task : tasksForToday) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                holdTodayTasks +\u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasksForTheDay.setText(holdTodayTasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This getUserTaskForToday function is utilised to generate the tasksForToday."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasksForToday this ArrayList of Tasks contains all the tasks that the user has on the current day."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static TodayTaskBox getUserTaskForToday(ArrayList\u003cTask\u003e tasksForToday) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new TodayTaskBox(tasksForToday);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 54
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The AddCommand class is used when the user has input a command which requires"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * a task to be added to the TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String taskFeatures;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime formattedStartDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime formattedEndDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int duration \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This AddCommand function is used to assign the different parameters required"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * when adding a task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command      this string holds command type determinant to decide how"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     to process the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskFeatures this string holds the description of the task provided by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param startDate       string contains the formatted user input that has the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     desired date time format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param endDate       string contains the formatted user input that has the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                     desired date time format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public AddCommand(String command, String taskFeatures, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskFeatures \u003d taskFeatures;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.formattedStartDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.formattedEndDate \u003d endDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Creates an AddCommand based on duration of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param command       holds command type determinant to decide how"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                      to process the user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param taskFeatures  holds the description of the task provided by"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                      the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param duration      holds the duration period of how long the task should last"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public AddCommand(String command, String taskFeatures, int duration) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d taskFeatures;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (formattedStartDate !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                task \u003d new TodoWithinPeriod(taskFeatures, formattedStartDate, formattedEndDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else if (duration !\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                task \u003d new TodoWithDuration(taskFeatures, duration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                task \u003d new Todo(taskFeatures);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            task \u003d new Deadline(taskFeatures, formattedStartDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            task \u003d new Event(taskFeatures, formattedStartDate, formattedEndDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Ui.printOutput(\"Got it! I\u0027ve added this task:\" + \"\\n  \" + task.toString() + \"\\nNow you have \" + tasks.getSize()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 23,
      "-": 45,
      "fauzt": 33
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The command abstract class is used to ensure that all the classes have"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * implementations of the methods and have the implementation of isExit()."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This Command constructor defines that exit is false when instantiated to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * allow the running of the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        exit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This CommandOut function is to set exit to true, in order to terminate the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void commandOut() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        exit \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Contracts all Command type classes to have their own respective execute"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * methods to ensure that the date is processed and stored properly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   The TaskList that was loaded from persistent storage is passed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                to the caller to utilise it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage The storage is passed to the user to allow the user to save"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                the file after updating TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException The DukeException class has all the respective methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       and messages."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This isExit function is called by a program to check the status of exit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 15,
      "-": 38
    }
  },
  {
    "path": "src/main/java/command/CommentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Used to add a comment to an existing task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans Kurnia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class CommentCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * creates the command object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param com comment inputted by user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public CommentCommand(int indexOfTask, String com) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d com;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (indexOfTask \u003e\u003d 0 \u0026\u0026 indexOfTask \u003c\u003d (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskComment(indexOfTask, comment);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"Noted. Your new task comment is:\" + \"\\n \" + taskToEdit.comment);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public int getIndexOfTask() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return indexOfTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 48
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The DeleteCommand class is used when the user intends to delete a particular"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * task from their task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int indexOfTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Used to add the respective tasks to the TaskList and save to persistent"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfTask \u003e\u003d 0 \u0026\u0026 indexOfTask \u003c\u003d (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Task task \u003d tasks.delete(indexOfTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printOutput(\"Noted. I\u0027ve removed this task:\" + \"\\n \" + task.toString() + \"\\nNow you have \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 13,
      "-": 29
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The DoneCommand class is used when the user intends to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int indexOfTaskIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTaskIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.markAsDone(indexOfTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.printOutput(\"Nice! I\u0027ve marked this task as done: \" + task.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 7,
      "-": 33
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * The EditCommand class is used whenever the user wishes to edit their task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * due to any changes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String newDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public EditCommand(int indexOfTask, String newDescription) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.newDescription \u003d newDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (indexOfTask \u003e\u003d 0 \u0026\u0026 indexOfTask \u003c\u003d (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskDescription(indexOfTask, newDescription);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"Noted. Your new task description is:\" + \"\\n \" + taskToEdit.description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 34
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The ExitCommand class is used when the user inputs bye and intends to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * terminate the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function calls the super.CommandOut function which is used to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * terminate the program by updating the boolean flag exit to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super.commandOut();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printGoodbye();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.printOutput(\"goodbye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The FindCommand class is used when the user intends to check all tasks for a keyword."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This execute function is used to find the tasks with a particular keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d tasks.find(keyWord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (holdFoundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(\"Here are the matching task(s) in your list:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Integer i \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Integer j \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            for (Task task : holdFoundTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.userOutputForUI +\u003d j++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 13,
      "hanskw4267": 7,
      "-": 31
    }
  },
  {
    "path": "src/main/java/command/IgnoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class IgnoreCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isIgnore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public IgnoreCommand(int index, boolean isIgnore) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        indexOfTask \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isIgnore \u003d isIgnore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isIgnore) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Task task \u003d tasks.markAsIgnorable(indexOfTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"Noted. This task has been marked as ignored:\\n\" + task.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task task \u003d tasks.markAsUnignorable(indexOfTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"Noted. This task is no longer ignored:\\n\" + task.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 14,
      "fauzt": 21
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The ListCommand class is used when the user intends to view his entire"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printOutput(\"You have currently no tasks in your list.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printOutput(\"Here are the task(s) in your list:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Integer i \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Integer j \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.userOutputForUI +\u003d j++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 10,
      "-": 26
    }
  },
  {
    "path": "src/main/java/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import javax.swing.UIClientPropertyKey;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.lang.reflect.GenericDeclaration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Used to postpone a task to different times."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime fromDate \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime toDate \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime startDate \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Secondary constructor for event tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask Index of the task to postpone"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param fromDate    New fromDate to represent the new time where event will start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param toDate      New toDate to represent the new time where the event will end"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime fromDate, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.fromDate \u003d fromDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBePostponed \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String description \u003d taskToBePostponed.description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (taskToBePostponed.toString().contains(\"[D]\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Deadline deadlineTest \u003d new Deadline(description, startDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (tasks.isClash(deadlineTest)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                taskToBePostponed.setStartDate(startDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Ui.printOutput(\"Got it! I\u0027ve postponed this deadline:\\n \" + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (taskToBePostponed.toString().contains(\"[E]\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (fromDate \u003d\u003d null || toDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Event eventTest \u003d new Event(description, fromDate, toDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (tasks.isClash(eventTest)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new DukeException(DukeException.taskClash());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                taskToBePostponed.setStartDate(fromDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                taskToBePostponed.setEndDate(toDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Ui.printOutput(\"Got it! I\u0027ve postponed this event:\\n \" + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"This task can\u0027t be scheduled\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 9,
      "TanYiXiang": 40,
      "-": 35
    }
  },
  {
    "path": "src/main/java/command/PriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * The PriorityCommand class is used when the user intends to add a priority level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * to a certain list item."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String priorityString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PriorityCommand(int indexOfTask, String priorityString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priorityString \u003d priorityString.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Priority newPriority \u003d Priority.getPriorityLevel(priorityString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newPriority \u003d\u003d Priority.INVALID) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.invalidPriorityLevel());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (!task.isPrioritizable) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"Ignorable tasks can\u0027t have a priority level\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            task.setPriority(newPriority);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Ui.printOutput(\"Got it! \" + task.description + \" priority level is now \" + priorityString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 47
    }
  },
  {
    "path": "src/main/java/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private int days;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public RemindCommand(int index, int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indexOfTask \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This execute function is used to add the respective tasks to the TaskList and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * save to persistent storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        boolean outOfBound \u003d indexOfTask \u003c 0 || indexOfTask \u003e (tasks.getSize() - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (outOfBound) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.taskDoesNotExist());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        task.setReminder(days);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.printOutput(String.format(\"Okay! You\u0027ll get a reminder for this task %d days beforehand:\", days)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"  \" + task.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 12,
      "-": 24,
      "fauzt": 3
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Used to find the next free timeslot of a duration of user\u0027s choosing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private long durationToFind;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public SearchCommand(Long duration) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.durationToFind \u003d duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * get the duration to find for."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return the durationToFind"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public long getDurationToFind() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return durationToFind;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * executes the search command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   the current loaded task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage the current loaded storage configuration"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        ArrayList\u003cEvent\u003e dateList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        for (Task item : tasks.getTasks()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (item.getClass() \u003d\u003d task.Event.class) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                dateList.add((Event) item);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Collections.sort(dateList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (dateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"You have no events that will clash with a slot of this duration\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            found \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (dateList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Ui.printOutput(\"You can schedule something after \" + dateList.get(0).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            for (int i \u003d 0; i \u003c dateList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (i !\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(dateList.get(i - 1).endDate, dateList.get(i).startDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(LocalDateTime.now(), dateList.get(i).startDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (durationToFind \u003c\u003d duration) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    if (i !\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        Ui.printOutput("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                            \"Next free time slot of duration \" + Long.toString(durationToFind) + \"hrs is between \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                + dateList.get(i - 1).toString() + \" and \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        Ui.printOutput(\"You can schedule something from now till \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                Ui.printOutput(\"You can schedule something after the \" + dateList.get(dateList.size() - 1).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 60,
      "-": 24,
      "fauzt": 2
    }
  },
  {
    "path": "src/main/java/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The ViewCommand class is used when the user intends to see all tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * scheduled on a date!."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String dateToFind;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(String dateToFind) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateToFind \u003d dateToFind;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * This execute function is used to view the schedule on a particular date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   this string holds command type determinant to decide how to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                process the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage this parameter provides the execute function the storage to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                allow the saving of the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e sortedRequiredSchedule \u003d tasks.schedule(dateToFind);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (sortedRequiredSchedule.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"There are no tasks scheduled on that date.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Ui.printMessage(\"Here is your schedule for that day:\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            for (Task task : sortedRequiredSchedule) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                Ui.printMessage(i++ + \".\" + task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.printDash();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Ui.userOutputForUI \u003d tasks.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 9,
      "hanskw4267": 10,
      "-": 29
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Exception class is used to handle all of the expected exceptions and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * certain unexpected exceptions to give the user a better understanding of why"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the program crashed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles wrong date or time errors."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String wrongDateOrTime() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return \"☹ OOPS!!! The date or time of this add type command is not of the correct format.\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"See the manual above!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if a new task clashes with a existing task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskClash() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! There is already a task scheduled at the same time, use view command to check your schedule \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"for the day\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty task description errors."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyUserDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The description of the command is missing. See the manual above!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles when parser does not understand input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unknownUserCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The command you have entered is not of a valid type. See the manual above!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty date or time errors."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyDateOrTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printManual();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui.printDash();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The date or time of this add type command is missing. See the manual above!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if task searched does not exist."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskDoesNotExist() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! The task you searched for does not exist. See the manual above!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to save the tasks list to file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToWriteFile() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! Unable to write file. The program will be terminated.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to read an existing file for tasks list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToReadFile() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! Unable to read from file. The program will be terminated.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if class does not exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String classDoesNotExist() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return \"☹ OOPS!!! Unable to extract certain features of the Duke Project\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"Please ensure the project was imported properly\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if file does not exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String fileDoesNotExist() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"☹ OOPS!!! Unable to read from previous task list. A new file has been created for you\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Handles if priority level is missing from priority command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyPriorityLevel() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return \"☹ OOPS!!! The new priority level is missing. Please try typing the command again.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Handles if priority level is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String invalidPriorityLevel() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return \"☹ OOPS!!! The new priority level is invalid. It must be either high,medium or low.Please try again\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if index is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String invalidIndex() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return \"☹ OOPS!!! The index given is invalid. It must be a existing index in the list. Please try again\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 76,
      "TanYiXiang": 18,
      "-": 52
    }
  },
  {
    "path": "src/main/java/parser/DateTimeExtractor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This DateTimeExtractor class allows the identification of dates and is used"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * to print out dates and times."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeExtractor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateDeadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime datePostpone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateTodo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime dateView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final LocalDateTime dateError \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function appends the end time of an event to provide a standardised"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * output of date and time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dateTimeFromUser A string containing only the date segment of the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                         input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String A string containing the end time of an event will also returned."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ParseException The ParseException is called if the date or time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                        format provided by the user is incorrect!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDateTime extractDateTime(String dateTimeFromUser, String command) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            dateEvent \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateEvent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            dateTodo \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateTodo;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            dateDeadline \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateDeadline;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"postpone\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            datePostpone \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return datePostpone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (command.equals(\"view\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            dateView \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateView;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // Allows the developer to know that a command other than deadline or event was"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // passed to the function!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateError;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 14,
      "TanYiXiang": 1,
      "-": 33,
      "fauzt": 6
    }
  },
  {
    "path": "src/main/java/parser/DeadlineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class DeadlineParser extends DescriptionParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public DeadlineParser(String userInput, String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.BY.getFlag();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d extractStartDate(taskFeatures);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, startDate, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractStartDate(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            startDate \u003d DateTimeExtractor.extractDateTime(dateTimeFromUser, command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 1,
      "fauzt": 38
    }
  },
  {
    "path": "src/main/java/parser/DescriptionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class DescriptionParser extends Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String checkType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String taskDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public DescriptionParser(String userInput, String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public abstract Command parse() throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void extract() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d removeCommandInput(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskDescription \u003d parseDetails(taskFeatures, checkType);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String parseDetails(String taskFeatures, String checkType) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (checkType \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return taskFeatures;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String description \u003d taskFeatures.split(checkType,2)[0].trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 32
    }
  },
  {
    "path": "src/main/java/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public enum Flag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    BY(\"/by\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    AT(\"/at\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    BETWEEN(\"/between\"), FOR(\"/for\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    IN(\"/in\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String flag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Flag(String flag) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "fauzt": 21
    }
  },
  {
    "path": "src/main/java/parser/IndexParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class IndexParser extends Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    int indexOfTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public IndexParser(String userInput, String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public abstract Command parse() throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void extract() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d removeCommandInput(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d parseIndex(taskFeatures);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int parseIndex(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            index \u003d Integer.parseInt(taskFeatures.split(\"\\\\s+\", 2)[0].trim()) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(\"Non-positive number for index detected.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    + \" Please input a positive number for task index.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 34
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String taskFeatures;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    String checkType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Parser(String userInput, String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public abstract Command parse() throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String removeCommandInput(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskFeatures;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            taskFeatures \u003d userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return taskFeatures;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 1,
      "TanYiXiang": 2,
      "-": 10,
      "fauzt": 14
    }
  },
  {
    "path": "src/main/java/parser/ParserFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.CommentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.PostponeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.PriorityCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.ViewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.IgnoreCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * The parser class is used to parse and make sense of the different queries the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * user inputs into the program and tag them for further processing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ParserFactory {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the user input of string type and returns the respective command type."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param userInput This string is provided by the user to ask \u0027Duke\u0027 to perform"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                  a particular action"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return Command After processing the user\u0027s input it returns the correct"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *         command for further processing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws DukeException The DukeException class has all the respective methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                       and messages!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String command \u003d userInput.split(\"\\\\s+\", 2)[0].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Integer indexOfTask;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime nullDate \u003d LocalDateTime.of(1, 1, 1, 1, 1, 1, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (userInput.contains(Flag.BETWEEN.getFlag())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return new TodoWithinPeriodParser(userInput, command).parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (userInput.contains(Flag.FOR.getFlag())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return new TodoWithDurationParser(userInput, command).parse();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TodoParser(userInput, command).parse();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new DeadlineParser(userInput, command).parse();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return parseEvent(command, userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String findKeyWord \u003d userInput.split(command, 2)[1].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (findKeyWord.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new FindCommand(findKeyWord);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String[] editCommandParts \u003d userInput.split(\" \", 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(editCommandParts[1]) - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            description \u003d editCommandParts[2];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new EditCommand(indexOfTask, description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            description \u003d userInput.split(command, 2)[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(description) - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new DeleteCommand(indexOfTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String[] priorityCommandParts \u003d userInput.split(\" \", 3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String priorityLevel \u003d priorityCommandParts[2];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(priorityCommandParts[1]) - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (priorityLevel.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.emptyPriorityLevel());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new PriorityCommand(indexOfTask, priorityLevel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            description \u003d userInput.split(command, 2)[1].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (description.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            indexOfTask \u003d Integer.parseInt(description) - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new DoneCommand(indexOfTask);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"remind\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new RemindParser(userInput, command).parse();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"postpone\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String dateTimeString;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            LocalDateTime newStartDate;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            LocalDateTime fromDate;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            LocalDateTime toDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] postponeCommandParts \u003d userInput.split(\" \", 3);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                indexOfTask \u003d Integer.parseInt(postponeCommandParts[1]) - 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                throw new DukeException(DukeException.invalidIndex());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                dateTimeString \u003d postponeCommandParts[2].trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                if (dateTimeString.contains(\"-\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    String obtainStartDate \u003d dateTimeString.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    fromDate \u003d DateTimeExtractor.extractDateTime(obtainStartDate, command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    String obtainEndDate \u003d dateTimeString.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    toDate \u003d DateTimeExtractor.extractDateTime(obtainEndDate, command);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    return new PostponeCommand(indexOfTask, fromDate, toDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    newStartDate \u003d DateTimeExtractor.extractDateTime(dateTimeString, command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                    return new PostponeCommand(indexOfTask, newStartDate);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String userScheduleDate \u003d userInput.split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ViewCommand(userScheduleDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            long duration;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                duration \u003d Long.parseLong(userInput.split(command, 2)[1].trim());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new SearchCommand(duration);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"ignore\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return parseIgnore(userInput, true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"unignore\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return parseIgnore(userInput, false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case \"comment\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                String rawIndex \u003d userInput.split(\"\\\\s+\", 3)[1].trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                index \u003d Integer.parseInt(rawIndex) - 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.invalidIndex());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.invalidIndex());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String comment \u003d \"\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                comment \u003d userInput.split(\"\\\\s+\", 3)[2].trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new CommentCommand(index, comment);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            // Empty string or unknown command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.printUnknownInput();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Ui.userOutputForUI \u003d \"Wrong Command\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static String extractDescription(String command, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command parseEvent(String command, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String taskFeatures;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String checkType \u003d \"/at\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        taskFeatures \u003d extractDescription(command, userInput);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String taskDescription \u003d taskFeatures.split(checkType, 2)[0].trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyUserDescription());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime fromDate;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime toDate;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String obtainStartDate \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            fromDate \u003d DateTimeExtractor.extractDateTime(obtainStartDate, command);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String obtainEndDate \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            toDate \u003d DateTimeExtractor.extractDateTime(obtainEndDate, command);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert toDate !\u003d null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert fromDate !\u003d null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, fromDate, toDate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command parseIgnore(String userInput, Boolean isIgnore) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int index \u003d Integer.parseInt(userInput.split(\"\\\\s+\", 2)[1].trim()) - 1;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new IgnoreCommand(index, isIgnore);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 20,
      "fauzt": 207
    }
  },
  {
    "path": "src/main/java/parser/RemindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class RemindParser extends IndexParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public RemindParser(String userInput, String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.IN.getFlag();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days \u003d extractDays(taskFeatures);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new RemindCommand(indexOfTask, days);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDays(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String daysString \u003d substring.split(\"\\\\s+\", 2)[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            days \u003d Integer.parseInt(daysString);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.unknownUserCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 34
    }
  },
  {
    "path": "src/main/java/parser/TodoParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoParser extends DescriptionParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoParser(String userInput, String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the user\u0027s input into information to be passed into the Command class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return The command to add the task with inputted description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws DukeException if user\u0027s input is in an invalid format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, null, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 23
    }
  },
  {
    "path": "src/main/java/parser/TodoWithDurationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoWithDurationParser extends TodoParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithDurationParser(String userInput, String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.FOR.getFlag();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int duration \u003d extractDuration(taskFeatures);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, duration);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDuration(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            duration \u003d Integer.parseInt(substring.split(\"\\\\s+\", 2)[0].trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(\"Invalid duration format. Duration must be a number\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 32
    }
  },
  {
    "path": "src/main/java/parser/TodoWithinPeriodParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoWithinPeriodParser extends TodoParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithinPeriodParser(String userInput, String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.BETWEEN.getFlag();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d extractStartDate(taskFeatures);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime endDate \u003d extractEndDate(taskFeatures);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, startDate, endDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractStartDate(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String from;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            from \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            startDate \u003d DateTimeExtractor.extractDateTime(from, command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractEndDate(String taskFeatures) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String to;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            to \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.emptyDateOrTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime endDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            endDate \u003d DateTimeExtractor.extractDateTime(to, command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 59
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Storage class is utilised to do both the reading and writing to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * persistent storage using the two primary methods saveFile and loadFile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This Storage constructor is used to function is used to assign the different"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * parameters required by the Storage methods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file This parameter holds the file to write to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This saveFile method is used repeatedly throughout the other classes to save"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates made to the TaskList to the persistent storage to ensure the user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * does not loose data due to sudden termination of the program."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param listOfTasks This parameter holds the updated TaskList of the user and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    used to save the updated TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException This exception is thrown if there is not file at the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       given location to save to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e listOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            objectOutputStream.writeObject(listOfTasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            objectOutputStream.close(); // always close"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fileOutputStream.close(); // always close"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unableToWriteFile());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This saveFile method is used repeatedly throughout the other classes to save"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updates made to the TaskList to the persistent storage to ensure the user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * does not loose data due to sudden termination of the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file This parameter is passed as to be able to write to the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws DukeException This exception is thrown for any unexpected issues such"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       as no file in location, unable to read the file or a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                       class in not found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile(File file) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            listOfTasks \u003d (ArrayList\u003cTask\u003e) objectInputStream.readObject();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            fileInputStream.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            objectInputStream.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return listOfTasks;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.fileDoesNotExist());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.unableToReadFile());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.classDoesNotExist());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.classDoesNotExist());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 38,
      "-": 47,
      "fauzt": 1
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * deadline type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Deadline extends Task implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Constructor for deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description Description of the deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param atDate      Due date for deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Deadline(String description, LocalDateTime atDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d atDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setReminder(3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString \u003d \"(by: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            dateString \u003d dateString + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return message.concat(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean checkForClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isEqual(taskToCheck.startDate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (taskToCheck.startDate.isBefore(this.startDate) \u0026\u0026 taskToCheck.endDate.isAfter(this.startDate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 6,
      "TanYiXiang": 6,
      "-": 20,
      "fauzt": 11
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class Event extends Task implements Serializable, Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * creates a new Event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param startDate   end time of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param endDate     start time of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Event(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setReminder(3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Custom comparator for sorting."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return this.startDate.compareTo(o.startDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[E]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString \u003d \"(at: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \"-\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            dateString \u003d dateString + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return message.concat(dateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    boolean checkForClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isBefore(taskToCheck.startDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return this.startDate.isBefore(taskToCheck.endDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 14,
      "TanYiXiang": 4,
      "-": 26,
      "fauzt": 13
    }
  },
  {
    "path": "src/main/java/task/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * This enumeration defines the priority levels supported by Chronologer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function obtains a Priority Constant based on the input string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param priorityString String corresponding to priority level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Correct priority level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static Priority getPriorityLevel(String priorityString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        switch (priorityString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.INVALID;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 34
    }
  },
  {
    "path": "src/main/java/task/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "class Reminder implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime reminderDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Reminder(int days, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminderDate \u003d startDate.minusDays(days);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Reminder(int days) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminderDate \u003d LocalDateTime.now().plusDays(days);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    boolean checkReminderTrigger() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return LocalDateTime.now().isAfter(reminderDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 20
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Task class is extended by the other tasks and serves as a template for"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * all tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Priority priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Reminder reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String comment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    protected boolean isIgnored;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public boolean isPrioritizable \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public LocalDateTime endDate \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public LocalDateTime startDate \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime createdDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Period eventPeriod;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Constructor for task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.isIgnored \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.createdDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if any task reminders are triggered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return if triggered"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public boolean checkReminderTrigger() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isIgnored) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return reminder.checkReminderTrigger();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Returns a priority symbol to be printed as output."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Unicode that represent priority level."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getPriorityIcon() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (!isPrioritizable) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return \"[\\u26A0]\"; // Return warning sign symbol"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (priority \u003d\u003d Priority.HIGH) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return \"[\\u2605\\u2605\\u2605]\"; // Return triple star symbols"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (priority \u003d\u003d Priority.MEDIUM) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return \"[\\u2605\\u2605]\";// Return double star symbol"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return \"[\\u2605]\";// Return single star symbol"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This getStatusIcon function returns the tick or cross symbols to be printed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * as output."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return This function returns either a tick or a cross."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // Return tick or cross symbol"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new Reminder(days, startDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void markAsIgnorable() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.isIgnored \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isPrioritizable \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void markAsUnignorable() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isIgnored \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isPrioritizable \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * converts the task to a string."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d \"[\" + getPriorityIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    abstract boolean checkForClash(Task taskToCheck);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 13,
      "TanYiXiang": 62,
      "-": 43,
      "fauzt": 11
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The TaskList class handles all operations performed on the TaskList as well"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * as stores the TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * This custom comparator allows the sorting of both deadlines and events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Comparator\u003cTask\u003e DateComparator \u003d (firstDate, secondDate) -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (firstDate.startDate.isBefore(secondDate.startDate)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the use to add a particular task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the use to delete a particular task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task delete(int indexOfTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfTasks.remove(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to find tasks with a particular keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyWord this string contains the keyword the user is searching for."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String findMatch \u003d listOfTasks.get(i).toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (findMatch.contains(keyWord)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                holdFoundTasks.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return holdFoundTasks;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Performs a check as to determine if the task being added has a clash with"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * another task already scheduled."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskToCheck the task trying to be added by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean true if there is a clash, false if there is not clash."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (task.checkForClash(taskToCheck)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to mark a particular task as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be marked as"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task markAsDone(int indexOfTask) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Marks a task to be ignored and have reminders to stop showing up for the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param index The index of the task to be marked"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The marked task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task markAsIgnorable(int index) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d listOfTasks.get(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        task.markAsIgnorable();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Marks a task to no longer be ignored and have reminders to show up again."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param index The index of the task to be marked"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The marked task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task markAsUnignorable(int index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d listOfTasks.get(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        task.markAsUnignorable();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return sortDateList the sorted schedule of all the tasks on a particular date."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e schedule(String dayToFind) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e sortedDateList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (!(listOfTasks.get(i).getClass() \u003d\u003d task.Todo.class)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                \u0026\u0026 listOfTasks.get(i).toString().contains(dayToFind)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                sortedDateList.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.sort(sortedDateList, DateComparator);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return sortedDateList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function allows the user to edit the task description."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask    Location of task in the list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newDescription The new task description to be updated"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return taskToBeEdited The task that had its description edited"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task editTaskDescription(int indexOfTask, String newDescription) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        taskToBeEdited.description \u003d newDescription;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Function to allow user to edit/add comments to existing tasks."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask Index of task in list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param comment     commnent to be added/edited"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return taskToBeEdited The task that has its comment edited/added"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Task editTaskComment(int indexOfTask, String comment) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskToBeEdited.comment \u003d comment;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 35,
      "TanYiXiang": 36,
      "-": 102,
      "fauzt": 3
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of to-do"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This override of the toString function of the task class etches the different"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * portions of the user input into a single string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new Reminder(days);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    boolean checkForClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 3,
      "hanskw4267": 11,
      "-": 24,
      "fauzt": 6
    }
  },
  {
    "path": "src/main/java/task/TodoWithDuration.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class TodoWithDuration extends Todo implements Serializable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public int duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithDuration(String description, int duration) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description + \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String timeDetails \u003d \"(for \" + duration + \" hours)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            timeDetails \u003d timeDetails + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return message.concat(timeDetails);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 3,
      "TanYiXiang": 6,
      "fauzt": 13
    }
  },
  {
    "path": "src/main/java/task/TodoWithinPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class TodoWithinPeriod extends Todo implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Creates a ToDo task with a specific duration and timing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param startDate   start time of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param endDate     end time of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithinPeriod(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString \u003d \" (from: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\" + \" (to: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            dateString \u003d dateString + \"  Note to self: \" + comment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return message.concat(dateString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 3,
      "TanYiXiang": 5,
      "fauzt": 25
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The Ui class is used to handle all inputs and outputs used to interact with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the end-user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // All the different definitions including the string definitions are here."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String userOutputForUI;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String userOutputDash \u003d \"_______________________________\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String goodbye \u003d \"_______________________________\\n\" + \"Bye. Hope to see you again soon!\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        + \"_______________________________\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String greeting \u003d \"_______________________________\\n\" + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"What can I do for you?\\n\" + \"_______________________________\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Prints Duke logo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints a \u0027dashed\u0027 line."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void printDash() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints greeting."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGreeting() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints the reminders triggered."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void printReminder(TaskList tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"You have these upcoming tasks:\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (t.checkReminderTrigger()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(t.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printGoodbye() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(goodbye);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printOutput function is used to print the output in the current Ui"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * format. Moreover it also handles the refresh of the userOutputForUT."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userOutput This string will be used to print the message between to"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                   data."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printOutput(String userOutput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Ui.userOutputForUI \u003d userOutput + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This readInput function is used to constantly take in the userInput by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * checking if there is a line to be read. But if there is no line to be read"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * then the program terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This function will return a String which contains the user input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readInput() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            userInput \u003d \"bye\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printMessage function is called to print an exception message to the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param message This message contains the message generated by the exception"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                that was caught."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void printMessage(String message) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This printManual function is called to aid the user in the usage of \u0027Duke\u0027 by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * guiding them on how to input their task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printManual() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(userOutputDash);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hi, this is Duke!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"I am able to let you add tasks of three types! todo, event and deadline\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"1. To add a todo task, key in todo\u003cspace\u003eyour task description eg. todo borrow books\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"2. To add a deadline, key in deadline\u003cspace\u003eyour deadline description\u003cspace\u003e/by\u003cspace\u003ethe \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"date eg. return books/by dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        System.out.println(\"3. To add a event, key in event\u003cspace\u003eyour event description\u003cspace\u003e/at\u003cspace\u003ethe day or \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"date and the time eg. Project meeting /at dd/MM/yyyy HHmm-HHmm\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"4. To list out all your tasks simply enter list\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"5. To mark a task as complete just enter done\u003cspace\u003ethe index of the task as listed\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"6. To find a task from the task list enter find\u003cspace\u003eany word in the task\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"7. To delete a task just enter delete\u003cspace\u003ethe index of the task as listed\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"8. To exit, enter bye\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void printUnknownInput() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. If you would like to know how to \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            + \"use Duke, Enter duke-manual\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 13,
      "hanskw4267": 32,
      "-": 91,
      "fauzt": 3
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" style\u003d\"-fx-text-fill: white;\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c!-- fitHeight is the height of the dialogBox --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"200.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"300.0\" right\u003d\"300.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"456.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"724.0\" style\u003d\"-fx-background-color: #000000; -fx-text-fill: #01f222;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"724.0\" layoutY\u003d\"456.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"458.0\" prefWidth\u003d\"800.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"456.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-background-color: #2d3337;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cVBox fx:id\u003d\"todayTaskContainer\" layoutY\u003d\"1.0\" layoutX\u003d\"586.0\" prefHeight\u003d\"456.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #4a5b71;\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 20
    }
  },
  {
    "path": "src/main/resources/view/TodayTaskBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cfx:root maxHeight\u003d\"458.0\" maxWidth\u003d\"200.0\" prefWidth\u003d\"200.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"tasksForTheDay\" prefWidth\u003d\"200.0\" text\u003d\"Label\" wrapText\u003d\"true\" style\u003d\"-fx-border-color: #00296d; -fx-text-fill: white\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c!--\u003cInsets\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 14
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This class implements the unit testing code for the AddCommand Test class and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * particularly tests IsClash()."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testisClash() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task2 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(testisClash.isClash(task2), true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 7,
      "-": 20,
      "fauzt": 1
    }
  },
  {
    "path": "src/test/java/CommentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import command.CommentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class CommentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid comment command creation\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidCommentCommandCreation() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        CommentCommand actualCmd \u003d new CommentCommand(1, \"this is a test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        int index \u003d actualCmd.getIndexOfTask();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String comment \u003d actualCmd.getComment();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(1, index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(\"this is a test\", comment);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid comment input\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"comment 1 testing\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid comment input\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"comment\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 40,
      "fauzt": 3
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime fromDate \u003d LocalDateTime.of(2001, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    Deadline deadline \u003d new Deadline(\"test\", fromDate);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDeadlineCreation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String title \u003d deadline.description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime date \u003d deadline.startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(title, \"test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(date, fromDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadline.toString(), \"[\\u2605\\u2605][D][\\u2718] test(by: 01/01/2001 0100)\");//Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void testDeadlinePostponement() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime newFromDate \u003d LocalDateTime.of(2003, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        deadline.setStartDate(newFromDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadline.startDate, newFromDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 12,
      "fauzt": 26
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void testEdit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline testTask \u003d new Deadline(\"Minecraft\", testDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test.add(testTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList testList \u003d new TaskList(test);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testList.editTaskDescription(0, \"Roblox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test \u003d testList.getTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(test.get(0).description, \"Roblox\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 24
    }
  },
  {
    "path": "src/test/java/ParserFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ParserFactoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime startDate \u003d LocalDateTime.of(2001,1,1,1,0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime endDate \u003d LocalDateTime.of(2001,1,1,13,0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command event \u003d new AddCommand(\"event\", \"test\", startDate, endDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command deadline \u003d new AddCommand(\"deadline\", \"test\", startDate, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command todo \u003d new AddCommand(\"todo\", \"test\", null, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Field[] getAddCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields \u003d new Field[4];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"command\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"taskFeatures\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2] \u003d command.getClass().getDeclaredField(\"formattedStartDate\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3] \u003d command.getClass().getDeclaredField(\"formattedEndDate\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2].setAccessible(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3].setAccessible(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void assertEqualsAddCommand(Field[] test, Field[] expected, Command testCommand, Command expectedCommand)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throws IllegalAccessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[2].get(testCommand), expected[2].get(expectedCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[3].get(testCommand), expected[3].get(expectedCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testToDoParsing() throws DukeException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] todoFields \u003d getAddCommandFields(todo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command todoTest \u003d ParserFactory.parse(\"todo test\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] toDoTestFields \u003d getAddCommandFields(todoTest);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(toDoTestFields, todoFields, todoTest, todo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDeadlineParsing() throws DukeException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] deadlineFields \u003d getAddCommandFields(deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command deadlineTest \u003d ParserFactory.parse(\"deadline test /by 01/01/2001 0100\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] deadlineTestFields \u003d getAddCommandFields(deadlineTest);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(deadlineTestFields, deadlineFields, deadlineTest, deadline);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testEventParsing() throws DukeException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] eventFields \u003d getAddCommandFields(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command eventTest \u003d ParserFactory.parse(\"event test /at 01/01/2001 0100 - 01/01/2001 1300\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] eventTestFields \u003d getAddCommandFields(eventTest);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(eventTestFields, eventFields, eventTest, event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testExceptionForDeadline() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DateTimeParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test /by\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline /by 01/01/2001 0100\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test 01/01/2001 0100\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 84
    }
  },
  {
    "path": "src/test/java/RemindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import command.RemindCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Setups the necessary base to carry out the test operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/ArrayList\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new RemindCommand(1, 5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo filler \u003d new Todo(\"1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(filler);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testReminder() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Deadline(\"test\", LocalDateTime.of(2019, 8, 1, 12, 0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(testTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder.execute(tasks, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertNotNull(testTask.reminder);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testTask.checkReminderTrigger());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testReminderNotTriggered() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Event(\"test\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.of(3019, 8, 1, 12, 0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.of(3019, 8, 2, 12, 0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(testTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder.execute(tasks, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertNotNull(testTask.reminder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertFalse(testTask.checkReminderTrigger());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"remind\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse((\"remind 0 in 3 days\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new RemindCommand(100, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            test.execute(tasks, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void teardownSetup() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "fauzt": 57
    }
  },
  {
    "path": "src/test/java/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import command.SearchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid search Command creation\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidSearchCommandCreation() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        SearchCommand actualCmd \u003d new SearchCommand((long) 3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration \u003d actualCmd.getDurationToFind();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals((long) 3, duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid search input\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"search 3\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid search input\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"search h\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 21,
      "-": 18,
      "fauzt": 3
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import parser.ParserFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import task.TodoWithinPeriod;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the To-do class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Todo todo \u003d new Todo(\"testing todo\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testTodoCreation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String title \u003d todo.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(title, \"testing todo\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(todo.toString(), \"[\\u2605\\u2605][T][\\u2718] testing todo\"); //Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"todo\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testTodoWithinPeriod() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime from;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime to;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            from \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 0800\", \"todo\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            to \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 2200\", \"todo\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Todo newTodo \u003d new TodoWithinPeriod(\"testTodo\", from, to);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Assertions.assertEquals(newTodo.startDate, from);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new DukeException(DukeException.wrongDateOrTime());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 3,
      "TanYiXiang": 1,
      "-": 35,
      "fauzt": 10
    }
  },
  {
    "path": "src/test/java/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the ViewCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2019, 9, 23, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e testIfNull \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testIfNull \u003d testisClash.schedule(\"23/09/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue((testIfNull.size() \u003e 0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 6,
      "-": 22,
      "fauzt": 1
    }
  },
  {
    "path": "tutorials/DialogBox.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 59
    }
  },
  {
    "path": "tutorials/Main.java",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 30
    }
  }
]
