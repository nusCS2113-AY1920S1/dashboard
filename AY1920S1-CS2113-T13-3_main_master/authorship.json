[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    compile group: \u0027org.mnode.ical4j\u0027, name: \u0027ical4j\u0027, version: \u00273.0.11\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    compile \u0027org.slf4j:slf4j-simple:1.7.21\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.6\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    archiveBaseName \u003d \"Chronologer\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    archiveVersion \u003d \"v1.3.4\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    mainClassName \u003d \"chronologer.ChronologerLauncher\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 19,
      "TanYiXiang": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/chronologer/ChronologerLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ChronologerLauncher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Application.launch(chronologer.ChronologerMain.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 12
    }
  },
  {
    "path": "src/main/java/chronologer/ChronologerMain.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.apache.commons.lang3.SerializationUtils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Main class of the application which holds the UI as well as instantiates"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * storage components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ChronologerMain extends Application implements Serializable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String filePath \u003d System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/ArrayList\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String version1Path \u003d System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/Version1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String version2Path \u003d System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/Version2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String version3Path \u003d System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/Version3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public File version1 \u003d new File(version1Path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public File version2 \u003d new File(version2Path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public File version3 \u003d new File(version3Path);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ChronologerStateList history;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs the ChronologerMain object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ChronologerMain() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ui \u003d new UiManager(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            this.storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            this.history \u003d new ChronologerStateList(version1, version2, version3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            this.tasks \u003d storage.loadFile(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            history.addState(SerializationUtils.clone(tasks.getTasks()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (ChronologerException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            this.tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            history.addState(SerializationUtils.clone(tasks.getTasks()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 59,
      "TanYiXiang": 1
    }
  },
  {
    "path": "src/main/java/chronologer/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a task to TaskList if the user input is correctly parsable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected LocalDateTime formattedStartDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected LocalDateTime formattedEndDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected int duration \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String modCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding a task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param command         Holds the command type."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskDescription Holds the description of the task provided by the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                        user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param startDate       Holds the start date of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param endDate         Holds the end date of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param modCode         Holds the module code of the task, if any"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public AddCommand(String command, String taskDescription, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String modCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.formattedStartDate \u003d startDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.formattedEndDate \u003d endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding a task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param command         Holds the command type."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskDescription Holds the description of the task provided by the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                        user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param duration        Holds the duration period the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public AddCommand(String command, String taskDescription, Integer duration) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Initializes the different parameters when adding a task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command         Holds the command type."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskDescription Holds the description of the task provided by the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                        user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param startDate       Holds the start date of the task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param endDate         Holds the end date of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public AddCommand(String command, String taskDescription, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.formattedStartDate \u003d startDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.formattedEndDate \u003d endDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Adds the task to the TaskList and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (formattedStartDate !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                task \u003d new Todo(taskDescription, formattedStartDate, formattedEndDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else if (duration !\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                task \u003d new Todo(taskDescription, duration);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                task \u003d new Todo(taskDescription);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            task \u003d new Deadline(taskDescription, formattedStartDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                throw new ChronologerException(ChronologerException.taskClash());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            task \u003d new Event(taskDescription, formattedStartDate, formattedEndDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new ChronologerException(ChronologerException.taskClash());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        case \"assignment\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            task \u003d new Deadline(taskDescription, formattedStartDate, modCode);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                throw new ChronologerException(ChronologerException.taskClash());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        case \"exam\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            task \u003d new Event(taskDescription, formattedStartDate, formattedEndDate, modCode);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (tasks.isClash(task)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                throw new ChronologerException(ChronologerException.taskClash());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.unknownUserCommand());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState(tasks.getTasks());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(\"Got it! I\u0027ve added this task:\" + \"\\n  \" + task.toString() + \"\\nNow you have \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 65,
      "hanskw4267": 53,
      "TanYiXiang": 1,
      "fauzt": 15
    }
  },
  {
    "path": "src/main/java/chronologer/command/AddRecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Adds weekly recurring tasks to taskslist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class AddRecurringCommand extends AddCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected DayOfWeek dayToAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Contructs a new \"add recurring command\"."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command         command-type of input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param taskDescription description of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param startDate       start date of task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param endDate         end date of task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param modCode         module code of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public AddRecurringCommand(String command, String taskDescription, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String modCode, DayOfWeek day) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(command, taskDescription, startDate, endDate, modCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.dayToAdd \u003d day;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Adds tasks till end of semester at specified timeslots."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime timeNow \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        while (this.formattedStartDate.isAfter(timeNow)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (formattedStartDate.getDayOfWeek().equals(this.dayToAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                task \u003d new Event(taskDescription, formattedStartDate, formattedEndDate, modCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                this.formattedEndDate \u003d this.formattedEndDate.minusWeeks(1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                this.formattedStartDate \u003d this.formattedStartDate.minusWeeks(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                this.formattedEndDate \u003d this.formattedEndDate.minusDays(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                this.formattedStartDate \u003d this.formattedStartDate.minusDays(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        history.addState(tasks.getTasks());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        UiMessageHandler.outputMessage("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                \"Got it! I\u0027ve added this task\" + \"\\nNow you have \" + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 62
    }
  },
  {
    "path": "src/main/java/chronologer/command/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String CLEAR_MESSAGE \u003d \"All tasks cleared from schedule.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cTask\u003e emptyTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.updateListOfTasks(emptyTasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        UiMessageHandler.outputMessage(CLEAR_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 24
    }
  },
  {
    "path": "src/main/java/chronologer/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.MyLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Ensures that all the classes of command type have implementations of the method execute."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String LOG_NAME \u003d \"CommandErrors\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    MyLogger logger \u003d new MyLogger(this.getClass().getName(), LOG_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Checks if the index of a Task provided by the user is within the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask        Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param currentSizeOfTasks Holds the integer value of the current list size."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public boolean isIndexValid(Integer indexOfTask, Integer currentSizeOfTasks) throws ChronologerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e (currentSizeOfTasks - 1)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(ChronologerException.invalidIndex());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidIndex());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Checks if the index of a Task provided by the user is within the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks Holds the list that need to be formatted for UI."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void outputRequiredList(ArrayList\u003cTask\u003e tasks, String title) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String requiredList \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            requiredList +\u003d i++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(title + \"\\n\" + requiredList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Contracts all Command type classes to have their own respective execute"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * methods."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ChronologerException Throws the exception according to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                              user-defined list: DukeException."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage, ChronologerStateList history)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        throws ChronologerException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 56,
      "hanskw4267": 7
    }
  },
  {
    "path": "src/main/java/chronologer/command/CommentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Adds a comment to an existing task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans Kurnia"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class CommentCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private Integer indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private String comment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Initializes the different parameters when commenting on a task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param comment     Holds the comment for the task as given by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public CommentCommand(Integer indexOfTask, String comment) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Adds the comment to the task and saves the updated TaskList it to persistent"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskComment(indexOfTask, comment);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            UiMessageHandler.outputMessage(\"Noted. Your comment has been added:\" + \"\\n \" + taskToEdit.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Integer getIndexOfTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return indexOfTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "hanskw4267": 51
    }
  },
  {
    "path": "src/main/java/chronologer/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to delete a particular task from their task list based on index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Integer indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public DeleteCommand(Integer indexOfTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Removes the task from the TaskList and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Task task \u003d tasks.delete(indexOfTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            history.addState(tasks.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Noted. I\u0027ve removed this task:\" + \"\\n \" + task.toString()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + \"\\nNow you have \" + tasks.getSize() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 38,
      "hanskw4267": 3
    }
  },
  {
    "path": "src/main/java/chronologer/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Marks a task as complete or done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public DoneCommand(int indexOfTaskIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTaskIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Marks a task as complete and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Task task \u003d tasks.markAsDone(indexOfTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Nice! I\u0027ve marked this task as done: \" + task.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 38
    }
  },
  {
    "path": "src/main/java/chronologer/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Edits the user\u0027s task description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String newDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public EditCommand(int indexOfTask, String newDescription) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.newDescription \u003d newDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Edits the description of a task and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if ((isIndexValid(indexOfTask, tasks.getSize()))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Task taskToEdit \u003d tasks.editTaskDescription(indexOfTask, newDescription);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Noted. Your new task description is:\" + \"\\n \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + taskToEdit.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 23,
      "TanYiXiang": 20
    }
  },
  {
    "path": "src/main/java/chronologer/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Terminates the program after saving the file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        // This is the proper way to exit the JVM."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Runtime.getRuntime().exit(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 32,
      "TanYiXiang": 1
    }
  },
  {
    "path": "src/main/java/chronologer/command/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.storage.CalendarOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.component.VEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.property.CalScale;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.property.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.property.ProdId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.model.property.Version;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.util.RandomUidGenerator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import net.fortuna.ical4j.util.UidGenerator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.validate.ValidationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Processes and export the timeline as an ics file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.8"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String BLANK \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO_PERIOD \u003d \"TODO PERIOD\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String PROD_ID \u003d \"-//Chronologer//iCal4j 1.1//EN\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasDeadlineFlag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasEventFlag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasTodoFlag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Initializes the different parameters for the export command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param fileName        Name of the file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param hasDeadlineFlag Indication to extract deadline tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param hasEventFlag    Indication to extract event tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param hasTodoFlag     Indication to extract todo with period tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public ExportCommand(String fileName, Boolean hasDeadlineFlag, Boolean hasEventFlag, Boolean hasTodoFlag) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.hasDeadlineFlag \u003d hasDeadlineFlag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.hasEventFlag \u003d hasEventFlag;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.hasTodoFlag \u003d hasTodoFlag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert the task list to a calendar file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the task list is empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ValidationException  If the calendar is empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ValidationException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Calendar calendar \u003d initializeCalendar();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        checkEmptyList(taskList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (hasDeadlineFlag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractDeadline(taskList, calendar);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (hasEventFlag) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractEvent(taskList, calendar);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (hasTodoFlag) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractTodoPeriod(taskList, calendar);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (hasNoFlags()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractDeadline(taskList, calendar);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractEvent(taskList, calendar);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractTodoPeriod(taskList, calendar);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isCalendarValid(calendar)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            CalendarOutput.outputCalendar(fileName.trim(), calendar);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyCalendar());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Initializes a Calendar object with default properties."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return An initial calendar to be built upon later."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private Calendar initializeCalendar() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        calendar.getProperties().add(new ProdId(PROD_ID));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        calendar.getProperties().add(Version.VERSION_2_0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        calendar.getProperties().add(CalScale.GREGORIAN);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Iterates through the task list and convert deadline tasks to calendar components."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskList The list of tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param calendar The calendar to add the components to."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void extractDeadline(ArrayList\u003cTask\u003e taskList, Calendar calendar) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isDeadline(task)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                VEvent deadline \u003d convertDeadline(task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                calendar.getComponents().add(deadline);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Iterates through the task list and convert event tasks to calendar components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskList The list of tasks"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param calendar The calendar to add the components to."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void extractEvent(ArrayList\u003cTask\u003e taskList, Calendar calendar) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isEvent(task)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                VEvent event \u003d convertEventOrTodoPeriod(task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                calendar.getComponents().add(event);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Iterates through the task list and convert todo with period tasks to calendar components."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskList The list of tasks"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param calendar The calendar to add the components to."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void extractTodoPeriod(ArrayList\u003cTask\u003e taskList, Calendar calendar) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isTodoPeriod(task)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                VEvent todoPeriod \u003d convertEventOrTodoPeriod(task);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                calendar.getComponents().add(todoPeriod);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert localDateTime date to java Calendar format."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param date The date to be converted"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return A Java Calendar containing the converted date."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private java.util.Calendar convertToCalendar(LocalDateTime date) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        java.util.Calendar utilCalendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.YEAR, date.getYear());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.MONTH, date.getMonthValue() - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.DAY_OF_MONTH, date.getDayOfMonth());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.HOUR_OF_DAY, date.getHour());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.MINUTE, date.getMinute());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        utilCalendar.set(java.util.Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return utilCalendar;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert deadline tasks into properties supported by ics files."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param deadlineTask The deadline to be converted."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return A VEvent component representing the converted deadline."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private VEvent convertDeadline(Task deadlineTask) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar deadlineCalendar \u003d convertToCalendar(deadlineTask.getStartDate());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DateTime deadlineDate \u003d new DateTime(deadlineCalendar.getTime());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DateTime currentDate \u003d getCurrentDate();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String title \u003d createTitle(deadlineTask);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        VEvent deadline \u003d new VEvent(currentDate, deadlineDate, title);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        createDescription(deadlineTask, deadline);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        createLocation(deadlineTask, deadline);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        setPriority(deadlineTask, deadline);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        UidGenerator generator \u003d new RandomUidGenerator();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        deadline.getProperties().add(generator.generateUid());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert event or todo with period tasks into properties supported by ics files."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param eventTask The event or todo to be converted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return A VEvent component representing the converted event or todo."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private VEvent convertEventOrTodoPeriod(Task eventTask) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar eventStartCalendar \u003d convertToCalendar(eventTask.getStartDate());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar eventEndCalendar \u003d convertToCalendar(eventTask.getEndDate());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DateTime startEventDate \u003d new DateTime(eventStartCalendar.getTime());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DateTime endEventDate \u003d new DateTime(eventEndCalendar.getTime());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String title \u003d createTitle(eventTask);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        VEvent event \u003d new VEvent(startEventDate, endEventDate, title);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        createDescription(eventTask, event);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        createLocation(eventTask, event);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        setPriority(eventTask, event);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        UidGenerator generator \u003d new RandomUidGenerator();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.getProperties().add(generator.generateUid());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Obtain the current system time date."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return DateTime object representing the current system time."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private DateTime getCurrentDate() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime currentDate \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar currentCalendar \u003d convertToCalendar(currentDate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new DateTime(currentCalendar.getTime());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert task description to title string to be used in the ics file."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param task The task to have its description converted."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The newly created title of the task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String createTitle(Task task) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (BLANK.equals(task.getModCode())) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return task.getDescription();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return task.getModCode() + \": \" + task.getDescription();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert the task comments if any to ics description component."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param task  The task to have its comments converted."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param event The VEvent component to add a description to."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void createDescription(Task task, VEvent event) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (!BLANK.equals(task.getComment())) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            event.getProperties().add(new Description(task.getComment()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert the task location if any to ics location component."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param task  The task to have its location converted."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param event The VEvent component to add a location to."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void createLocation(Task task, VEvent event) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (!BLANK.equals(task.getLocation())) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            event.getProperties().add(new Location(task.getLocation()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert the task location if any to ics priority component."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param task  The task to have its priority converted."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param event The VEvent component to add a priority to."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void setPriority(Task task, VEvent event) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (task.getPriority() \u003d\u003d Priority.HIGH) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            event.getProperties().add(net.fortuna.ical4j.model.property.Priority.HIGH);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (task.getPriority() \u003d\u003d Priority.MEDIUM) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            event.getProperties().add(net.fortuna.ical4j.model.property.Priority.MEDIUM);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            event.getProperties().add(net.fortuna.ical4j.model.property.Priority.LOW);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Checks whether the task list is empty."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskList The task list to be checked"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the task list is empty and stop the export command."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void checkEmptyList(ArrayList\u003cTask\u003e taskList) throws ChronologerException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyExport());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the Calendar is valid."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param calendar The calendar to be validated."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return False if the calendar is not valid eg: Empty etc."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isCalendarValid(Calendar calendar) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            calendar.validate(true);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ValidationException e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the export command has no flags enabled which indicates an export all command."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if there\u0027s no flags enabled."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasNoFlags() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (!hasDeadlineFlag \u0026\u0026 !hasEventFlag \u0026\u0026 !hasTodoFlag);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the task is of deadline type."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the task is a deadline."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isDeadline(Task task) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (DEADLINE.equals(task.getType()));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the task is of event type."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the task is an event."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEvent(Task task) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (EVENT.equals(task.getType()));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the task is of todo period type."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the task is a todo period."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isTodoPeriod(Task task) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (TODO_PERIOD.equals(task.getType()));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 41,
      "TanYiXiang": 300
    }
  },
  {
    "path": "src/main/java/chronologer/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Finds all tasks that contain a particular keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String PRESENT_LIST \u003d \"Here are the matching task(s) in your list:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Finds all the tasks with a particular keyword and passes it to UIMessageHandler which prints to user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d tasks.find(keyWord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (holdFoundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(EMPTY_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            outputRequiredList(holdFoundTasks,PRESENT_LIST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 39,
      "hanskw4267": 3,
      "TanYiXiang": 1
    }
  },
  {
    "path": "src/main/java/chronologer/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Provides the user with a list of commands they can utilise."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Passes the user help manual to the GUI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(UiMessageHandler.printHelp());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 27
    }
  },
  {
    "path": "src/main/java/chronologer/command/IgnoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Marks a task as ignorable or not ignorable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Fauzan and Tan Yi Xiang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class IgnoreCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isIgnore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String IGNORED \u003d \"Noted. This task has been marked as ignored:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String UNIGNORED \u003d \"Noted. This task is no longer ignored:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding the location of a task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param isIgnore Holds a boolean of whether a task isIgnorable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public IgnoreCommand(Integer indexOfTask, boolean isIgnore) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isIgnore \u003d isIgnore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Marks a task as ignorable and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isIgnore) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                Task task \u003d tasks.markAsIgnorable(indexOfTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                UiMessageHandler.outputMessage(IGNORED + task.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                Task task \u003d tasks.markAsUnignorable(indexOfTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                UiMessageHandler.outputMessage(UNIGNORED + task.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 36,
      "TanYiXiang": 10,
      "fauzt": 13
    }
  },
  {
    "path": "src/main/java/chronologer/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Prints the entire list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"You have currently no tasks in your list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRESENT_LIST \u003d \"Here are the task(s) in your list:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Outputs the entire list of tasks to the UI which will print it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e currentList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (tasks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(EMPTY_LIST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            outputRequiredList(currentList, PRESENT_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 33,
      "hanskw4267": 2,
      "TanYiXiang": 4
    }
  },
  {
    "path": "src/main/java/chronologer/command/LocationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a location to an existing task as a comment."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class LocationCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String locationOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Initializes the different parameters when adding the location of a task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param userInputLocation Holds the location for the task as given by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public LocationCommand(int indexOfTask, String userInputLocation) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.locationOfTask \u003d userInputLocation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Adds the location to the task and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Task taskWithLocation \u003d tasks.addLocation(indexOfTask, locationOfTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Noted. Your task location has been added:\" + \"\\n \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + taskWithLocation.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 47,
      "hanskw4267": 1
    }
  },
  {
    "path": "src/main/java/chronologer/command/ManualCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Allows the user to delete a particular task from their task list based on"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ManualCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String UG_URI \u003d \"https://github.com/AY1920S1-CS2113-T13-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Removes the task from the TaskList and saves the updated TaskList to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * persistent storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            desktop.browse(new URI(UG_URI));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (URISyntaxException | IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.websiteMissing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 36,
      "hanskw4267": 8
    }
  },
  {
    "path": "src/main/java/chronologer/command/MessageBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Handles building a message based on several different strings from the command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class MessageBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    MessageBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private StringBuilder message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Initialises the string builder to an empty string and await for incoming string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void initialiseMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Appends the incoming string to the existing string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param output is the incoming string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void loadMessage(String output) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        message.append(output);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Retrieves the message at its current state."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return the message to be outputted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 40
    }
  },
  {
    "path": "src/main/java/chronologer/command/PostponeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Postpones a task to different times."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version 1.9"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO_PERIOD \u003d \"TODO PERIOD\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime toDate \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String POSTPONED_DEADLINE \u003d \"Got it! I\u0027ve postponed this deadline:\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String POSTPONED_EVENT \u003d \"Got it! I\u0027ve postponed this event:\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String POSTPONED_TODO \u003d \"Got it! I\u0027ve postponed this TODO:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String UNABLE_TO_POSTPONE \u003d \"Timeless and Duration based TODO tasks can\u0027t be postponed.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Initializes the different parameters to postpone a task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask Holds the index of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate   Holds the start date of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Secondary constructor for event tasks in particular."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask Holds the index of the task to be commented on."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate   Holds the new start time of a task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param toDate      Holds the new end time of a task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PostponeCommand(int indexOfTask, LocalDateTime startDate, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.toDate \u003d toDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Postpones a task properly and saves the updated TaskList  it to persistent storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        isIndexValid(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBePostponed \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isDeadlinePostponeable(taskToBePostponed, tasks)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            postponeDate(taskToBePostponed, startDate, tasks, storage, history);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(POSTPONED_DEADLINE + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (isEventPostponeable(taskToBePostponed, tasks)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            postponeDateRange(taskToBePostponed, startDate, toDate, tasks, storage, history);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(POSTPONED_EVENT + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (isTodoPeriod(taskToBePostponed)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            postponeDateRange(taskToBePostponed, startDate, toDate, tasks, storage, history);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(POSTPONED_TODO + taskToBePostponed.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(UNABLE_TO_POSTPONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether index of list item within current list range."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks Current task list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void isIndexValid(TaskList tasks) throws ChronologerException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (!isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.taskDoesNotExist());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if task is deadline and doesn\u0027t clash with other deadlines at the same time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskToBePostponed The task to be postponed"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks             The list of tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if task is a deadline and doesn\u0027t clash"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isDeadlinePostponeable(Task taskToBePostponed, TaskList tasks) throws ChronologerException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isDeadline(taskToBePostponed)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isDeadlineClash(taskToBePostponed.getDescription(), startDate, tasks)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                throw new ChronologerException(ChronologerException.taskClash());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if task is event and doesn\u0027t clash with other events at the same time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskToBePostponed The task to be postponed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks             The list of tasks"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if task is an event and doesn\u0027t clash"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEventPostponeable(Task taskToBePostponed, TaskList tasks) throws ChronologerException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isEvent(taskToBePostponed)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (isEventClash(taskToBePostponed.getDescription(), startDate, toDate, tasks)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                throw new ChronologerException(ChronologerException.taskClash());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Determine if the date to be postponed is clashing with another deadline."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description Description of the deadline"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate   Start date  of the deadline"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks       Current task list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Boolean value that indicate whether a clash will occur"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isDeadlineClash(String description, LocalDateTime startDate, TaskList tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline deadlineTest \u003d new Deadline(description, startDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return tasks.isClash(deadlineTest);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Determine if the date to be postponed is clashing with another event."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate   Start date  of the event"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks       Current task list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Boolean value that indicate whether a clash will occur"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEventClash(String description, LocalDateTime startDate, LocalDateTime endDate, TaskList tasks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Event eventTest \u003d new Event(description, startDate, endDate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return tasks.isClash(eventTest);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Postpone task with a specific date range eg: event, todo with period."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskToBePostponed The task to have its date postponed"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate         Start date of the task"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param toDate            End date of the task"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks             Current task list"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param storage           Storage component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If errors occur in storage component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void postponeDateRange(Task taskToBePostponed, LocalDateTime startDate,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                                   LocalDateTime toDate, TaskList tasks, Storage storage,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                                   ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        checkEventTodoDate(startDate, taskToBePostponed.getStartDate(), toDate, taskToBePostponed.getEndDate());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        taskToBePostponed.setStartDate(startDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        taskToBePostponed.setEndDate(toDate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Postpone task with a single date eg: deadline."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskToBePostponed The task to have its date postponed"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate         Start date of the task"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param tasks             Current task list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param storage           Storage component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If errors occur in storage component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void postponeDate(Task taskToBePostponed, LocalDateTime startDate,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                              TaskList tasks, Storage storage, ChronologerStateList history)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        throws ChronologerException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        checkDeadlineDate(startDate, taskToBePostponed.getStartDate());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        taskToBePostponed.setStartDate(startDate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if new deadline date later than old deadline date."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newStartDate New deadline date"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param oldStartDate Old deadline date"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If new deadline date earlier than old deadline date"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void checkDeadlineDate(LocalDateTime newStartDate, LocalDateTime oldStartDate) throws ChronologerException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newStartDate.isBefore(oldStartDate)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.postponeDateError());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if event/todo dates are later than the old dates and also checks if enddate later than startdate."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newStartDate New event/Todo start date"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param oldStartDate Old event/Todo start date"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newEndDate   New event/Todo end date"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param oldEndDate   Old event/Todo end date"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If new event dates later than old event dates and if endate earlier than startdate"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void checkEventTodoDate(LocalDateTime newStartDate, LocalDateTime oldStartDate, LocalDateTime"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        newEndDate, LocalDateTime oldEndDate) throws ChronologerException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newStartDate.isBefore(oldStartDate) || newEndDate.isBefore(oldEndDate)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.postponeDateError());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newEndDate.isBefore(newStartDate)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.endDateError());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the task is of deadline type."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the task is a deadline."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isDeadline(Task task) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (DEADLINE.equals(task.getType()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the task is of event type."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the task is an event."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEvent(Task task) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (EVENT.equals(task.getType()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check whether the task is of todo period type."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the task is a todo period."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isTodoPeriod(Task task) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (TODO_PERIOD.equals(task.getType()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 37,
      "hanskw4267": 4,
      "TanYiXiang": 224
    }
  },
  {
    "path": "src/main/java/chronologer/command/PriorityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Adds a priority level to a certain task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PriorityCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private int indexOfTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String priorityString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public PriorityCommand(int indexOfTask, String priorityString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priorityString \u003d priorityString.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Updates the priority level of a task that is not ignorable and saves the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * updated TaskList to persistent storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Priority newPriority \u003d Priority.getPriorityLevel(priorityString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (newPriority \u003d\u003d Priority.INVALID) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidPriorityLevel());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (!isIndexValid(indexOfTask, tasks.getSize())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.taskDoesNotExist());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        task.setPriority(newPriority);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(\"Got it! \" + task.getDescription() + \" priority level is now \" + priorityString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 23,
      "hanskw4267": 2,
      "TanYiXiang": 27
    }
  },
  {
    "path": "src/main/java/chronologer/command/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to redo a change to the core tasklist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Performs the redo for the user by updating the core tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateListOfTasks(history.redo());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(\"Redo successful!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 31
    }
  },
  {
    "path": "src/main/java/chronologer/command/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Adds a reminder to a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Integer indexOfTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Integer days;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public RemindCommand(Integer indexOfTask, Integer days) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Creates a reminder for a task and saves the updated TaskList to persistent storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (!isIndexValid(indexOfTask,tasks.getSize())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.taskDoesNotExist());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task task \u003d tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        task.setReminder(days);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        history.addState((tasks.getTasks()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        UiMessageHandler.outputMessage(String.format(\"Okay! You\u0027ll get a reminder for this task %d \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            + \"days beforehand:\", days) + \"  \" + task.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "fauzt": 40
    }
  },
  {
    "path": "src/main/java/chronologer/command/RestoreVersionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to restore to a particular version."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class RestoreVersionCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int versionNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public RestoreVersionCommand(int versionNumberToStore) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.versionNumber \u003d versionNumberToStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the user to restore from pre-stored versions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateListOfTasks(history.restoreVersion(tasks.getTasks(), versionNumber));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 34
    }
  },
  {
    "path": "src/main/java/chronologer/command/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Finds the next free time slot of a duration of user\u0027s choosing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String NO_CLASH \u003d \"You have no events that will clash with a slot of this duration\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private long durationToFind;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public SearchCommand(Long duration) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.durationToFind \u003d duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public long getDurationToFind() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return durationToFind;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Searches for the next available time slot based on the user\u0027s duration."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        ArrayList\u003cEvent\u003e dateList \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        for (Task item : tasks.getTasks()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (item.getClass() \u003d\u003d Event.class) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                dateList.add((Event) item);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Collections.sort(dateList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (dateList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            UiMessageHandler.outputMessage(NO_CLASH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            found \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (dateList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            UiMessageHandler.outputMessage(\"You can schedule something after \" + dateList.get(0).toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            for (int i \u003d 0; i \u003c dateList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (i !\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(dateList.get(i - 1).getEndDate(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                            dateList.get(i).getStartDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    duration \u003d ChronoUnit.HOURS.between(LocalDateTime.now(), dateList.get(i).getStartDate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                if (durationToFind \u003c\u003d duration) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    if (i !\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        UiMessageHandler.outputMessage("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                \"Next free time slot of duration \" + Long.toString(durationToFind) + \"hrs is between \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                        + dateList.get(i - 1).toString() + \" and \" + dateList.get(i).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                        UiMessageHandler"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                .outputMessage(\"You can schedule something from now till \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                                    + dateList.get(i).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                UiMessageHandler.outputMessage("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    \"You can schedule something after the \" + dateList.get(dateList.size() - 1).toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "hanskw4267": 83
    }
  },
  {
    "path": "src/main/java/chronologer/command/StoreVersionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to store to a desired version."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class StoreVersionCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int versionNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public StoreVersionCommand(int versionNumberToStore) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.versionNumber \u003d versionNumberToStore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the user to store versions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.storeVersion(tasks.getTasks(), versionNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 34
    }
  },
  {
    "path": "src/main/java/chronologer/command/TaskScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Finds a free period of time within the user\u0027s schedule for a selected duration value."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TaskScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String NOT_TODO \u003d \"Task selected is not a Todo with a duration\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String NOT_DEADLINE \u003d \"Task selected is not a Deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String OVERDUE_DEADLINE \u003d \"The selected deadline is overdue!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private final Long durationToSchedule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private final Integer indexOfTask;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private final Integer indexOfDeadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private final LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Initialises the command parameter for a selected task to be done by a selected deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param indexOfTask is the index number of the selected task in the TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param indexDeadline is the index number of the selected deadline in the TaskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TaskScheduleCommand(int indexOfTask, int indexDeadline) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.durationToSchedule \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfDeadline \u003d indexDeadline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.deadlineDate \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Initialises the command parameter for a selected task to be done by an inputted date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param indexOfTask is the index number of the selected task in the TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param deadlineDate is the date to schedule the task by"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TaskScheduleCommand(int indexOfTask, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.durationToSchedule \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d indexOfTask;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfDeadline \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Initialises the command parameter for an inputted duration to be done by a selected deadline."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param duration is the minimum hours of a free period that the user wishes to find"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param indexOfDeadline is the index number of the selected deadline in the TaskList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TaskScheduleCommand(Long duration, int indexOfDeadline) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.durationToSchedule \u003d duration;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfDeadline \u003d indexOfDeadline;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.deadlineDate \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Initialises the command parameter for an inputted duration to be done by an inputted date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param duration is the minimum hours of a free period that the user wishes to find"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param deadlineDate is the date to schedule the task by"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TaskScheduleCommand(Long duration, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.durationToSchedule \u003d duration;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfDeadline \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Retrieves the duration and deadline date based on the user\u0027s input and pass the values along"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * to the TaskScheduler logic."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws ChronologerException if the selected task is not a compatible type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long duration;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        duration \u003d retrieveDuration(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        deadlineDate \u003d retrieveDeadlineDate(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (deadlineDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            result \u003d TaskScheduler.scheduleTask(tasks, duration);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            UiMessageHandler.outputMessage(result);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (LocalDateTime.now().isAfter(deadlineDate)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(OVERDUE_DEADLINE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        result \u003d TaskScheduler.scheduleByDeadline(tasks, duration, deadlineDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        UiMessageHandler.outputMessage(result);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private long retrieveDuration(TaskList tasks) throws ChronologerException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (this.indexOfTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            assert this.durationToSchedule !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return this.durationToSchedule;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (indexOfTask \u003c 0 || indexOfTask \u003e\u003d tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidIndex());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo todo;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            todo \u003d (Todo) tasks.getTasks().get(indexOfTask);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(NOT_TODO);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return todo.duration;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime retrieveDeadlineDate(TaskList tasks) throws ChronologerException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (this.indexOfDeadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return this.deadlineDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (indexOfDeadline \u003c 0 || indexOfDeadline \u003e\u003d tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidIndex());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Deadline deadline;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            deadline \u003d (Deadline) tasks.getTasks().get(indexOfDeadline);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(NOT_DEADLINE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return deadline.getStartDate();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 8,
      "fauzt": 137
    }
  },
  {
    "path": "src/main/java/chronologer/command/TaskScheduler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Handles the logic of scheduling a duration value by a given date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public final class TaskScheduler {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final int SEARCH_HARD_LIMIT \u003d 30;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String SCHEDULE_ANYTIME_BY_DEADLINE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            \"You can schedule this task from now till the deadline.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String SCHEDULE_ANYTIME \u003d \"You can schedule this task anytime.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String SCHEDULE_NOW_TILL_FORMAT \u003d \"You can schedule this task from now till %s\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String SCHEDULE_FROM_TILL_FORMAT \u003d \"You can schedule this task from %s till %s\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String NO_FREE_SLOTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            \"There is no free slot to insert the task. Consider freeing up your schedule.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String NOT_ENOUGH_TIME \u003d \"The duration is too long to be done within now and the deadline.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String NOT_ENOUGH_TIME_HARD_LIMIT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            \"The duration is too long to be done within the next 30 days.\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String LOW_PRIORITY \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            \"Below are the list of low-priority event(s) that you can consider freeing up.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static ArrayList\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime hardLimitDeadlineDate \u003d LocalDateTime.now().plusDays(SEARCH_HARD_LIMIT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static boolean isFreeBetweenEvents;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static MessageBuilder listOfPeriodMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static MessageBuilder listOfLowPriorityMessage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Finds a free period of time within the user\u0027s schedule for a given duration by a given deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param tasks is the master task list in the program"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param durationToSchedule is the minimum duration to find a large enough period that is free"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param deadlineDate is the date to find any periods by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static String scheduleByDeadline(TaskList tasks, Long durationToSchedule, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert durationToSchedule !\u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert deadlineDate !\u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isThereNotEnoughTime(durationToSchedule, deadlineDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return NOT_ENOUGH_TIME;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setupEventList(tasks, deadlineDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isEventListEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return SCHEDULE_ANYTIME_BY_DEADLINE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        initialiseOutputMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        searchFreePeriodsInEventList(durationToSchedule, deadlineDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return getOutputMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Finds a free period of time within the user\u0027s schedule for a given duration without concerning a deadline."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param tasks is the master task list in the program"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param durationToSchedule is the minimum duration to find a large enough period that is free"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static String scheduleTask(TaskList tasks, Long durationToSchedule) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert tasks !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert durationToSchedule !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isThereNotEnoughTime(durationToSchedule, hardLimitDeadlineDate)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return NOT_ENOUGH_TIME_HARD_LIMIT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setupEventList(tasks, hardLimitDeadlineDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isEventListEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return SCHEDULE_ANYTIME;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        initialiseOutputMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        searchFreePeriodsInEventList(durationToSchedule, hardLimitDeadlineDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return getOutputMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static void setupEventList(TaskList tasks, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        eventList \u003d tasks.obtainEventList(deadlineDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        isFreeBetweenEvents \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static void initialiseOutputMessage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        listOfPeriodMessage \u003d new MessageBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        listOfLowPriorityMessage \u003d new MessageBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        listOfLowPriorityMessage.loadMessage(LOW_PRIORITY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static String getOutputMessage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isFreeBetweenEvents) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return listOfPeriodMessage.getMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return listOfPeriodMessage.getMessage() + listOfLowPriorityMessage.getMessage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static boolean isThereNotEnoughTime(Long durationToSchedule, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return durationToSchedule \u003e ChronoUnit.HOURS.between(LocalDateTime.now(), deadlineDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static boolean isEventListEmpty() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return eventList.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static void searchFreePeriodsInEventList(Long durationToSchedule, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert eventList.size() !\u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isFreeFromNowTillFirstEvent(durationToSchedule)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            loadResult();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (isFreeBetweenThisEventTillNextEvent(durationToSchedule, i)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                loadResult(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isFreeBetweenLastEventTillDeadline(durationToSchedule, deadlineDate)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            loadResult(deadlineDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (!isFreeBetweenEvents) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            listOfPeriodMessage.loadMessage(NO_FREE_SLOTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static boolean isFreeFromNowTillFirstEvent(Long durationToSchedule) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime nextStartDate \u003d eventList.get(0).getStartDate();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (nextStartDate.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long duration \u003d ChronoUnit.HOURS.between(LocalDateTime.now(), nextStartDate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (durationToSchedule \u003c\u003d duration) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            isFreeBetweenEvents \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static boolean isFreeBetweenThisEventTillNextEvent(Long durationToSchedule, int i) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event currentEvent \u003d eventList.get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event nextEvent \u003d eventList.get(i + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime currentEndDate \u003d currentEvent.getEndDate();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime nextStartDate \u003d nextEvent.getStartDate();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (currentEvent.getPriority() \u003d\u003d Priority.LOW) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            listOfLowPriorityMessage.loadMessage(currentEvent.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long duration \u003d ChronoUnit.HOURS.between(currentEndDate, nextStartDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (durationToSchedule \u003c\u003d duration) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            isFreeBetweenEvents \u003d true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static boolean isFreeBetweenLastEventTillDeadline(Long durationToSchedule, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event event \u003d eventList.get(eventList.size() - 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (event.getPriority() \u003d\u003d Priority.LOW) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            listOfLowPriorityMessage.loadMessage(event.toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime currentEndDate \u003d event.getEndDate();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (currentEndDate.isAfter(deadlineDate)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long duration \u003d ChronoUnit.HOURS.between(currentEndDate, deadlineDate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (durationToSchedule \u003c\u003d duration) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            isFreeBetweenEvents \u003d true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static void loadResult() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedNextStartDate \u003d eventList.get(0).getStartDate().format(DateTimeExtractor.DATE_FORMATTER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        listOfPeriodMessage.loadMessage(String.format(SCHEDULE_NOW_TILL_FORMAT, formattedNextStartDate));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static void loadResult(int index) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedCurrentEndDate \u003d eventList.get(index).getEndDate().format(DateTimeExtractor.DATE_FORMATTER);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedNextStartDate \u003d eventList.get(index + 1).getStartDate()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                .format(DateTimeExtractor.DATE_FORMATTER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        listOfPeriodMessage.loadMessage(String.format(SCHEDULE_FROM_TILL_FORMAT, formattedCurrentEndDate,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                formattedNextStartDate));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static void loadResult(LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedCurrentEndDate \u003d eventList.get(eventList.size() - 1).getEndDate()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                .format(DateTimeExtractor.DATE_FORMATTER);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedDeadlineDate \u003d deadlineDate.format(DateTimeExtractor.DATE_FORMATTER);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        listOfPeriodMessage.loadMessage(String.format(SCHEDULE_FROM_TILL_FORMAT, formattedCurrentEndDate,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                formattedDeadlineDate));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 200
    }
  },
  {
    "path": "src/main/java/chronologer/command/TesterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.storage.TaskListAdapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TesterCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String TEST_FILE \u003d \"TestList\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String WELCOME_TESTER_MESSAGE \u003d \"Welcome tester.\\n Pre-allocated schedule loaded.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            + \"Type \u0027sudo-clear\u0027 to initialise back to an empty schedule.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            + \" (WARNING: CANNOT BE UNDONE)\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            InputStream is \u003d getClass().getClassLoader().getResourceAsStream(TEST_FILE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            InputStreamReader reader \u003d new InputStreamReader(is);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(reader);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                builder.append(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            String json \u003d builder.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Gson gson \u003d new GsonBuilder().registerTypeAdapter(TaskList.class, new TaskListAdapter())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                    .create();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            TaskList taskList \u003d gson.fromJson(json, TaskList.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            tasks.updateListOfTasks(taskList.getTasks());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.fileDoesNotExist());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.unableToReadFile());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        UiMessageHandler.outputMessage(WELCOME_TESTER_MESSAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 54
    }
  },
  {
    "path": "src/main/java/chronologer/command/ThemeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to change themes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ThemeCommand extends Command  {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int choiceOfTheme;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ThemeCommand(int choiceOfTheme) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.choiceOfTheme \u003d choiceOfTheme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Updates the theme according to either light or dark."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(tasks.updateTheme(choiceOfTheme));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 35
    }
  },
  {
    "path": "src/main/java/chronologer/command/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the user to undo a change to the core tasklist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Performs the undo for the user by updating the core tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateListOfTasks(history.undo());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(\"Undo successful!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 31
    }
  },
  {
    "path": "src/main/java/chronologer/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Renders all the sorted tasks scheduled on a date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String dateToFind;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String NO_TASK_SCHEDULED \u003d \"There are no tasks scheduled on that date.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRESENT_SCHEDULE \u003d \"Here is your schedule for that day:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ViewCommand(String dateToFind) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.dateToFind \u003d dateToFind;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Finds all the tasks scheduled on a particular date and passes it to UI which prints to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e sortedRequiredSchedule \u003d tasks.schedule(dateToFind);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String messageForUser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (sortedRequiredSchedule.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            messageForUser \u003d NO_TASK_SCHEDULED;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            messageForUser \u003d PRESENT_SCHEDULE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            int indexOfTask \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            for (Task task : sortedRequiredSchedule) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                messageForUser +\u003d indexOfTask++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(messageForUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 42,
      "hanskw4267": 4,
      "TanYiXiang": 2
    }
  },
  {
    "path": "src/main/java/chronologer/command/WeekCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Allows the viewing of different weeks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class WeekCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int weekNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public WeekCommand(int weekToStore) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.weekNumber \u003d weekToStore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the user to view the tasks of a desired week."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks   Holds the list of all the tasks the user has."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Allows the saving of the file to persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param history Allows the history features to be done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void execute(TaskList tasks, Storage storage, ChronologerStateList history) throws ChronologerException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(tasks.updateWeek(weekNumber));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.updateGui(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 34
    }
  },
  {
    "path": "src/main/java/chronologer/exception/ChronologerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Exception class is used to handle all of the expected exceptions and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * certain unexpected exceptions to give the user a better understanding of why"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * the program crashed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ChronologerException extends Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String WRONG_FORMAT_MSG \u003d \"OOPS!!! The date or time of this command is not of the \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        + \"correct format.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String TASK_CLASH_MSG \u003d \"OOPS!!! There is already a task scheduled at the same time, use view \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"command to check your schedule for the day\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String MISSING_DESCRIPTION_MSG \u003d \"OOPS!!! The description of the command is missing.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String UNKNOWN_COMMAND_MSG \u003d \"OOPS!!! The command you have entered is not of a valid type.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String MISSING_DATETIME_MSG \u003d \"OOPS!!! The date or time of this command is missing.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String NONEXISTING_TASK_MSG \u003d \"OOPS!!! The task you searched for does not exist.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String WRITE_ERROR_MSG \u003d \"OOPS!!! Unable to write file.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String READ_ERROR_MSG \u003d \"OOPS!!! Unable to read from file.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String NONEXISTING_CLASS_MSG \u003d \"OOPS!!! Unable to extract certain features of the Duke Project\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \" Please ensure the project was imported properly\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_FILE_MSG \u003d \"OOPS!!! Unable to read from previous task list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"A new file has been created for you\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_PRIORITY_MSG \u003d \"OOPS!!! The new priority level is missing. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"Please try typing the command again.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String INVALID_PRIORITY_MSG \u003d \"OOPS!!! The new priority level is invalid. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"It must be either high,medium or low.Please try again\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String INVALID_INDEX_MSG \u003d \"OOPS!!! The index given is invalid. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        + \"It must be a existing index in the list. Please try again\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String INVALID_LOCATION_MSG \u003d \"OOPS!!! The location portion is not provided. Please try again\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_COMMENT_MSG \u003d \"OOPS!!! The comment section is empty. Please try again\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String CALENDAR_WRITE_ERROR \u003d \" OOPS!!! Unable to write calendar file.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String MISSING_MODULE_MSG \u003d \" OOPS!!! The needed module code is missing or invalid.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EMPTY_EXPORT_MSG \u003d \"OOPS!! There are no tasks to export with!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EMPTY_CALENDAR \u003d \"OOPS!! Your list only have dateless tasks and they can\u0027t be exported\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        + \"\\n Or your list have none of the flagged tasks! \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EARLY_DATE_MSG \u003d \"OOPS!! The date you are postponing to is earlier than the old date\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String END_DATE_EARLIER_MSG \u003d \"OOPS!! Your end date is earlier than your start date\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String INVALID_WEEK \u003d \"OOPS!! Your week is invalid!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String INVALID_VERSION \u003d \"OOPS!! Your version is invalid!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"OOPS!! The duration given is invalid!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"OOPS!! The input given is not valid.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String WEBSITE_BROKEN \u003d \"OOPS!! We are unable to launch our online guide!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String UNDO_LIMIT \u003d \"OOPS!! Sorry unable to undo further\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String REDO_LIMIT \u003d \"OOPS!! Sorry unable to redo further\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles wrong date or time errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String wrongDateOrTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return WRONG_FORMAT_MSG;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if a new task clashes with a existing task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskClash() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return TASK_CLASH_MSG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty task description errors."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyUserDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_DESCRIPTION_MSG;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles when parser does not understand input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unknownUserCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return UNKNOWN_COMMAND_MSG;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles empty date or time errors."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String emptyDateOrTime() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_DATETIME_MSG;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if task searched does not exist."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String taskDoesNotExist() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return NONEXISTING_TASK_MSG;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to save the tasks list to file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToWriteFile() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return WRITE_ERROR_MSG;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if program is unable to read an existing file for tasks list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String unableToReadFile() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return READ_ERROR_MSG;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if file does not exists."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String fileDoesNotExist() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_FILE_MSG;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Handles if priority level is missing from priority command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyPriorityLevel() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_PRIORITY_MSG;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Handles if priority level is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String invalidPriorityLevel() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return INVALID_PRIORITY_MSG;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Handles if index is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String invalidIndex() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return INVALID_INDEX_MSG;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * notifies user if location is not provided."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String invalidLocation() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return INVALID_LOCATION_MSG;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * notifies user if comment is not provided."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return message to be displayed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyComment() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_COMMENT_MSG;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String errorWriteCalendar() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return CALENDAR_WRITE_ERROR;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String missingModuleCode() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return MISSING_MODULE_MSG;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyExport() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return EMPTY_EXPORT_MSG;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String postponeDateError() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return EARLY_DATE_MSG;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String endDateError() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return END_DATE_EARLIER_MSG;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String invalidWeek() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return INVALID_WEEK;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String invalidVersion() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return INVALID_VERSION;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static String emptyCalendar() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return EMPTY_CALENDAR;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static String invalidDuration() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return INVALID_DURATION;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String websiteMissing() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return WEBSITE_BROKEN;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String redoLimitHit() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return REDO_LIMIT;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String undoLimitHit() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return UNDO_LIMIT;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static String invalidInput() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return INVALID_INPUT;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ChronologerException(String message) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(message);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 70,
      "hanskw4267": 106,
      "TanYiXiang": 51,
      "fauzt": 7
    }
  },
  {
    "path": "src/main/java/chronologer/exception/MyLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.logging.LogManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Handles the creation and writing of log messages for errors."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class MyLogger {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    Logger logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    FileHandler fh;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    String fileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * initializes a new logger."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param name     name of new logger"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param fileName name of generated log file (without extention)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public MyLogger(String name, String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LogManager logManager \u003d LogManager.getLogManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        logManager.addLogger(logger);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        fh \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * writes to error log file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param msg      error exceptions message to be logged"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param location class where error has occured"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param input    the full user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void writeLog(String msg, String location, String input) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh \u003d new FileHandler(System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/\" + fileName + \".log\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.warning(msg + \"\\nError from: \" + location + \"\\nUser input was: \\\"\" + input + \"\\\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh.flush();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * writes to error log file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param msg      error exceptions message to be logged"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param location class where error has occured"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void writeLog(String msg, String location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh \u003d new FileHandler(System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/\" + fileName + \".log\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.warning(msg + \"\\nError from: \" + location);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh.flush();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            fh.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 76
    }
  },
  {
    "path": "src/main/java/chronologer/parser/CommentParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.CommentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the comment command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class CommentParser extends IndexParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    CommentParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String comment \u003d extractComment(taskFeatures);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new CommentCommand(indexOfTask, comment);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String extractComment(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String comment;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] commentCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            comment \u003d commentCommandParts[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyComment());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 8,
      "hanskw4267": 1,
      "TanYiXiang": 29
    }
  },
  {
    "path": "src/main/java/chronologer/parser/DateTimeExtractor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This DateTimeExtractor class allows the identification of dates and is used"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * to print out dates and times."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DateTimeExtractor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function appends the end time of an event to provide a standardised"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * output of date and time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dateTimeFromUser A string containing only the date segment of the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                         input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return String A string containing the end time of an event will also"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         returned."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ChronologerException Throws this exception if the date or time format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                              provided by the user is incorrect!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static LocalDateTime extractDateTime(String dateTimeFromUser) throws ChronologerException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime dateToReturn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            dateToReturn \u003d LocalDateTime.parse(dateTimeFromUser, DATE_FORMATTER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return dateToReturn;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 17,
      "hanskw4267": 18,
      "TanYiXiang": 1,
      "fauzt": 4
    }
  },
  {
    "path": "src/main/java/chronologer/parser/DeadlineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components to add a deadline ."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class DeadlineParser extends DescriptionParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Creates new parser for deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command   command type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    DeadlineParser(String userInput, String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.BY.getFlag();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.hasModCode \u003d userInput.contains(Flag.MOD.getFlag());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the deadline description and deadline date within the input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return the AddCommand to be executed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws ChronologerException if input is invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d extractStartDate(taskFeatures);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (hasModCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String modCode \u003d extractModCode(taskFeatures);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return new AddCommand(command, taskDescription, startDate, null, modCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, startDate, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract and converts start date component in user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The converted start date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If there\u0027s error parsing the start date component or if isn\u0027t any."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private LocalDateTime extractStartDate(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            startDate \u003d DateTimeExtractor.extractDateTime(dateTimeFromUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10,
      "hanskw4267": 12,
      "TanYiXiang": 16,
      "fauzt": 31
    }
  },
  {
    "path": "src/main/java/chronologer/parser/DeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the delete command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class DeleteParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    DeleteParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new DeleteCommand(indexOfTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "TanYiXiang": 20
    }
  },
  {
    "path": "src/main/java/chronologer/parser/DescriptionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Backbone of all parsers that process input based on strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class DescriptionParser extends Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String checkType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String taskDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public DescriptionParser(String userInput, String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public abstract Command parse() throws ChronologerException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void extract() throws ChronologerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d removeCommandInput(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskDescription \u003d parseDetails(taskFeatures, checkType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String parseDetails(String taskFeatures, String checkType) throws ChronologerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (checkType \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return taskFeatures;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (hasModCode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return this.command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String description \u003d taskFeatures.split(checkType, 2)[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(ChronologerException.emptyUserDescription());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyUserDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    // @@author hanskw4267"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    String extractModCode(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Pattern patt \u003d Pattern.compile(\"/m\\\\s*[A-Z,a-z]{2,3}[1-9]{1}\\\\d{3}[A-Z,a-z]?\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Matcher matcher \u003d patt.matcher(taskFeatures);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return matcher.group().split(\"\\\\s\")[1].toUpperCase(); // you can get it from desired index as well"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(\"Missing module code\", this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.missingModuleCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 9,
      "hanskw4267": 19,
      "TanYiXiang": 5,
      "fauzt": 26
    }
  },
  {
    "path": "src/main/java/chronologer/parser/DoneParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the done command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class DoneParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    DoneParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new DoneCommand(indexOfTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "TanYiXiang": 19
    }
  },
  {
    "path": "src/main/java/chronologer/parser/EditParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the edit command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EditParser extends IndexParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EMPTY_DESCRIPTION \u003d \"No description\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    EditParser(String userInput, String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String newDescription \u003d extractNewDescription(taskFeatures);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new EditCommand(indexOfTask, newDescription);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extracts the description component from user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The new task description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the description component is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String extractNewDescription(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String[] editCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String newDescription;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            newDescription \u003d editCommandParts[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(ChronologerException.emptyUserDescription());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            logger.writeLog(EMPTY_DESCRIPTION, this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyUserDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return newDescription;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 9,
      "TanYiXiang": 40
    }
  },
  {
    "path": "src/main/java/chronologer/parser/EventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required to create an event class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class EventParser extends DescriptionParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Creates new parser for Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command   command type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    EventParser(String userInput, String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.checkType \u003d Flag.AT.getFlag();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.hasModCode \u003d userInput.contains(Flag.MOD.getFlag());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime fromDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime toDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateTimeFromUser \u003d extractDateTimeString(taskFeatures);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        fromDate \u003d extractFromDate(dateTimeFromUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        toDate \u003d extractToDate(dateTimeFromUser);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert toDate !\u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert fromDate !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author hanskw4267"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Pair\u003cLocalDateTime, LocalDateTime\u003e orderedDates \u003d checkDateOrder(fromDate, toDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        fromDate \u003d orderedDates.getKey();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        toDate \u003d orderedDates.getValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (hasModCode) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String modCode \u003d extractModCode(taskFeatures);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return new AddCommand(command, taskDescription, fromDate, toDate, modCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new AddCommand(command, taskDescription, fromDate, toDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract and converts from date component in user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param dateTimeFromUser The user input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The converted from date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ChronologerException If there\u0027s error parsing the from date"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                              component."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    LocalDateTime extractFromDate(String dateTimeFromUser) throws ChronologerException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String fromDateString \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return DateTimeExtractor.extractDateTime(fromDateString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract and converts To Date component in user input."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param dateTimeFromUser The user input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The converted To Date."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If there\u0027s error parsing the To Date component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    LocalDateTime extractToDate(String dateTimeFromUser) throws ChronologerException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String toDateString \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return DateTimeExtractor.extractDateTime(toDateString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract the date components from user input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The date time strings."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the date components are empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    String extractDateTimeString(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Checks for the order of the start and end dates."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param fromDate the supposed start date of task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param toDate the supposed end date of task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return pair with dates in the correct order"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    Pair\u003cLocalDateTime, LocalDateTime\u003e checkDateOrder(LocalDateTime fromDate, LocalDateTime toDate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime newfromDate \u003d fromDate;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime newtoDate \u003d toDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (fromDate.isAfter(toDate)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            LocalDateTime temp \u003d fromDate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            newfromDate \u003d toDate;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            newtoDate \u003d temp;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new Pair\u003c\u003e(newfromDate, newtoDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 11,
      "hanskw4267": 36,
      "TanYiXiang": 79
    }
  },
  {
    "path": "src/main/java/chronologer/parser/ExportParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.ExportCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the export command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class ExportParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasDeadlineFlag \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasEventFlag \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean hasTodoFlag \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    ExportParser(String userInput, String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        extractFlags(taskFeatures);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String fileName \u003d removeFlags(taskFeatures);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new ExportCommand(fileName, hasDeadlineFlag, hasEventFlag, hasTodoFlag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void extractFlags(String taskFeatures) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (taskFeatures.contains(Flag.DEADLINE.getFlag())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            hasDeadlineFlag \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (taskFeatures.contains(Flag.EVENT.getFlag())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            hasEventFlag \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (taskFeatures.contains(Flag.TODO.getFlag())) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            hasTodoFlag \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String removeFlags(String taskFeatures) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskFeatures.replaceAll(Flag.DEADLINE.getFlag(), \"\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            .replaceAll(Flag.EVENT.getFlag(), \"\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ).replaceAll(Flag.TODO.getFlag(), \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 49
    }
  },
  {
    "path": "src/main/java/chronologer/parser/FindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the find command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class FindParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    FindParser(String userInput, String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new FindCommand(taskFeatures);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "TanYiXiang": 18
    }
  },
  {
    "path": "src/main/java/chronologer/parser/Flag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public enum Flag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    BY(\"/by\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    AT(\"/at\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    BETWEEN(\"/between\"), FOR(\"/for\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    IN(\"/in\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    DEADLINE(\"-d\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    EVENT(\"-e\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    TODO(\"-t\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    RAW(\"-r\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    MOD(\"/m\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String flag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Flag(String flag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 2,
      "TanYiXiang": 3,
      "fauzt": 20
    }
  },
  {
    "path": "src/main/java/chronologer/parser/IgnoreParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.IgnoreCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the ignore command from the user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class IgnoreParser extends IndexParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Boolean isIgnore;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    IgnoreParser(String userInput, String command, Boolean isIgnore) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.isIgnore \u003d isIgnore;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new IgnoreCommand(indexOfTask, isIgnore);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "TanYiXiang": 23
    }
  },
  {
    "path": "src/main/java/chronologer/parser/IndexParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Backbone of all parsers that process input based on list index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class IndexParser extends Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    Integer indexOfTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String NEGATIVE_NUM_DETECTED \u003d \"Please input a positive number for task index.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public IndexParser(String userInput, String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public abstract Command parse() throws ChronologerException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void extract() throws ChronologerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d removeCommandInput(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.indexOfTask \u003d parseIndex(taskFeatures);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int parseIndex(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            index \u003d Integer.parseInt(taskFeatures.split(\"\\\\s+\", 2)[0].trim()) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidInput());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(NEGATIVE_NUM_DETECTED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10,
      "hanskw4267": 1,
      "TanYiXiang": 7,
      "fauzt": 24
    }
  },
  {
    "path": "src/main/java/chronologer/parser/LastDay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.MyLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Contains the dates of the last days of the semester."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class LastDay {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static HashMap\u003cString, DayOfWeek\u003e days \u003d new HashMap\u003cString, DayOfWeek\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String CLASS_NAME \u003d \"chronologer.parser.LastDay\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String LOG_NAME \u003d \"ParserErrors\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static MyLogger logger \u003d new MyLogger(CLASS_NAME, LOG_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public LastDay() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Gets the last day\u0027s date of the semester."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param dayFromUser day of the week"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return date of the last day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @throws ChronologerException invalid day was given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public static DayOfWeek getDay(String dayFromUser) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"MON\", DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"TUE\", DayOfWeek.TUESDAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"WED\", DayOfWeek.WEDNESDAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"THU\", DayOfWeek.THURSDAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"FRI\", DayOfWeek.FRIDAY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"SAT\", DayOfWeek.SATURDAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        days.put(\"SUN\", DayOfWeek.SUNDAY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String formattedDay \u003d formatDay(dayFromUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return days.get(formattedDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static String formatDay(String dayFromUser) throws ChronologerException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String formattedDay \u003d dayFromUser.substring(0, 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return formattedDay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), \"chronologer.parser.LastDay\", dayFromUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 55
    }
  },
  {
    "path": "src/main/java/chronologer/parser/LocationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.LocationCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the location command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class LocationParser extends IndexParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    LocationParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String locationString \u003d extractNewLocation(taskFeatures);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new LocationCommand(indexOfTask, locationString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract the location string component from user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The location string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the location string is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String extractNewLocation(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String locationString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] locationCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            locationString \u003d locationCommandParts[1].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidLocation());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return locationString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 8,
      "hanskw4267": 1,
      "TanYiXiang": 36
    }
  },
  {
    "path": "src/main/java/chronologer/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.MyLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Ensures that all the classes of parser type have implementations of the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * method parse."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    String taskFeatures;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    String checkType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    boolean hasModCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String LOG_NAME \u003d \"ParserErrors\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    MyLogger logger \u003d new MyLogger(this.getClass().getName(), LOG_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * contructs a parser object and initializes a logger."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command   input command type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Parser(String userInput, String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public abstract Command parse() throws ChronologerException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    String removeCommandInput(String userInput) throws ChronologerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String taskFeatures;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            taskFeatures \u003d userInput.split(\"\\\\s+\", 2)[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyUserDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return taskFeatures;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 11,
      "hanskw4267": 15,
      "TanYiXiang": 6,
      "fauzt": 17
    }
  },
  {
    "path": "src/main/java/chronologer/parser/ParserFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.RedoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.ManualCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.TesterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * The parser class is used to parse and make sense of the different queries the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * user inputs into the program and tag them for further processing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ParserFactory {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final boolean IGNORE \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final boolean UNIGNORE \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String ASSIGNMENT \u003d \"assignment\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String PRIORITY \u003d \"priority\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String REMIND \u003d \"remind\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String POSTPONE \u003d \"postpone\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String IGNORE_INPUT \u003d \"ignore\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String UNIGNORE_INPUT \u003d \"unignore\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String COMMENT \u003d \"comment\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String LOCATION \u003d \"location\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String SCHEDULE \u003d \"schedule\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String EXPORT \u003d \"export\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String REDO \u003d \"redo\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String THEME \u003d \"theme\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String RESTORE \u003d \"restore\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String STORE \u003d \"store\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String MANUAL \u003d \"manual\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String EXAM \u003d \"exam\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String EXAMINATION \u003d \"examination\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String TUTORIAL \u003d \"tutorial\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String TESTER \u003d \"tester\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String CLEAR \u003d \"sudo-clear\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the user input of string type and returns the respective command type."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param userInput This string is provided by the user to ask \u0027Duke\u0027 to perform"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                  a particular action"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return Command After processing the user\u0027s input it returns the correct"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                  command for further processing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @throws ChronologerException The DukeException class has all the respective methods"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *                       and messages!"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static Command parse(String userInput) throws ChronologerException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String command \u003d userInput.split(\"\\\\s+\", 2)[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (userInput.contains(Flag.BETWEEN.getFlag())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return new TodoWithinPeriodParser(userInput, command).parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (userInput.contains(Flag.FOR.getFlag())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                return new TodoWithDurationParser(userInput, command).parse();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TodoParser(userInput, command).parse();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case ASSIGNMENT:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return new DeadlineParser(userInput, command).parse();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new EventParser(userInput, command).parse();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new FindParser(userInput, command).parse();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new EditParser(userInput, command).parse();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new DeleteParser(userInput, command).parse();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case PRIORITY:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PriorityParser(userInput, command).parse();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new DoneParser(userInput, command).parse();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case REMIND:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new RemindParser(userInput, command).parse();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case POSTPONE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeParser(userInput, command).parse();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case VIEW:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new ViewParser(userInput, command).parse();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case SEARCH:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new SearchParser(userInput, command).parse();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case IGNORE_INPUT:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new IgnoreParser(userInput, command, IGNORE).parse();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case UNIGNORE_INPUT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new IgnoreParser(userInput, command, UNIGNORE).parse();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case COMMENT:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new CommentParser(userInput, command).parse();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case LOCATION:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new LocationParser(userInput, command).parse();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ScheduleParser(userInput, command).parse();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case EXPORT:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new ExportParser(userInput,command).parse();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case REDO:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case THEME:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new ThemeParser(userInput,command).parse();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case RESTORE:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new RestoreVersionParser(userInput,command).parse();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case STORE:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new StoreVersionParser(userInput,command).parse();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new WeekParser(userInput,command).parse();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case MANUAL:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return new ManualCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case EXAM: //fallthrough"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case EXAMINATION:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            command \u003d EXAM;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return new EventParser(userInput, command).parse();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case LECTURE: //fallthrough"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case TUTORIAL:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return new RecurringEventParser(userInput, command).parse();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case TESTER:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TesterCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            // Empty string or unknown command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.unknownUserCommand());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 17,
      "hanskw4267": 5,
      "TanYiXiang": 17,
      "fauzt": 118
    }
  },
  {
    "path": "src/main/java/chronologer/parser/PostponeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.PostponeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the postpone command from the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeParser extends IndexParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime newFromDate \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime newToDate \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    PostponeParser(String userInput, String command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String[] postponeCommandParts \u003d extractPostponeCommandParts(taskFeatures);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String dateString \u003d extractDateString(postponeCommandParts);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (isEventDateFormat(dateString)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractEventDates(dateString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeCommand(indexOfTask, newFromDate, newToDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            extractDeadlineDates(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return new PostponeCommand(indexOfTask, newFromDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract and split the user input into parts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The user input but split into multiple parts."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String[] extractPostponeCommandParts(String taskFeatures) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Obtain the date part from the split user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param postponeCommandParts The user input for postpone command but split into multiple parts."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The part corresponding to the date components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the date component is empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private String extractDateString(String[] postponeCommandParts) throws ChronologerException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return postponeCommandParts[1].trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract and convert the date components required to postpone events."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param dateString The date components from user input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If there\u0027s an error converting the date components."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void extractEventDates(String dateString) throws ChronologerException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String obtainStartDate \u003d dateString.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String obtainEndDate \u003d dateString.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            newFromDate \u003d DateTimeExtractor.extractDateTime(obtainStartDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            newToDate \u003d DateTimeExtractor.extractDateTime(obtainEndDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract and convert the date components required to postpone deadlines."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param dateString The date components from user input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If there\u0027s an error converting the date components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void extractDeadlineDates(String dateString) throws ChronologerException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            newFromDate \u003d DateTimeExtractor.extractDateTime(dateString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if the date component follows the event date format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param dateString The date component string."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if the date components follows the event date format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isEventDateFormat(String dateString) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return dateString.contains(\"-\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 15,
      "hanskw4267": 2,
      "TanYiXiang": 96
    }
  },
  {
    "path": "src/main/java/chronologer/parser/PriorityParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.PriorityCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the priority command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PriorityParser extends IndexParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    PriorityParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String priorityString \u003d extractPriority(taskFeatures);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new PriorityCommand(indexOfTask, priorityString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract the priority string component from user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The priority string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the priority string is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String extractPriority(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String priorityString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String[] priorityCommandParts \u003d taskFeatures.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            priorityString \u003d priorityCommandParts[1].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyPriorityLevel());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return priorityString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 8,
      "hanskw4267": 1,
      "TanYiXiang": 39
    }
  },
  {
    "path": "src/main/java/chronologer/parser/RecurringEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.command.AddRecurringCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Processes input for recurring events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class RecurringEventParser extends EventParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Creates a new parser to handle recurring events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param userInput input from user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param command   command-type of input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public RecurringEventParser(String userInput, String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime fromDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime toDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String modCode \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        modCode \u003d extractModCode(taskFeatures);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String tillDate \u003d extractTillDate(taskFeatures);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String dateTimeFromUser \u003d formatDateTime(tillDate, taskFeatures);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        fromDate \u003d super.extractFromDate(dateTimeFromUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        toDate \u003d super.extractToDate(dateTimeFromUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        assert toDate !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        assert fromDate !\u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        DayOfWeek day \u003d extractDay(taskFeatures);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Pair\u003cLocalDateTime, LocalDateTime\u003e orderedDates \u003d super.checkDateOrder(fromDate, toDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        fromDate \u003d orderedDates.getKey();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        toDate \u003d orderedDates.getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return new AddRecurringCommand(command, taskDescription, fromDate, toDate, modCode, day);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private DayOfWeek extractDay(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String dayFromUser \u003d dateTimeFromUser.split(\" \", 2)[0].trim().toUpperCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return LastDay.getDay(dayFromUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | PatternSyntaxException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private String extractTillDate(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Pattern patt \u003d Pattern.compile(\"/till\\\\s+\\\\d{2}/\\\\d{2}/\\\\d{4}\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Matcher matcher \u003d patt.matcher(taskFeatures);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (matcher.find()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return matcher.group().split(\"\\\\s\")[1]; // you can get it from desired index as well"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(ChronologerException.emptyDateOrTime(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private String formatDateTime(String date, String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String timeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim().split(\" \")[1];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String startDate \u003d date + \" \" + timeFromUser.split(\"-\")[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String endDate \u003d date + \" \" + timeFromUser.split(\"-\")[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return startDate + \"-\" + endDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | PatternSyntaxException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "hanskw4267": 86
    }
  },
  {
    "path": "src/main/java/chronologer/parser/RemindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the remind command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class RemindParser extends IndexParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    RemindParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.IN.getFlag();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days \u003d extractDays(taskFeatures);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new RemindCommand(indexOfTask, days);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Extract the reminder days component from user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param taskFeatures The user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The days left until reminder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If the reminder format is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int extractDays(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int days;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String daysString \u003d substring.split(\"\\\\s+\", 2)[0].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            days \u003d Integer.parseInt(daysString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.unknownUserCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 8,
      "hanskw4267": 1,
      "TanYiXiang": 13,
      "fauzt": 26
    }
  },
  {
    "path": "src/main/java/chronologer/parser/RestoreVersionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.RestoreVersionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Extracts the version the user wants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class RestoreVersionParser extends VersionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    RestoreVersionParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int choiceOfVersion \u003d extractVersion(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new RestoreVersionCommand(choiceOfVersion);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 25
    }
  },
  {
    "path": "src/main/java/chronologer/parser/ScheduleParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.TaskScheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the schedule command from the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v1.3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ScheduleParser extends IndexParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final int INDEX_INPUT \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final int DATE_INPUT \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final int NO_DEADLINE_INPUT \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int indexOfDeadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime dateOfDeadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    ScheduleParser(String userInput, String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the inputted text into its components and check whether the last inputted component is an index number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * or a date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return the command to execute to schedule a task\u0027s duration by the selected Deadline or a custom deadline date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws ChronologerException if the inputted text does not match the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isProcessingRawDuration(taskFeatures)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            int deadlineType \u003d checkInputType(taskFeatures);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Long duration \u003d getRawDuration();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return getTaskScheduleCommandForDuration(deadlineType, duration);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int deadlineType \u003d checkInputType(taskFeatures);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return getTaskScheduleCommandForIndex(deadlineType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDeadlineIndex(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String extractedIndex \u003d taskFeatures.split(Flag.BY.getFlag(), 2)[1].trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int convertedIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            convertedIndex \u003d Integer.parseInt(extractedIndex) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidInput());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return convertedIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractDeadlineDate(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String extractedDate \u003d taskFeatures.split(Flag.BY.getFlag(), 2)[1].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime convertedDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            convertedDate \u003d DateTimeExtractor.extractDateTime(extractedDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return convertedDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int checkInputType(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskFeatures.split(\"\\\\s+\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return NO_DEADLINE_INPUT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String stringToCheck \u003d taskFeatures.split(Flag.BY.getFlag(), 2)[1].trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (stringToCheck.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (stringToCheck.contains(\"/\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return DATE_INPUT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return INDEX_INPUT;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private boolean isProcessingRawDuration(String taskFeatures) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String[] tokens \u003d taskFeatures.split(Flag.RAW.getFlag(), 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (tokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.taskFeatures \u003d taskFeatures.replace(Flag.RAW.getFlag(), \"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Long getRawDuration() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return (long) indexOfTask + 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Command getTaskScheduleCommandForDuration(int deadlineType, Long duration) throws ChronologerException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        switch (deadlineType) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case INDEX_INPUT:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            indexOfDeadline \u003d extractDeadlineIndex(taskFeatures);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TaskScheduleCommand(duration, indexOfDeadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case DATE_INPUT:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            dateOfDeadline \u003d extractDeadlineDate(taskFeatures);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TaskScheduleCommand(duration, dateOfDeadline);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case NO_DEADLINE_INPUT:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TaskScheduleCommand(duration, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Command getTaskScheduleCommandForIndex(int deadlineType) throws ChronologerException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        switch (deadlineType) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case INDEX_INPUT:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            indexOfDeadline \u003d extractDeadlineIndex(taskFeatures);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TaskScheduleCommand(indexOfTask, indexOfDeadline);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case DATE_INPUT:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            dateOfDeadline \u003d extractDeadlineDate(taskFeatures);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TaskScheduleCommand(indexOfTask, dateOfDeadline);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        case NO_DEADLINE_INPUT:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return new TaskScheduleCommand(indexOfTask, null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "hanskw4267": 1,
      "TanYiXiang": 4,
      "fauzt": 120
    }
  },
  {
    "path": "src/main/java/chronologer/parser/SearchParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.SearchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "//@@author hanskw4267"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Extract the components required for the search command from the user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version v2.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class SearchParser extends DescriptionParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public SearchParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Long duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            duration \u003d checkDuration(Long.parseLong(taskDescription));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidDuration());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return new SearchCommand(duration);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private Long checkDuration(Long duration) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (duration \u003c\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidDuration());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 34,
      "TanYiXiang": 2
    }
  },
  {
    "path": "src/main/java/chronologer/parser/StoreVersionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.StoreVersionCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Extracts the version the user wants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class StoreVersionParser extends VersionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    StoreVersionParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int choiceOfVersion \u003d extractVersion(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new StoreVersionCommand(choiceOfVersion);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 25
    }
  },
  {
    "path": "src/main/java/chronologer/parser/ThemeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ThemeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Extracts the theme the user wants."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ThemeParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int DARK_THEME \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int LIGHT_THEME \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int SAME_THEME \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    ThemeParser(String userInput, String command)  {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Extracts the theme the user wants and determines if the theme selected is the same."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskFeatures contains the integer the user provides."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int extractTheme(String taskFeatures) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int themeChosen;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (taskFeatures.startsWith(\"d\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            themeChosen \u003d DARK_THEME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else if (taskFeatures.startsWith(\"l\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            themeChosen \u003d LIGHT_THEME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            themeChosen \u003d SAME_THEME;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return themeChosen;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int choiceOfTheme \u003d extractTheme(taskFeatures);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new ThemeCommand(choiceOfTheme);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 45
    }
  },
  {
    "path": "src/main/java/chronologer/parser/TodoParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Extract the components required to add a todo task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoParser extends DescriptionParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    TodoParser(String userInput, String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the user\u0027s input into information to be passed into the Command class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return The command to add the task with inputted description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws ChronologerException if user\u0027s input is in an invalid format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, null, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "fauzt": 26
    }
  },
  {
    "path": "src/main/java/chronologer/parser/TodoWithDurationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Extract the components required to add a TodoWithDuration task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoWithDurationParser extends TodoParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"Invalid duration format. Duration must be a number\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithDurationParser(String userInput, String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.FOR.getFlag();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the duration from the input to pass to the AddCommand for Todo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return the AddCommand to be executed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws ChronologerException if input is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int duration \u003d extractDuration(taskFeatures);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, duration);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private int extractDuration(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String substring \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            duration \u003d Integer.parseInt(substring.split(\"\\\\s+\", 2)[0].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(INVALID_DURATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "fauzt": 42
    }
  },
  {
    "path": "src/main/java/chronologer/parser/TodoWithinPeriodParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Extract the components required to add a TodoWithinPeriod task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TodoWithinPeriodParser extends TodoParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public TodoWithinPeriodParser(String userInput, String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.checkType \u003d Flag.BETWEEN.getFlag();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Parses the duration from the input to pass to the AddCommand for Todo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return the AddCommand to be executed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @throws ChronologerException if input is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d extractStartDate(taskFeatures);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime endDate \u003d extractEndDate(taskFeatures);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new AddCommand(command, taskDescription, startDate, endDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractStartDate(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String from;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            from \u003d dateTimeFromUser.split(\"-\", 2)[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            startDate \u003d DateTimeExtractor.extractDateTime(from);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private LocalDateTime extractEndDate(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String dateTimeFromUser \u003d taskFeatures.split(checkType, 2)[1].trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String to;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            to \u003d dateTimeFromUser.split(\"-\", 2)[1].trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.emptyDateOrTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime endDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            endDate \u003d DateTimeExtractor.extractDateTime(to);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName(), userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "TanYiXiang": 1,
      "fauzt": 70
    }
  },
  {
    "path": "src/main/java/chronologer/parser/VersionParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Extracts the version the user wants."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public abstract class VersionParser extends DescriptionParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    VersionParser(String userInput, String command)  {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Obtains an integer of the version the user wants."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskFeatures contains the integer the user provides."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public int extractVersion(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int desiredVersion \u003d Integer.parseInt(taskFeatures);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (desiredVersion \u003e\u003d 1 \u0026\u0026 desiredVersion \u003c\u003d 3) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return desiredVersion;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidVersion());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 30
    }
  },
  {
    "path": "src/main/java/chronologer/parser/ViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ViewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Extract the components required for the view command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class ViewParser extends DescriptionParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    ViewParser(String userInput, String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return new ViewCommand(taskFeatures);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "TanYiXiang": 20
    }
  },
  {
    "path": "src/main/java/chronologer/parser/WeekParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.WeekCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Extracts the week the user wants."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class WeekParser extends DescriptionParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int CURRENT_WEEK_INDICATOR \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int FIRST_WEEK \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int FINAL_WEEK \u003d 18;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    WeekParser(String userInput, String command)  {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(userInput, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Processes and determines the week the user wants."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskFeatures contains the integer the user provides."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int extractWeek(String taskFeatures) throws ChronologerException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (taskFeatures.contains(\"current\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return CURRENT_WEEK_INDICATOR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            int desiredWeek \u003d Integer.parseInt(taskFeatures);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (desiredWeek \u003e\u003d FIRST_WEEK \u0026\u0026 desiredWeek \u003c\u003d FINAL_WEEK) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return desiredWeek;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }  else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                throw new ChronologerException(ChronologerException.invalidWeek());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.invalidInput());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Command parse() throws ChronologerException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super.extract();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int choiceOfWeek \u003d extractWeek(taskFeatures);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new WeekCommand(choiceOfWeek);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 51
    }
  },
  {
    "path": "src/main/java/chronologer/storage/CalendarOutput.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package chronologer.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.MyLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.data.CalendarOutputter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Outputs the ICS File created by export command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class CalendarOutput {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String CLASS_NAME \u003d \"chronologer.storage.CalenderOutput\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String LOG_NAME \u003d \"StorageErrors\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static String filePath \u003d System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static MyLogger logger \u003d new MyLogger(CLASS_NAME, LOG_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Process the calendar into an ics file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param fileName Name of the file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param calendar Calendar to be processed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @throws ChronologerException If there are errors writing the ics file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static void outputCalendar(String fileName, Calendar calendar) throws ChronologerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        File icsFile \u003d new File(filePath.concat(fileName).concat(\".ics\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        icsFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        FileOutputStream fileOutputStream;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            fileOutputStream \u003d new FileOutputStream(icsFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            CalendarOutputter calendarOutputter \u003d new CalendarOutputter();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            calendarOutputter.output(calendar, fileOutputStream);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Success,ics file written at src/ChronologerDatabase/\" + fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            fileOutputStream.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), CLASS_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            logger.writeLog(e.toString(), CLASS_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            throw new ChronologerException(ChronologerException.errorWriteCalendar());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "hanskw4267": 5,
      "TanYiXiang": 46
    }
  },
  {
    "path": "src/main/java/chronologer/storage/ChronologerStateList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.apache.commons.lang3.SerializationUtils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ChronologerStateList implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Stack\u003cObject\u003e chronologerUndoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Stack\u003cObject\u003e chronologerRedoStack \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Storage storage1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Storage storage2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Storage storage3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private File version1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private File version2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private File version3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs the ChronologerStateList by passing in the version files."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param version1 Holds the file which will be utilised as the first state."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param version2 Holds the file which will be utilised as the second state."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param version3 Holds the file which will be utilised as the third state."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ChronologerStateList(File version1, File version2, File version3) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.storage1 \u003d new Storage(version1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.storage2 \u003d new Storage(version2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.storage3 \u003d new Storage(version3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.version1 \u003d version1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.version2 \u003d version2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.version3 \u003d version3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Stores the current state based on the user\u0027s choice."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void storeVersion(ArrayList\u003cTask\u003e listToStore, int version) throws ChronologerException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        switch (version) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage1.saveFile(listToStore);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Saved as state 1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage2.saveFile(listToStore);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Saved as state 2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            storage3.saveFile(listToStore);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Saved as state 3\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Please pick a valid state from 1 - 3\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Restores from the given state based on the user;s choice."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e restoreVersion(ArrayList\u003cTask\u003e currentVersion, int version)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        throws ChronologerException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        switch (version) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (storage1.loadFile(version1).getTasks().size() !\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                UiMessageHandler.outputMessage(\"Restored from state 1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return storage1.loadFile(version1).getTasks();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (storage2.loadFile(version2).getTasks().size() !\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                UiMessageHandler.outputMessage(\"Restored from state 2\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return storage2.loadFile(version2).getTasks();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (storage3.loadFile(version3).getTasks().size() !\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                UiMessageHandler.outputMessage(\"Restored from state 3\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return storage3.loadFile(version3).getTasks();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            UiMessageHandler.outputMessage(\"Please pick a valid state from 1 - 3\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return currentVersion;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Stores the current state."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void addState(ArrayList\u003cTask\u003e listToStore) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        chronologerUndoStack.push(SerializationUtils.clone(listToStore));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Performs a undo to change to the previous state."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e undo() throws ChronologerException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e toReturn;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (checkUndoSizeInvalid()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.undoLimitHit());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            chronologerRedoStack.push(chronologerUndoStack.pop());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            toReturn \u003d (ArrayList\u003cTask\u003e) chronologerUndoStack.peek();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return (SerializationUtils.clone(toReturn));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Performs a redo to change to a previous state that was undone."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e redo() throws ChronologerException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e toReturn;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (checkRedoSizeInvalid()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.redoLimitHit());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            toReturn \u003d (ArrayList\u003cTask\u003e) chronologerRedoStack.pop();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            chronologerUndoStack.push(SerializationUtils.clone(toReturn));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return (SerializationUtils.clone(toReturn));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Function to determine if a redo can be performed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private boolean checkRedoSizeInvalid() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return chronologerRedoStack.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Function to determine if a undo can be performed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private boolean checkUndoSizeInvalid() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return chronologerUndoStack.size() \u003c\u003d 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 140
    }
  },
  {
    "path": "src/main/java/chronologer/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.MyLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Reads and writes to persistent storage in Json format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v3.0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private FileOutputStream fileOutputStream;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private BufferedReader bufferedReader;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String LOG_NAME \u003d \"StorageErrors\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private MyLogger logger \u003d new MyLogger(this.getClass().getName(), LOG_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This Storage constructor is used to function is used to assign the different"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * parameters required by the Storage methods."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param file This parameter holds the file to write to."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Save updates made to the TaskList to the persistent storage in Json form."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param listOfTasks This parameter holds the updated TaskList of the user and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    used to save the updated TaskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @throws ChronologerException This exception is thrown if there is not file at the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                              given location to save to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e listOfTasks) throws ChronologerException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            setOutputStreams();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            GsonBuilder builder \u003d new GsonBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Gson gson \u003d builder.create();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String json \u003d gson.toJson(listOfTasks);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            fileOutputStream.write(json.getBytes());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            fileOutputStream.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.unableToWriteFile());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Loads the task list stored in the Json file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param file This parameter is passed as to be able to write to the file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @throws ChronologerException This exception is thrown for any unexpected issues such"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                              as no file in location, unable to read the file or a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                              class in not found."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public TaskList loadFile(File file) throws ChronologerException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            setInputStreams(file);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                builder.append(line);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String json \u003d builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            Gson gson \u003d new GsonBuilder().registerTypeAdapter(TaskList.class, new TaskListAdapter())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            TaskList taskList \u003d gson.fromJson(json, TaskList.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.fileDoesNotExist());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            logger.writeLog(e.toString(), this.getClass().getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.unableToReadFile());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void setOutputStreams() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.fileOutputStream \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void setInputStreams(File file) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        FileInputStream fileInputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        InputStreamReader reader \u003d new InputStreamReader(fileInputStream);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.bufferedReader \u003d new BufferedReader(reader);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 39,
      "hanskw4267": 22,
      "TanYiXiang": 36,
      "fauzt": 11
    }
  },
  {
    "path": "src/main/java/chronologer/storage/TaskListAdapter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package chronologer.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.JsonDeserializationContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.JsonDeserializer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Adapter used to parse JsonObjects and translate them into task list objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class TaskListAdapter implements JsonDeserializer\u003cTaskList\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO_DURATION \u003d \"TODO DURATION\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO_PERIOD \u003d \"TODO PERIOD\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String JSON_ERROR \u003d \"OOPS!! There\u0027s an invalid task type detected in the save file\" + \"\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        +  \"This task will be ignored.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public TaskList deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        throws JsonParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        JsonArray jsonArray \u003d json.getAsJsonArray();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        for (JsonElement element : jsonArray) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            JsonObject object \u003d element.getAsJsonObject();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            String type \u003d object.get(\"type\").toString().replaceAll(\"\\\"\", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (DEADLINE.equals(type)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                listOfTasks.add(new Gson().fromJson(object, Deadline.class));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else if (EVENT.equals(type)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                listOfTasks.add(new Gson().fromJson(object, Event.class));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else if (isTodo(type)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                listOfTasks.add(new Gson().fromJson(object, Todo.class));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                UiMessageHandler.outputMessage(JSON_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        taskList \u003d new TaskList(listOfTasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Determine if Json type parameter is of Todo task type."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param type The Json parameter type"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return True if todo false otherwise"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private boolean isTodo(String type) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return TODO.equals(type) || TODO_DURATION.equals(type) || TODO_PERIOD.equals(type);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "TanYiXiang": 70
    }
  },
  {
    "path": "src/main/java/chronologer/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * deadline type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Deadline extends Task implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String DEADLINE \u003d \"DEADLINE\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Constructor for deadline task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description Description of the deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param atDate      Due date for deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Deadline(String description, LocalDateTime atDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d atDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setReminder(DEFAULT_REMINDER_VALUE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.type \u003d DEADLINE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    // @@author hanskw4267"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Constructor for deadline task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description Description of the deadline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param atDate      Due date for deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Deadline(String description, LocalDateTime atDate, String modCode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.startDate \u003d atDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.type \u003d DEADLINE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        setReminder(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (modCode.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[D]\" + \"[\" + super.getStatusIcon() + \"] \" + this.modCode + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + this.description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        message \u003d message + \" (by: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author hanskw4267"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!location.isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\n\" + location;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\nNote to self: \" + comment;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isEqual(taskToCheck.startDate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (taskToCheck.startDate.isBefore(this.startDate) \u0026\u0026 taskToCheck.endDate.isAfter(this.startDate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 19,
      "hanskw4267": 39,
      "TanYiXiang": 8,
      "fauzt": 12
    }
  },
  {
    "path": "src/main/java/chronologer/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class Event extends Task implements Serializable, Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Creates a new Event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param startDate   end time of task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param endDate     start time of task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public Event(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        setReminder(DEFAULT_REMINDER_VALUE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.type \u003d EVENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    // @@author hanskw4267"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Creates a new Event task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param startDate   end time of task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param endDate     start time of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param modCode     module code of task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Event(String description, LocalDateTime startDate, LocalDateTime endDate, String modCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.type \u003d EVENT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (description.equals(\"exam\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            this.priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        setReminder(3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Custom comparator for sorting."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return this.startDate.compareTo(o.startDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (modCode.isBlank()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[E]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[E]\" + \"[\" + super.getStatusIcon() + \"] \" + this.modCode + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + this.description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        message \u003d message + \"(at: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \"-\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author hanskw4267"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!location.isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\n\" + location;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\nNote to self: \" + comment;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (taskToCheck.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return (this.startDate.isBefore(taskToCheck.startDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return this.startDate.isBefore(taskToCheck.endDate) \u0026\u0026 this.endDate.isAfter(taskToCheck.startDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 19,
      "hanskw4267": 56,
      "TanYiXiang": 5,
      "fauzt": 15
    }
  },
  {
    "path": "src/main/java/chronologer/task/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * This enumeration defines the priority levels supported by Chronologer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function obtains a Priority Constant based on the input string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param priorityString String corresponding to priority level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Correct priority level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public static Priority getPriorityLevel(String priorityString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        switch (priorityString.toLowerCase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return Priority.INVALID;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "TanYiXiang": 33
    }
  },
  {
    "path": "src/main/java/chronologer/task/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Holds the reminder date for the task after processing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "class Reminder implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    LocalDateTime reminderDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Reminder(int days, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminderDate \u003d startDate.minusDays(days);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Reminder(int days) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminderDate \u003d LocalDateTime.now().plusDays(days);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    boolean isReminderTrigger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return LocalDateTime.now().isAfter(reminderDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 2,
      "TanYiXiang": 1,
      "fauzt": 23
    }
  },
  {
    "path": "src/main/java/chronologer/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This Task class is extended by the other tasks and serves as a template for"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * all tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1,4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected LocalDateTime startDate \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected LocalDateTime endDate \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String location \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected Reminder reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String comment;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    protected boolean isIgnored;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    protected String modCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\"; // Tick symbol"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String CROSS \u003d \"\\u2718\"; // Cross symbol"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRIORITY_LOW \u003d \"[\\u2605]\";// Low priority symbol"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRIORITY_MED \u003d \"[\\u2605\\u2605]\";// Med priority symbol"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PRIORITY_HIGH \u003d \"[\\u2605\\u2605\\u2605]\"; // High priority symbol"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    static final int DEFAULT_REMINDER_VALUE \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Constructor for task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        this.isIgnored \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.modCode \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.location \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Check if any task reminders are triggered."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return if triggered"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public boolean isReminderTrigger() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (isIgnored || isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (reminder !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return reminder.isReminderTrigger();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Returns a priority symbol to be printed as output."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return Unicode that represent priority level."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getPriorityIcon() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        if (priority \u003d\u003d Priority.HIGH) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return PRIORITY_HIGH; // Return triple star symbols"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else if (priority \u003d\u003d Priority.MEDIUM) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return PRIORITY_MED;// Return double star symbol"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            return PRIORITY_LOW;// Return single star symbol"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This getStatusIcon function returns the tick or cross symbols to be printed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * as output."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return This function returns either a tick or a cross."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return (isDone ? TICK : CROSS); // Return tick or cross symbol"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * converts the task to a string."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d getPriorityIcon() + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\nNote to self: \" + comment;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!location.isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\n\" + location;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    abstract boolean isClash(Task taskToCheck);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Reminder getReminder() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        reminder \u003d new Reminder(days, startDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getComment() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return comment;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setComment(String comment) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.comment \u003d comment;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public boolean isIgnored() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return isIgnored;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setIgnored(boolean isIgnored) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.isIgnored \u003d isIgnored;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 29,
      "hanskw4267": 88,
      "TanYiXiang": 55,
      "fauzt": 13
    }
  },
  {
    "path": "src/main/java/chronologer/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * The TaskList class handles all operations performed on the TaskList as well"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * as stores the TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String ZERO_PADDING \u003d \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String DEADLINE_TIMING_PREFIX \u003d \"D: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String START_TIME_PREFIX \u003d \"S: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String END_TIME_PREFIX \u003d \"E: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int CURRENT_WEEK_INDICATOR \u003d -1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int DARK_MODE \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int THEME_SETTING \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int WEEK_SETTING \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int WEEK \u003d 7;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int AUGUST \u003d 8;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int FIRST \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int currentYear \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final LocalDate firstDay \u003d LocalDate.of(currentYear, AUGUST, FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final LocalDate firstMondayOfSemester \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        firstDay.with(TemporalAdjusters.nextOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final LocalDate firstSundayOfSemester \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        firstMondayOfSemester.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static int previousTheme \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static int previousWeek \u003d -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ObservableList\u003cTask\u003e observableListOfTasks;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ObservableList\u003cInteger\u003e currentSetting \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        FXCollections.observableArrayList(DARK_MODE, CURRENT_WEEK_INDICATOR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.listOfTasks \u003d listOfTasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.observableListOfTasks \u003d FXCollections.observableArrayList(listOfTasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This custom comparator allows the sorting of both deadlines and events."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Comparator\u003cTask\u003e DateComparator \u003d (firstDate, secondDate) -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (firstDate.startDate \u003d\u003d null \u0026\u0026 secondDate !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else if (firstDate.startDate !\u003d null \u0026\u0026 secondDate.startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        assert firstDate.startDate !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (firstDate.startDate.isBefore(secondDate.startDate)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else if (firstDate.startDate.isEqual(secondDate.startDate)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This custom comparator allows the sorting of both deadlines and events."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Comparator\u003cTask\u003e PriorityComparator \u003d (firstPriority, secondPriority) -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (firstPriority.priority.equals(Priority.HIGH) \u0026\u0026 secondPriority.priority.equals(Priority.MEDIUM)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else if (firstPriority.priority.equals(Priority.MEDIUM) \u0026\u0026 secondPriority.priority.equals(Priority.MEDIUM)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the use to add a particular task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param task contains the task that needs to be added."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listOfTasks.add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This function allows the use to delete a particular task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be deleted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Task delete(int indexOfTask) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listOfTasks.remove(task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.remove(task);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This function allows the user to find tasks with a particular keyword."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param keyWord this string contains the keyword the user is searching for."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyWord) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e holdFoundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            String findMatch \u003d listOfTasks.get(i).toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (findMatch.contains(keyWord)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                holdFoundTasks.add(listOfTasks.get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return holdFoundTasks;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Performs a check as to determine if the task being added has a clash with"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * another task already scheduled."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskToCheck the task trying to be added by the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return boolean true if there is a clash, false if there is not clash."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            if (task.isClash(taskToCheck)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This function allows the user to mark a particular task as done."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask this is the index of the task which needs to be marked as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *                    done."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Task markAsDone(int indexOfTask) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(task);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * Marks a task to be ignored and have reminders to stop showing up for the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask The index of the task to be marked"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The marked task"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Task markAsIgnorable(int indexOfTask) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        task.setIgnored(true);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(task);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Marks a task to no longer be ignored and have reminders to show up again."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param indexOfTask The index of the task to be marked"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The marked task"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Task markAsUnignorable(int indexOfTask) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task task \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        task.setIgnored(false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(task);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This function allows the user to add a location to tasks."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param taskWithLocation is of String type which contains the desired date of"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *                         schedule."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return sortDateList the sorted schedule of all the tasks on a particular"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         date."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Task addLocation(Integer indexOfTask, String taskWithLocation) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Task taskHasLocation \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskHasLocation.setLocation(\"Location of the task is \" + taskWithLocation);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(taskHasLocation);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return taskHasLocation;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param dayToFind is the desired date of schedule."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return sortDateList the sorted schedule of all the tasks on a particular date."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e schedule(String dayToFind) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert dayToFind !\u003d null;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDate dateToFind \u003d LocalDate.parse(dayToFind, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cTask\u003e sortedDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (task.startDate \u003d\u003d null \u0026\u0026 task.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            assert task.startDate !\u003d null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (isOnDate(dateToFind, task.startDate)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                sortedDateList.add(task);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (task.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (isWithinDates(dateToFind, task.startDate, task.endDate)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                sortedDateList.add(task);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        sortedDateList.sort(DateComparator);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return sortedDateList;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private boolean isOnDate(LocalDate dateToCheck, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return (dateToCheck.isEqual(startDate.toLocalDate()));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private boolean isWithinDates(LocalDate dateToCheck, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return !(dateToCheck.isBefore(startDate.toLocalDate()) || dateToCheck.isAfter(endDate.toLocalDate()));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This function allows the user to obtain the tasks on a particular date sorted"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * by priority."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return priorityList the tasks of the given day sorted by priority"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cString\u003e obtainPriorityList(String dayToFind) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e priorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e stringPriorityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task listOfTask : listOfTasks) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            if (listOfTask.toString().contains(dayToFind) \u0026\u0026 !listOfTask.priority.equals(Priority.LOW)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                priorityList.add(listOfTask);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        priorityList.sort(PriorityComparator);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (int i \u003d 0; i \u003c priorityList.size(); i++) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            stringPriorityList.add(priorityList.get(i).toString());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return stringPriorityList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Fetches all tasks without dates."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return tasksWithoutDates tasks with no time constraint."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cString\u003e obtainTasksWithoutDates() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e tasksWithoutDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (listOfTasks.get(i).startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                tasksWithoutDates.add(listOfTasks.get(i).getDescription());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return tasksWithoutDates;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    //@@author fauzt"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Retrieves all Event tasks in the main task list in chronologically-ordered list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @param deadlineDate is the cut-off time to search all prior relevant events"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * @return all the events in the main task list in chronological order"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public ArrayList\u003cEvent\u003e obtainEventList(LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            if (isAnEventBeforeDeadline(task, deadlineDate)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                eventList.add((Event) task);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Collections.sort(eventList);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private boolean isAnEventBeforeDeadline(Task task, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return task.getClass() \u003d\u003d Event.class \u0026\u0026 task.startDate.isBefore(deadlineDate)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            \u0026\u0026 task.endDate.isAfter(LocalDateTime.now());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    //@@author E0310898"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Fetches all reminders for the current date. (Tasks within the next 3 days)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return Holds reminders for the current date."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cString\u003e fetchReminders() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : listOfTasks) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (task.isReminderTrigger()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (task.getModCode().equals(\"\")) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    reminders.add(task.getDescription().trim() + \"\\n\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        + getStartTime(task)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        + getEndTime(task));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    reminders.add(task.getModCode().trim() + \" \""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        + task.getDescription().trim() + \"\\n\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        + getStartTime(task)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        + getEndTime(task));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return reminders;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the GUI to obtain the tasks on a particular date, but"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * only with description."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dayToFind is of String type which contains the desired date of"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *                  schedule."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return sortDateList which contains only the descriptions of the tasks."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cString\u003e scheduleForDay(String dayToFind) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cTask\u003e obtainDescriptions \u003d schedule(dayToFind);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e scheduleDescriptionOnly \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Task task : obtainDescriptions) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (task.getModCode().equals(\"\")) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                scheduleDescriptionOnly.add(task.getDescription().trim() + \"\\n\""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    + getStartTime(task)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    + getEndTime(task));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                scheduleDescriptionOnly.add(task.getModCode().trim() + \" \""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    + task.getDescription().trim() + \"\\n\""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    + getStartTime(task)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    + getEndTime(task));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return scheduleDescriptionOnly;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    //@@author fauzt"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String getStartTime(Task task) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert task.startDate !\u003d null;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int hour \u003d task.startDate.getHour();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int minute \u003d task.startDate.getMinute();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        time \u003d getFormattedTime(hour, minute);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (task.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            time \u003d DEADLINE_TIMING_PREFIX + time;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            time \u003d START_TIME_PREFIX + time + \" \";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String getEndTime(Task task) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (task.endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            return EMPTY;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int hour \u003d task.endDate.getHour();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        int minute \u003d task.endDate.getMinute();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        time \u003d getFormattedTime(hour, minute);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        time \u003d END_TIME_PREFIX + time;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private String getFormattedTime(int hour, int minute) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedHour \u003d Integer.toString(hour);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String formattedMinute \u003d Integer.toString(minute);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (formattedHour.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            formattedHour \u003d ZERO_PADDING + formattedHour;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        if (formattedMinute.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            formattedMinute \u003d ZERO_PADDING + formattedMinute;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        time \u003d formattedHour + formattedMinute;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * This function allows the user to edit the task description."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param indexOfTask    Location of task in the list"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param newDescription The new task description to be updated"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return taskToBeEdited The task that had its description edited"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public Task editTaskDescription(int indexOfTask, String newDescription) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.remove(taskToBeEdited);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskToBeEdited.setDescription(newDescription);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(taskToBeEdited);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the user to edit/add comments to existing tasks."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param indexOfTask Index of task in list"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param comment     Holds comment to be added/edited"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return taskToBeEdited The task that has its comment edited/added"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Task editTaskComment(int indexOfTask, String comment) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Task taskToBeEdited \u003d listOfTasks.get(indexOfTask);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.remove(taskToBeEdited);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        taskToBeEdited.setComment(comment);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(taskToBeEdited);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return taskToBeEdited;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void updateGui(Task task) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.add(task);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        observableListOfTasks.remove(task);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void updateListOfTasks(ArrayList\u003cTask\u003e updatedListOfTasks) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listOfTasks.clear();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listOfTasks \u003d updatedListOfTasks;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the user to change theme - either dark mode or light mode."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param choiceOfTheme Holds the theme that the user wants."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public String updateTheme(int choiceOfTheme) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String messageToUser;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (choiceOfTheme !\u003d previousTheme) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            currentSetting.remove(THEME_SETTING);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            currentSetting.add(THEME_SETTING, choiceOfTheme);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            previousTheme \u003d choiceOfTheme;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            messageToUser \u003d \"Theme changed!\";"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            messageToUser \u003d \"Theme cannot be changed!\";"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return messageToUser;"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Allows the user to view different weeks, weeks 0 - 18."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param choiceOfWeek Holds the week the user wants."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public String updateWeek(int choiceOfWeek) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String messageToUser;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (LocalDate.now().with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY))"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            .isEqual(firstSundayOfSemester.plusDays(choiceOfWeek * WEEK))) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            choiceOfWeek \u003d CURRENT_WEEK_INDICATOR;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (choiceOfWeek !\u003d previousWeek) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            currentSetting.remove(WEEK_SETTING);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            currentSetting.add(WEEK_SETTING, choiceOfWeek);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            previousWeek \u003d choiceOfWeek;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            messageToUser \u003d \"Week being viewed has been changed!\";"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            messageToUser \u003d \"You are viewing the same week!\";"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return messageToUser;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ObservableList\u003cTask\u003e getObservableListOfTasks() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return observableListOfTasks;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return listOfTasks.size();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public ObservableList\u003cInteger\u003e getCurrentSetting() {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return currentSetting;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 321,
      "hanskw4267": 41,
      "TanYiXiang": 28,
      "fauzt": 100
    }
  },
  {
    "path": "src/main/java/chronologer/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This extension of the task class will allow the user to add a task of to-do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class Todo extends Task implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO \u003d \"TODO\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO_DURATION \u003d \"TODO DURATION\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String TODO_PERIOD \u003d \"TODO PERIOD\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public int duration \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.type \u003d TODO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Creates a ToDo task with a specific duration."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param duration    duration of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Todo(String description, int duration) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.type \u003d TODO_DURATION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Creates a ToDo task with a specific period and timing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param startDate   start time of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @param endDate     end time of the task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public Todo(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        this.type \u003d TODO_PERIOD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * This override of the toString function of the task class etches the different"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * portions of the user input into a single string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     * @return This function returns a string of the required task in the desired"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "     *         output format of string type."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (this.duration \u003d\u003d 0 \u0026\u0026 this.startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else if (this.duration \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + \" (from: \" + this.startDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\" + \" (to: \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + this.endDate.format(DateTimeExtractor.DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d super.getPriorityIcon() + \"[T]\" + \"[\" + super.getStatusIcon() + \"] \" + this.description + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "                    + \"(for \" + duration + \" hours)\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author hanskw4267"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!location.isBlank()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\n\" + location;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        if (!comment.isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            message \u003d message + \"\\nNote to self: \" + comment;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        // @@author"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void setReminder(int days) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new Reminder(days);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    boolean isClash(Task taskToCheck) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public int getDuration() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "assman"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 21,
      "hanskw4267": 48,
      "TanYiXiang": 21,
      "assman": 1,
      "fauzt": 9
    }
  },
  {
    "path": "src/main/java/chronologer/ui/ChatbotWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * UI component that allows the user to interact with Chronologer like a chatbot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Its mainly acts on the user input and gives the user appropriate feedback."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "class ChatbotWindow extends UiComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String FXML \u003d \"ChatbotWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private VBox dialogBoxContainer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TextField inputTextField;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ChronologerStateList history;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private List\u003cString\u003e userInputHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private int userInputHistoryPointer \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String currentInput \u003d \"default\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs the chat-bot window of the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param command Holds the Command object responsible for executing user commands."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param parser Holds the Parser object which is responsible for parsing user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks Holds the Tasklist object which holds the core tasklist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param storage Holds the Storage object which is used to store the core tasklist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    ChatbotWindow(Command command, Parser parser, TaskList tasks, Storage storage, ChronologerStateList history) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(FXML, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogBoxContainer.heightProperty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        attachInputListeners();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        printWelcome();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Processes the user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String input \u003d inputTextField.getText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storeUserInputHistory(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            Command command \u003d ParserFactory.parse(input);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (ChronologerException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        printUserMessage(\" \" + input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        printChronologerMessage(UiMessageHandler.getOutputForGui());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        inputTextField.clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints the user\u0027s input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param message holds the message to be printed to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void printUserMessage(String message) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialogBoxContainer.getChildren().add(DialogBox.getUserDialog(message).getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints the Chronologer\u0027s message."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param message holds the message to be printed to the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void printChronologerMessage(String message) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialogBoxContainer.getChildren().add(DialogBox.getChronologerDialog(message).getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints chronologer\u0027s welcome message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void printWelcome() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        printChronologerMessage(UiMessageHandler.printGreeting());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void setText(String text) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        inputTextField.setText(text);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        inputTextField.positionCaret(inputTextField.getText().length());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Attaches listeners to the text field to automatically track, store and scroll through the user"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * inputs like a typical commandline."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void attachInputListeners() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        inputTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (userInputHistoryPointer \u003d\u003d userInputHistory.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                currentInput \u003d newValue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        inputTextField.addEventHandler(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            case ENTER:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (userInputHistoryPointer \u003e\u003d 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    userInputHistoryPointer -\u003d 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    setText(userInputHistory.get(userInputHistoryPointer));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (userInputHistoryPointer \u003c userInputHistory.size() - 1) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    userInputHistoryPointer +\u003d 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    setText(userInputHistory.get(userInputHistoryPointer));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } else if (userInputHistoryPointer \u003d\u003d userInputHistory.size() - 1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    userInputHistoryPointer +\u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    setText(currentInput);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Stores the history of the user\u0027s input to allow the scrolling through of the inputs."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void storeUserInputHistory(String input) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (userInputHistoryPointer !\u003d userInputHistory.size() - 1"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            || (userInputHistoryPointer \u003d\u003d userInputHistory.size() - 1"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u0026\u0026 !input.equals(userInputHistory.get(userInputHistoryPointer)))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            userInputHistory.add(input);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        userInputHistoryPointer \u003d userInputHistory.size();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        currentInput \u003d null;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 172
    }
  },
  {
    "path": "src/main/java/chronologer/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Forms the base of each dialog box."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class DialogBox extends UiComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String FXML \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String USER_ICON_PATH \u003d \"/images/UserIcon.png\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private static final String CHAT_ICON_PATH \u003d \"/images/ChatIcon.png\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs the dialog boxes which make up the chat bot section of the GUI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text the text portion of the label is passed in through this parameter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private DialogBox(String text, boolean isChronologer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(FXML, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Image userImage \u003d new Image(this.getClass().getResourceAsStream(USER_ICON_PATH));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Image chronologerImage \u003d new Image(this.getClass().getResourceAsStream(CHAT_ICON_PATH));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (isChronologer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            displayPicture.setImage(chronologerImage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            displayPicture.setImage(userImage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Renders the appropriate type of dialog box with the correct image."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param text Holds the desired text to be displayed as a single String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static DialogBox getChronologerDialog(String text) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return new DialogBox(text, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 48,
      "hanskw4267": 4
    }
  },
  {
    "path": "src/main/java/chronologer/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ChronologerMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Main UI window of the application. Acts as a container for the child UI elements."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "class MainWindow extends UiComponent\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private AnchorPane timelineWindowHolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private AnchorPane chatbotWindowHolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Stage baseStage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ChronologerStateList history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs the main UI window to house all the different child UI elements."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param baseStage Base stage of the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param main      Main of Chronologer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    MainWindow(Stage baseStage, ChronologerMain main) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(FXML, baseStage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.baseStage \u003d baseStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.tasks \u003d main.tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.storage \u003d main.storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.history \u003d main.history;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        placeUiComponents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Places UI components in the main GUI window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void placeUiComponents() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        TimelineWindow timelineWindow \u003d new TimelineWindow(command, parser, tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        timelineWindowHolder.getChildren().add(timelineWindow.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ChatbotWindow chatbotWindow \u003d new ChatbotWindow(command, parser, tasks, storage, history);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        chatbotWindowHolder.getChildren().add(chatbotWindow.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    Stage getBaseStage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return baseStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Shows the main GUI window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        baseStage.show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints the message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void print(String message) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UiMessageHandler.outputMessage(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 77
    }
  },
  {
    "path": "src/main/java/chronologer/ui/TimelineWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Holds the timeline elements, handles the processing of obtaining and updating the elements of the timeline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class TimelineWindow extends UiComponent\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private AnchorPane backgroundOfTimeline;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e mondayTask;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e tuesdayTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e wednesdayTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e thursdayTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e fridayTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e saturdayTask;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e sundayTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e priorityTask;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e tasksWithoutDates;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ListView\u003cString\u003e reminderTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label todayLabel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label todayLabel1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private Label currentWeekLabel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String FXML \u003d \"TimelineWindow.fxml\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double mondayX \u003d 44.0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double tuesdayX \u003d 241.0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double wednesdayX \u003d 436.0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double thursdayX \u003d 633.0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double fridayX \u003d 828.0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double saturdayX \u003d 44.0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double sundayX \u003d 241.0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double weekdayY \u003d 50.0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Double weekendY \u003d 357.0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Double moveXOfDays \u003d 0.0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Double moveYOfDays \u003d 0.0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String DARK_MODE \u003d \"#373737\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String LIGHT_MODE \u003d \"#F1F1F1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String GREEN_LABEL \u003d \"-fx-border-color: #009933; -fx-border-width: 3;\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String RED_LABEL \u003d \"-fx-border-color: #FF0000; -fx-border-width: 3;\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String BACKGROUND_COLOR_DARK \u003d \"-fx-background-color: #000000;\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String BACKGROUND_COLOR_LIGHT \u003d \"-fx-background-color: #D3D3D3; -fx-border-color: #FFFFFF\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int MONDAY \u003d 6;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int TUESDAY \u003d 5;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int WEDNESDAY \u003d 4;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int THURSDAY \u003d 3;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int FRIDAY \u003d 2;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int SATURDAY \u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int SUNDAY \u003d 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int CURRENT_WEEK_INDICATOR \u003d -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int AUGUST \u003d 8;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int FIRST \u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int WEEK \u003d 7;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private LocalDate currentSundayDate;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs a UiComponent with the corresponding FXML file name and root object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The FXML file written should not have a controller attribute as this is handled by the loadFXMLFile."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param command Holds the command object of MainWindow."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param parser Holds the parser object of MainWindow."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param tasks Holds the tasks object of MainWindow."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    TimelineWindow(Command command, Parser parser, TaskList tasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        super(FXML, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        initializeTimelineComponents();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void initializeTimelineComponents() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        attachTasksListener();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        currentSundayDate \u003d LocalDate.now().with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        populateEveryDay();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        populateReminders();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        prioritizedTodayTasks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasksWithoutDates();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setDarkMode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        moveTodayLabels();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void updateDarkBackground() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        backgroundOfTimeline.setStyle(BACKGROUND_COLOR_DARK);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void updateLightBackground() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        backgroundOfTimeline.setStyle(BACKGROUND_COLOR_LIGHT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void setDarkMode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setListViewBackgroundAndTheme(mondayTask, tuesdayTask, wednesdayTask, thursdayTask, fridayTask, DARK_MODE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            BACKGROUND_COLOR_DARK);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setListViewBackgroundAndTheme(saturdayTask, sundayTask, priorityTask, tasksWithoutDates, reminderTask,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            DARK_MODE, BACKGROUND_COLOR_DARK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        updateDarkBackground();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void setLightMode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setListViewBackgroundAndTheme(mondayTask, tuesdayTask, wednesdayTask, thursdayTask, fridayTask, LIGHT_MODE,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            BACKGROUND_COLOR_LIGHT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setListViewBackgroundAndTheme(saturdayTask, sundayTask, priorityTask, tasksWithoutDates, reminderTask,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            LIGHT_MODE, BACKGROUND_COLOR_LIGHT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        updateLightBackground();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This allows the changing of the ListView colours to follow the theme."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void setListViewBackgroundAndTheme(ListView\u003cString\u003e task1, ListView\u003cString\u003e task2, ListView\u003cString\u003e task3,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                                               ListView\u003cString\u003e task4, ListView\u003cString\u003e task5, String theme,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                                               String background) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listViewComponents(task1, theme);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        task1.setStyle(background);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listViewComponents(task2, theme);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        task2.setStyle(background);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listViewComponents(task3, theme);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        task3.setStyle(background);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listViewComponents(task4, theme);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        task4.setStyle(background);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        listViewComponents(task5, theme);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        task5.setStyle(background);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method populates the ListView with prioritized tasks for the day."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void populateReminders() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e reminderTasks;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        reminderTasks \u003d FXCollections.observableArrayList(tasks.fetchReminders());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        reminderTask.setItems(reminderTasks);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method populates the ListView with prioritized tasks for the day."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void prioritizedTodayTasks() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e holdPriorityTasks;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        holdPriorityTasks \u003d FXCollections.observableArrayList(tasks.obtainPriorityList(dtf.format(now)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        priorityTask.setItems(holdPriorityTasks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method populates the ListView with prioritized tasks for the day."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void tasksWithoutDates() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e holdTasksWithoutDates;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        holdTasksWithoutDates \u003d FXCollections.observableArrayList(tasks.obtainTasksWithoutDates());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasksWithoutDates.setItems(holdTasksWithoutDates);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * This method attaches the listeners to automatically update the different parts of the GUI."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void attachTasksListener() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.getObservableListOfTasks().addListener((ListChangeListener\u003cTask\u003e) change -\u003e {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            while (change.next()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (change.wasAdded()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    populateEveryDay();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    populateReminders();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    prioritizedTodayTasks();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    tasksWithoutDates();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } else if (change.wasRemoved()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    populateEveryDay();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    populateReminders();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    prioritizedTodayTasks();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    tasksWithoutDates();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } else if (change.wasReplaced()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    populateEveryDay();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    populateReminders();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    prioritizedTodayTasks();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    tasksWithoutDates();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        tasks.getCurrentSetting().addListener((ListChangeListener\u003cInteger\u003e) change -\u003e {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            while (change.next()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                if (change.wasAdded()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    if (tasks.getCurrentSetting().get(0).equals(1)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        setLightMode();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        setDarkMode();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    changeWeek(tasks.getCurrentSetting().get(1));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                } else if (change.wasReplaced()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    if (tasks.getCurrentSetting().get(0).equals(1)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        setLightMode();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        setDarkMode();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    changeWeek(tasks.getCurrentSetting().get(1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Dynamically obtains the dates for the first semester."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void changeWeek(int chosenWeek) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        final DayOfWeek Sunday \u003d DayOfWeek.SUNDAY;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int currentYear \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        // The first day of the semester is always the first Monday in August of that year."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDate firstDay \u003d LocalDate.of(currentYear, AUGUST, FIRST);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDate firstMondayOfSemester \u003d firstDay.with(TemporalAdjusters.nextOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDate firstSundayOfSemester \u003d firstMondayOfSemester.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDate requiredSundayDate;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (chosenWeek \u003d\u003d CURRENT_WEEK_INDICATOR) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            requiredSundayDate \u003d LocalDate.now().with(TemporalAdjusters.nextOrSame(Sunday));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            todayLabel.setVisible(true);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            requiredSundayDate \u003d firstSundayOfSemester.plusDays(chosenWeek * WEEK);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            // Only displays the today highlight label if you are in the current week."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            if (requiredSundayDate.isEqual(LocalDate.now().with(TemporalAdjusters.nextOrSame(Sunday)))) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                todayLabel.setVisible(true);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                todayLabel.setVisible(false);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        currentSundayDate \u003d requiredSundayDate;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Populates the ListViews of the timeline."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void populateEveryDay() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String monday \u003d getDay(MONDAY);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        currentWeekLabel.setText(\"Your timeline for week staring with \" + monday);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String tuesday \u003d getDay(TUESDAY);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String wednesday \u003d getDay(WEDNESDAY);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String thursday \u003d getDay(THURSDAY);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String friday \u003d getDay(FRIDAY);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String saturday \u003d getDay(SATURDAY);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String sunday \u003d getDay(SUNDAY);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setTasks(monday, tuesday, wednesday, mondayTask, tuesdayTask, wednesdayTask);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setTasks(thursday, friday, saturday, thursdayTask, fridayTask, saturdayTask);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e sundayTasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(sunday));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        sundayTask.setItems(sundayTasks);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Returns date required of particular day as a String."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param dayAdjuster Holds the days to subtract from Sunday eg. to get Monday subtract 6."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private String getDay(int dayAdjuster) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return dtf.format(currentSundayDate.minusDays(dayAdjuster));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Move the today label to the current day."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void moveTodayLabels() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String shiftLocationOfHighlight \u003d dtf.format(now);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        todayLabel.setStyle(GREEN_LABEL);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        todayLabel1.setStyle(GREEN_LABEL);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (shiftLocationOfHighlight.equals(getDay(MONDAY))) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d mondayX;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekdayY;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(getDay(TUESDAY))) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d tuesdayX;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekdayY;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(getDay(WEDNESDAY))) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d wednesdayX;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekdayY;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(getDay(THURSDAY))) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d thursdayX;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekdayY;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(getDay(FRIDAY))) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d fridayX;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekdayY;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(getDay(SATURDAY))) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d saturdayX;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekendY;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            todayLabel.setStyle(RED_LABEL);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            todayLabel1.setStyle(RED_LABEL);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }  else if (shiftLocationOfHighlight.equals(getDay(SUNDAY))) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveXOfDays \u003d sundayX;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            moveYOfDays \u003d weekendY;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            todayLabel.setStyle(RED_LABEL);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            todayLabel1.setStyle(RED_LABEL);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        todayLabel.setLayoutX(moveXOfDays);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        todayLabel.setLayoutY(moveYOfDays);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets the tasks of the given day."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void setTasks(String day1, String day2, String day3, ListView\u003cString\u003e day1Task,"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                          ListView\u003cString\u003e day2Task, ListView\u003cString\u003e day3Task) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e day1Tasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(day1));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        day1Task.setItems(day1Tasks);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e day2Tasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(day2));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        day2Task.setItems(day2Tasks);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ObservableList\u003cString\u003e day3Tasks \u003d FXCollections.observableArrayList(tasks.scheduleForDay(day3));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        day3Task.setItems(day3Tasks);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets the colour of the listView components."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void listViewComponents(ListView\u003cString\u003e stringListView, String mode) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        stringListView.setCellFactory(new Callback\u003cListView\u003cString\u003e, ListCell\u003cString\u003e\u003e() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            public ListCell\u003cString\u003e call(ListView\u003cString\u003e param) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                return new ListCell\u003cString\u003e() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    protected void updateItem(String item, boolean empty) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        super.updateItem(item, empty);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        setText(item);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                        setStyle(\"-fx-control-inner-background: \" + mode + \";\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                };"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        });"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 364
    }
  },
  {
    "path": "src/main/java/chronologer/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Application Programming Interface (API) of the UI component of the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Starts the UI and JavaFX application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param primaryStage Stage created by the JavaFX system when the application first starts up."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints message on the chatbox window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param message Holds the message to be printed on the chatbot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    void print(String message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 22
    }
  },
  {
    "path": "src/main/java/chronologer/ui/UiComponent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ChronologerMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Represents a distinct UI component in the application, e.g. windows, panels, chatbox, etc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @param \u003cT\u003e Root node\u0027s type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "abstract class UiComponent\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructs a UiComponent with the corresponding FXML file name and root object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * The FXML file written should not have a controller attribute as this is handled by the loadFXMLFile."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param fxmlFileName Holds the name of the corresponding FXML file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    UiComponent(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        loadFxmlFile(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Loads the object from its corresponding FXML file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param url  Location of the FXML file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param root Root of the object hierarchy."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void loadFxmlFile(URL url, T root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        fxmlLoader.setLocation(url);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Returns the FXML file\u0027s location path for a specified FXML file name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param fxmlFileName Holds the name of the FXML file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @return FXML file\u0027\u0027s location for its corresponding FXML file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        if (fxmlFileName.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            System.out.println(\"fxmlFileName is empty\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        URL fxmlFileUrl \u003d ChronologerMain.class.getResource(FXML_FILE_FOLDER + fxmlFileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return fxmlFileUrl;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Returns the root element of this UiComponent."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    T getRoot() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 66
    }
  },
  {
    "path": "src/main/java/chronologer/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ChronologerMain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Manager of the UI component of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final Image GUI_ICON \u003d new Image(ChronologerMain.class.getResourceAsStream(\"/images/GuiLogo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private ChronologerMain main;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Constructor for the UIManager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param main Holds the main of Chronologer which contains all essential features of the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public UiManager(ChronologerMain main) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Launches the primary stage of the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        setApplicationIcon(primaryStage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            showMainWindow(primaryStage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Shows the main UI window of the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param baseStage The base stage for the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void showMainWindow(Stage baseStage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        mainWindow \u003d new MainWindow(baseStage, main);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints a message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        mainWindow.print(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets the Chronologer application\u0027s icon."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * @param baseStage The base stage for the application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private void setApplicationIcon(Stage baseStage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        baseStage.getIcons().add(GUI_ICON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 65
    }
  },
  {
    "path": "src/main/java/chronologer/ui/UiMessageHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "package chronologer.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Handles the pre-processing of strings before passing it to the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class UiMessageHandler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String CHRONOLOGER_WELCOME_MESSAGE \u003d \"Hello! I\u0027m Chronologer, your task manager!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String CHRONOLOGER_GOODBYE_MESSAGE \u003d \"Goodbye! Have a pleasant day!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    enum Manual {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        GREETING(\"Hi, this is the Chronologer manual!\\n\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DATE_FORMAT(\"For all commands with date-time, the format is - dd/MM/yyyy HHmm\\n\\n\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        TODO(\"1. Todo - todo\u003cspace\u003eyour task description eg. todo borrow books\\n\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DEADLINE(\"2. Deadline - deadline\u003cspace\u003eyour deadline description\u003cspace\u003e/by\u003cspace\u003e date-time\\n\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        EVENT(\"3. Event - event\u003cspace\u003eyour event description\u003cspace\u003e/at\u003cspace\u003e date-time-date-time\\n\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ASSIGNMENT(\"4. Assignments - assignment\u003cspace\u003e/m\u003cspace\u003emodule code\u003cspace\u003e/by\u003cspace\u003edate-time\\n\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LECTURE(\"5. Lectures - lecture\u003cspace\u003e/m\u003cspace\u003emodule code\u003cspace\u003e/at\u003cspace\u003eday of week\u003cspace\u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + \"start time-end time\\n\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        TUTORIAL(\"6. Tutorials - tutorial\u003cspace\u003e/m\u003cspace\u003emodule code\u003cspace\u003e/at\u003cspace\u003eday of week\u003cspace\u003e\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                + \"start time-end time\\n\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        EXAM(\"7. Exams - exam\u003cspace\u003e/m\u003cspace\u003emodule code\u003cspace\u003e/at\u003cspace\u003edate-time-date-time\\n\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LIST(\"8. To list out all your tasks simply enter list\\n\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DONE(\"9. Done - done\u003cspace\u003e index of the task as listed\\n\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        FIND(\"10. Find - find\u003cspace\u003eany word in the task\\n\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        DELETE(\"11. Delete - delete\u003cspace\u003e index of task as listed\\n\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        SEARCH(\"12. Search - search\u003cspace\u003eduration of task in hours\\n\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        SCHEDULE(\"13. Schedule - schedule\u003cspace\u003eindex of todo to be scheduled\u003cspace\u003e\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + \"/by\u003cspace\u003eindex of deadline to be done by OR a raw date-time input\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + \"\\teg. schedule 5 /by 4 OR schedule 5 /by 05/01/2015 0900\\n\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        SCHEDULE_RAW(\"13a. Schedule with raw duration - schedule\u003cspace\u003eduration value\u003cspace\u003e-r\u003cspace\u003e\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + \"/by\u003cspace\u003eindex of deadline OR raw date-time\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + \"\\teg. schedule 2 -r /by 4 OR schedule 2 -r /by 05/01/2015 0900\\n\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        COMMENT(\"14. Comment - comment\u003cspace\u003eindex of task as listed\u003cspace\u003eyour comment\\n\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        LOCATION(\"15. Location - location\u003cspace\u003eindex of task as listed\u003cspace\u003eyour location\\n\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        UNDO_REDO(\"16. Undo/Redo - undo or redo changes to your tasks\\n\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        THEME(\"17. Theme - theme\u003cspace\u003edark or light\\n\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        STORE(\"18. Store/Restore - store or restore\u003cspace\u003e index of storage\\n\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        EXIT(\"19. To exit, enter bye\\n\\n\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        USER_GUIDE(\"20. If still unclear, enter manual to see our user guide!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        private String instruction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Manual(String instruction) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String getInstruction() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            return instruction;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String outputForGUI \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String getOutputForGui() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return outputForGUI;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String printGreeting() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return CHRONOLOGER_WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Provides the correct message type to be printed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void outputMessage(String outputForUser) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        outputForGUI \u003d outputForUser;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Prints the user manual."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static String printHelp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        StringBuilder manualOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        for (Manual manual : Manual.values()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            manualOutput.append(manual.getInstruction());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        return manualOutput.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 79,
      "fauzt": 6
    }
  },
  {
    "path": "src/main/resources/view/ChatbotWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"653.0\" prefWidth\u003d\"372.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"614.0\" prefWidth\u003d\"369.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogBoxContainer\" prefHeight\u003d\"614.0\" prefWidth\u003d\"454.0\" style\u003d\"-fx-background-color: #444444;\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cTextField fx:id\u003d\"inputTextField\" layoutY\u003d\"613.0\" prefHeight\u003d\"0.0\" prefWidth\u003d\"298.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"74.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"298.0\" layoutY\u003d\"613.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"39.0\" prefWidth\u003d\"72.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 27
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"500.0\" style\u003d\"-fx-background-color: #444444;\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"67.0\" fitWidth\u003d\"78.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-text-fill: #ffffff;\" text\u003d\"Label\" textFill\u003d\"#090909\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"700\" resizable\u003d\"false\" title\u003d\"Chronologer\" type\u003d\"javafx.stage.Stage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cBorderPane prefHeight\u003d\"600.0\" prefWidth\u003d\"949.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                \u003cright\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"chatbotWindowHolder\" prefHeight\u003d\"600.0\" prefWidth\u003d\"329.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                \u003c/right\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"timelineWindowHolder\" prefHeight\u003d\"600.0\" prefWidth\u003d\"700.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 25
    }
  },
  {
    "path": "src/main/resources/view/TimelineWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"backgroundOfTimeline\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"653.0\" prefWidth\u003d\"1007.0\" style\u003d\"-fx-background-color: #444444;\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"14.0\" layoutY\u003d\"92.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"mondayTask\" prefHeight\u003d\"240.0\" prefWidth\u003d\"189.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"210.0\" layoutY\u003d\"92.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"tuesdayTask\" prefHeight\u003d\"240.0\" prefWidth\u003d\"185.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"406.0\" layoutY\u003d\"92.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"wednesdayTask\" prefHeight\u003d\"240.0\" prefWidth\u003d\"182.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"602.0\" layoutY\u003d\"92.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"thursdayTask\" prefHeight\u003d\"240.0\" prefWidth\u003d\"182.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"798.0\" layoutY\u003d\"92.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"fridayTask\" prefHeight\u003d\"240.0\" prefWidth\u003d\"182.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"14.0\" layoutY\u003d\"399.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"saturdayTask\" prefHeight\u003d\"238.0\" prefWidth\u003d\"182.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"210.0\" layoutY\u003d\"399.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"196.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"sundayTask\" prefHeight\u003d\"240.0\" prefWidth\u003d\"181.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"437.0\" layoutY\u003d\"399.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"186.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"priorityTask\" prefHeight\u003d\"242.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #373737; -fx-text-fill: #ffffff\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"623.0\" layoutY\u003d\"399.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"186.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"tasksWithoutDates\" prefHeight\u003d\"247.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #373737;-fx-text-fill: #ffffff\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"809.0\" layoutY\u003d\"399.0\" prefHeight\u003d\"240.0\" prefWidth\u003d\"186.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cListView fx:id\u003d\"reminderTask\" prefHeight\u003d\"246.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #373737;\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"currentWeekLabel\" layoutX\u003d\"230.0\" text\u003d\"Your timeline week starting with 00/00/0000\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"72.0\" layoutY\u003d\"54.0\" text\u003d\"Monday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"268.0\" layoutY\u003d\"54.0\" text\u003d\"Tuesday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"447.0\" layoutY\u003d\"54.0\" text\u003d\"Wednesday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"656.0\" layoutY\u003d\"54.0\" text\u003d\"Thursday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"866.0\" layoutY\u003d\"54.0\" text\u003d\"Friday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"272.0\" layoutY\u003d\"361.0\" text\u003d\"Sunday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"69.0\" layoutY\u003d\"361.0\" text\u003d\"Saturday\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"todayLabel\" layoutX\u003d\"866.0\" layoutY\u003d\"7.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-border-color: #009933; -fx-border-width: 3;\" textFill\u003d\"#787878\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"469.0\" layoutY\u003d\"328.0\" prefHeight\u003d\"78.0\" prefWidth\u003d\"122.0\" style\u003d\"-fx-wrap-text: true;\" text\u003d\"High-Medium priority tasks\" textAlignment\u003d\"JUSTIFY\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"844.0\" layoutY\u003d\"351.0\" text\u003d\"Reminders\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"22.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel layoutX\u003d\"659.0\" layoutY\u003d\"328.0\" prefHeight\u003d\"78.0\" prefWidth\u003d\"134.0\" style\u003d\"-fx-wrap-text: true;\" text\u003d\"Non-time bound tasks\" textAlignment\u003d\"JUSTIFY\" textFill\u003d\"#808080\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            \u003cFont size\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0310898"
        },
        "content": "      \u003cLabel fx:id\u003d\"todayLabel1\" layoutX\u003d\"447.0\" layoutY\u003d\"338.0\" prefHeight\u003d\"60.0\" prefWidth\u003d\"520.0\" style\u003d\"-fx-border-color: #009933; -fx-border-width: 3;\" textFill\u003d\"#787878\" /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0310898"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "E0310898": 119
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * This class implements the unit testing code for the AddCommand Test class and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * particularly tests IsClash()."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testisClash() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task2 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(testisClash.isClash(task2), true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 4,
      "-": 20,
      "fauzt": 1
    }
  },
  {
    "path": "src/test/java/AddRecurringTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.command.AddRecurringCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * Test class for adding of different school tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class AddRecurringTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private LocalDateTime startDate \u003d LocalDateTime.of(2020, 01, 12, 21, 30);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private LocalDateTime endDate \u003d LocalDateTime.of(2020, 01, 12, 22, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private String modCode \u003d \"CS2113\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private DayOfWeek day \u003d DayOfWeek.MONDAY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private AddRecurringCommand lecture \u003d new AddRecurringCommand(\"lecture\", \"lecture\", startDate, endDate, modCode,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            day);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private AddRecurringCommand tutorial \u003d new AddRecurringCommand(\"tutorial\", \"tutorial\", startDate, endDate, modCode,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            day);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private Field[] getAddRecurringCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Field[] commandFields \u003d new Field[5];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[0] \u003d command.getClass().getSuperclass().getDeclaredField(\"command\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[1] \u003d command.getClass().getSuperclass().getDeclaredField(\"taskDescription\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[2] \u003d command.getClass().getSuperclass().getDeclaredField(\"formattedStartDate\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[3] \u003d command.getClass().getSuperclass().getDeclaredField(\"formattedEndDate\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[4] \u003d command.getClass().getSuperclass().getDeclaredField(\"modCode\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[2].setAccessible(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[3].setAccessible(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        commandFields[4].setAccessible(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private void assertEqualsAddRecurringCommand(Field[] test, Field[] expected, Command testCommand,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Command expectedCommand) throws IllegalAccessException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test[2].get(testCommand), expected[2].get(expectedCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test[3].get(testCommand), expected[3].get(expectedCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test[4].get(testCommand), expected[4].get(expectedCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing parsing of lectures\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void testAddLectures() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Field[] lectureFields \u003d getAddRecurringCommandFields(lecture);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Command lectureTest \u003d ParserFactory.parse(\"lecture /m cs2113 /at sundays 2130-2200 /till 12/01/2020\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Field[] lectureTestFields \u003d getAddRecurringCommandFields(lectureTest);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        assertEqualsAddRecurringCommand(lectureFields, lectureTestFields, lecture, lectureTest);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing parsing of tutorials\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    public void testAddTutorials() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Field[] tutorialFields \u003d getAddRecurringCommandFields(tutorial);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Command tutorialTest \u003d ParserFactory.parse(\"tutorial /m cs2113 /at sundays 2130-2200 /till 12/01/2020\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Field[] tutorialTestFields \u003d getAddRecurringCommandFields(tutorialTest);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        assertEqualsAddRecurringCommand(tutorialFields, tutorialTestFields, tutorial, tutorialTest);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 72
    }
  },
  {
    "path": "src/test/java/CommentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.CommentCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "public class CommentCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid comment command creation\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidCommentCommandCreation() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        CommentCommand actualCmd \u003d new CommentCommand(1, \"this is a test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        int index \u003d actualCmd.getIndexOfTask();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String comment \u003d actualCmd.getComment();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(1, index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(\"this is a test\", comment);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid comment input\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"comment 1 testing\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid comment input\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"comment\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 37,
      "fauzt": 2
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime fromDate \u003d LocalDateTime.of(2001, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Deadline deadline \u003d new Deadline(\"test\", fromDate);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDeadlineCreation() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String title \u003d deadline.getDescription();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        LocalDateTime date \u003d deadline.getStartDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(title, \"test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(date, fromDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadline.toString(), \"[\\u2605\\u2605][D][\\u2718] test (by: 01/01/2001 0100)\");//Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    public void testDeadlinePostponement() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime newFromDate \u003d LocalDateTime.of(2003, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        deadline.setStartDate(newFromDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(deadline.getStartDate(), newFromDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 3,
      "TanYiXiang": 10,
      "fauzt": 19
    }
  },
  {
    "path": "src/test/java/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.EditCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for edit commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2, 2, 2, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File placeholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e testList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks \u003d new TaskList(testList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/EditList\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        placeholder \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/States\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history \u003d new ChronologerStateList(placeholder, placeholder, placeholder);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Test edit command basic functionality."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEdit() throws ChronologerException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task deadlineTest \u003d new Deadline(\"ABC\", LocalDateTime.of(2001, 1, 1, 1, 0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(deadlineTest);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        EditCommand command \u003d new EditCommand(0, \"CDF\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(\"CDF\", deadlineTest.getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Test the task list edit function."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testTaskListEdit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline testTask \u003d new Deadline(\"Minecraft\", testDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test.add(testTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList testList \u003d new TaskList(test);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testList.editTaskDescription(0, \"Roblox\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        test \u003d testList.getTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals(test.get(0).getDescription(), \"Roblox\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Ensure that file is deleted to prevent repetition related errors and preserve space."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void teardownSetup() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 9,
      "hanskw4267": 1,
      "TanYiXiang": 68
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Basic unit test for Event tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String EVENT \u003d \"EVENT\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime fromDate \u003d LocalDateTime.of(2001, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private LocalDateTime toDate \u003d LocalDateTime.of(2001, 2, 2, 1, 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Event event \u003d new Event(\"Test event\", fromDate, toDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEventCreation() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String title \u003d event.getDescription();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime startDate \u003d event.getStartDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime endDate \u003d event.getEndDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(title, \"Test event\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(startDate, fromDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(EVENT, event.getType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(endDate, toDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(event.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            \"[\\u2605\\u2605][E][\\u2718] Test event(at: 01/01/2001 0100-02/02/2001 0100)\");//Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEventEditing() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setIgnored(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertTrue(event.isIgnored());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setIgnored(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertFalse(event.isIgnored());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setDone(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertTrue(event.isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setDone(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertFalse(event.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Priority priority \u003d Priority.getPriorityLevel(\"HIGH\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setPriority(priority);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(event.toString(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            \"[\\u2605\\u2605\\u2605][E][\\u2718] Test event(at: 01/01/2001 0100-02/02/2001 0100)\");//Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String comment \u003d \"This is a test\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setComment(comment);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(comment, event.getComment());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEventPostponement() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime newFromDate \u003d LocalDateTime.of(2003, 1, 1, 1, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime newEndDate \u003d LocalDateTime.of(2003, 2, 2, 2, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setStartDate(newFromDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        event.setEndDate(newEndDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(event.toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            \"[\\u2605\\u2605][E][\\u2718] Test event(at: 01/01/2003 0100-02/02/2003 0200)\");//Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void whenExceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse(\"event\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 77
    }
  },
  {
    "path": "src/test/java/ExportTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.ExportCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.storage.CalendarOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.data.CalendarBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.Component;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.DateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.Property;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.component.VEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.CalScale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.DtEnd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.ProdId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.Summary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.model.property.Version;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.util.MapTimeZoneCache;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.util.RandomUidGenerator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import net.fortuna.ical4j.util.UidGenerator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for export command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class ExportTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static final String PROD_ID \u003d \"-//Chronologer//iCal4j Test 1.2//EN\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static String filePath \u003d System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/Christmas.ics\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Calendar initializeCalendar() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        calendar.getProperties().add(new ProdId(PROD_ID));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        calendar.getProperties().add(Version.VERSION_2_0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        calendar.getProperties().add(CalScale.GREGORIAN);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Convert local date time to calendar format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @param startDate The date to be converted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * @return The calendar with the converted date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private java.util.Calendar convertToCalendar(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar utilCalendar \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.YEAR, startDate.getYear());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.MONTH, startDate.getMonthValue() - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.DAY_OF_MONTH, startDate.getDayOfMonth());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.HOUR_OF_DAY, startDate.getHour());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.MINUTE, startDate.getMinute());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        utilCalendar.set(java.util.Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return utilCalendar;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse(\"export\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testFileCreation() throws ChronologerException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar testCalendar \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testCalendar.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testCalendar.set(java.util.Calendar.DAY_OF_MONTH, 25);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        VEvent christmas \u003d new VEvent(new Date(testCalendar.getTime()), \"Christmas\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Calendar calendar \u003d initializeCalendar();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        UidGenerator generator \u003d new RandomUidGenerator();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        christmas.getProperties().add(generator.generateUid());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        calendar.getComponents().add(christmas);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        CalendarOutput.outputCalendar(\"Christmas\", calendar);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Path path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertTrue(Files.exists(path));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testExportCommand() throws ChronologerException, IOException, ParserException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        System.setProperty(\"net.fortuna.ical4j.timezone.cache.impl\", MapTimeZoneCache.class.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Test\", startDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        deadline.setComment(\"Testing description\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Command export \u003d new ExportCommand(\"ExportTest\", Boolean.TRUE, Boolean.FALSE, Boolean.FALSE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        export.execute(tasks, null, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        File calendarFile \u003d new File(System.getProperty(\"user.dir\") + \"/src/ChronologerDatabase/ExportTest.ics\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        FileInputStream inputStream \u003d new FileInputStream(calendarFile);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        CalendarBuilder builder \u003d new CalendarBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Calendar calendar \u003d builder.build(inputStream);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Component component \u003d calendar.getComponents().get(0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Description deadlineDescription \u003d component.getProperty(Property.DESCRIPTION);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineDescription.getValue(), \"Testing description\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Summary deadlineSummary \u003d component.getProperty(Property.SUMMARY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineSummary.getValue(), \"Test\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DtEnd deadlineDate \u003d component.getProperty(Property.DTEND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        java.util.Calendar deadlineCalendar \u003d convertToCalendar(LocalDateTime.now().plusDays(3));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DateTime testDeadlineDate \u003d new DateTime(deadlineCalendar.getTime());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        DateTime deadlineConverted \u003d new DateTime(String.valueOf(deadlineDate.getValue()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineConverted, testDeadlineDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        calendarFile.delete();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 1,
      "TanYiXiang": 146
    }
  },
  {
    "path": "src/test/java/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.FindCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests both positive/negative cases for the tasks with a keyword that the GUI obtains."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"There are no matching tasks in your list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String PRESENT_LIST \u003d \"Here are the matching task(s) in your list:\\n1.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Todo testFindableTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets up the required components before the test is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testFindableTask \u003d new Todo(\"test keyword\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testFindCommandNegative() throws ChronologerException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command find \u003d new FindCommand(\"test\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        find.execute(testCore, null, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(UiMessageHandler.getOutputForGui(), EMPTY_LIST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testFindCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testFindableTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command find \u003d new FindCommand(\"test\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        find.execute(testCore, null, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(UiMessageHandler.getOutputForGui(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "                                PRESENT_LIST + testFindableTask.toString() + \"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 55
    }
  },
  {
    "path": "src/test/java/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ListCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests both positive/negative cases for the list that the GUI obtains."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final String EMPTY_LIST \u003d \"You have currently no tasks in your list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testListCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command list \u003d new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        list.execute(testCore, null, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(UiMessageHandler.getOutputForGui(), EMPTY_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 37
    }
  },
  {
    "path": "src/test/java/ParserFactoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Test class for parser factory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ParserFactoryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime startDate \u003d LocalDateTime.of(2001,1,1,1,0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime endDate \u003d LocalDateTime.of(2001,1,1,13,0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command event \u003d new AddCommand(\"event\", \"test\", startDate, endDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command deadline \u003d new AddCommand(\"deadline\", \"test\", startDate, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    Command todo \u003d new AddCommand(\"todo\", \"test\", null, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Field[] getAddCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields \u003d new Field[4];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"command\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"taskDescription\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2] \u003d command.getClass().getDeclaredField(\"formattedStartDate\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3] \u003d command.getClass().getDeclaredField(\"formattedEndDate\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2].setAccessible(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3].setAccessible(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void assertEqualsAddCommand(Field[] test, Field[] expected, Command testCommand, Command expectedCommand)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throws IllegalAccessException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[2].get(testCommand), expected[2].get(expectedCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[3].get(testCommand), expected[3].get(expectedCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testToDoParsing() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] todoFields \u003d getAddCommandFields(todo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command todoTest \u003d ParserFactory.parse(\"todo test\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] toDoTestFields \u003d getAddCommandFields(todoTest);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(toDoTestFields, todoFields, todoTest, todo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDeadlineParsing() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] deadlineFields \u003d getAddCommandFields(deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command deadlineTest \u003d ParserFactory.parse(\"deadline test /by 01/01/2001 0100\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] deadlineTestFields \u003d getAddCommandFields(deadlineTest);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(deadlineTestFields, deadlineFields, deadlineTest, deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testEventParsing() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] eventFields \u003d getAddCommandFields(event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command eventTest \u003d ParserFactory.parse(\"event test /at 01/01/2001 0100 - 01/01/2001 1300\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] eventTestFields \u003d getAddCommandFields(eventTest);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsAddCommand(eventTestFields, eventFields, eventTest, event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testExceptionForDeadline() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test /by\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline /by 01/01/2001 0100\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"deadline test 01/01/2001 0100\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "fauzt": 85
    }
  },
  {
    "path": "src/test/java/PostponeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.PostponeCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for postpone commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "public class PostponeTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File placeholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e testList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks \u003d new TaskList(testList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/PostponeList\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        placeholder \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/States\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history \u003d new ChronologerStateList(placeholder, placeholder, placeholder);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testPostpone() throws ChronologerException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task deadlineTest \u003d new Deadline(\"Deadline test\", LocalDateTime.of(2001, 1, 1, 1, 0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task eventTest \u003d new Event(\"Event test\", LocalDateTime.of(2002, 2, 2, 2, 0),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            LocalDateTime.of(2002, 3, 3, 3, 0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task deadlineCLashTest \u003d new Deadline(\"Deadline test\", LocalDateTime.of(2019, 12, 12,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            19, 0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(deadlineTest);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(eventTest);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(deadlineCLashTest);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        PostponeCommand command \u003d new PostponeCommand(0, LocalDateTime.of(2004, 4, 4, 4, 0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineTest.getStartDate(), LocalDateTime.of(2004, 4, 4, 4, 0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        command \u003d new PostponeCommand(1, LocalDateTime.of(2004, 4, 4, 4, 0),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            LocalDateTime.of(2005, 5, 5, 5, 0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(eventTest.getStartDate(), LocalDateTime.of(2004, 4, 4, 4, 0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(eventTest.getEndDate(), LocalDateTime.of(2005, 5, 5, 5, 0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testClash() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        PostponeCommand command \u003d new PostponeCommand(3, LocalDateTime.of(2004, 4, 4, 4, 0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testPostponeDateEarly() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        PostponeCommand command \u003d new PostponeCommand(3, LocalDateTime.of(2002, 2, 2, 2, 0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testError() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse(\"postpone\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse((\"postpone -1 24/11/2017\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse((\"postpone 2 24/11/2017 - \"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse((\"postpone 1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse((\"postpone 1 0\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void teardownSetup() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 9,
      "TanYiXiang": 97
    }
  },
  {
    "path": "src/test/java/PriorityCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.PriorityCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for priority commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class PriorityCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e testList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks \u003d new TaskList(testList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/PriorityList\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        File placeholder \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/States\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history \u003d new ChronologerStateList(placeholder, placeholder, placeholder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Test whether priority function works for corresponding strings regardless of cases."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Also test default priority value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testPriority() throws ChronologerException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task deadlineTest \u003d new Deadline(\"ABC\", LocalDateTime.of(2001, 1, 1, 1, 0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(deadlineTest);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineTest.getPriority(), Priority.MEDIUM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        PriorityCommand command \u003d new PriorityCommand(0, \"HIGH\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineTest.getPriority(), Priority.HIGH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        command \u003d new PriorityCommand(0, \"MedIum\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineTest.getPriority(), Priority.MEDIUM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        command \u003d new PriorityCommand(0, \"low\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        command.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(deadlineTest.getPriority(), Priority.LOW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Test invalid inputs for priority related commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testInvalidPriority() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            PriorityCommand test \u003d new PriorityCommand(0, \"Gibberish\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     * Ensure that file is deleted to prevent repetition related errors and preserve space."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void teardownSetup() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 7,
      "TanYiXiang": 79
    }
  },
  {
    "path": "src/test/java/PriorityListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests both positive/negative cases for priority list that the GUI obtains."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class PriorityListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static LocalDateTime byDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Deadline testDeadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        byDate \u003d LocalDateTime.of(2001, 8, 1, 1, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testDeadline \u003d new Deadline(\"Test\", byDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testDeadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testPriorityList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.getTasks().get(0).setPriority(Priority.MEDIUM);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e priorityList \u003d testCore.obtainPriorityList(\"01/08/2001\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(1, priorityList.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testNegativePriorityList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.getTasks().get(0).setPriority(Priority.LOW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e priorityList \u003d testCore.obtainPriorityList(\"01/08/2001\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(0, priorityList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 47
    }
  },
  {
    "path": "src/test/java/RemindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.RemindCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File placeholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Command reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Setups the necessary base to carry out the test operations."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/ArrayList\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        placeholder \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/States\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history \u003d new ChronologerStateList(placeholder, placeholder, placeholder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        reminder \u003d new RemindCommand(1, 5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo filler \u003d new Todo(\"1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(filler);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testReminder() throws ChronologerException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Deadline(\"test\", LocalDateTime.of(2019, 8, 1, 12, 0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(testTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        reminder.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertNotNull(testTask.getReminder());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertTrue(testTask.isReminderTrigger());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testReminderNotTriggered() throws ChronologerException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Task testTask \u003d new Event(\"test\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.of(3019, 8, 1, 12, 0),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.of(3019, 8, 2, 12, 0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(testTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        reminder.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertNotNull(testTask.getReminder());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertFalse(testTask.isReminderTrigger());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"remind\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse((\"remind 0 in 3 days\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new RemindCommand(100, 3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void teardownSetup() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 23,
      "hanskw4267": 2,
      "TanYiXiang": 2,
      "-": 17,
      "fauzt": 43
    }
  },
  {
    "path": "src/test/java/ReminderListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests both positive/negative cases for the remind list that the GUI obtains."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ReminderListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static LocalDateTime byDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Deadline testDeadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testNegativeReminder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        byDate \u003d LocalDateTime.now().plusDays(4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testDeadline \u003d new Deadline(\"Test\", byDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testDeadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e reminderList \u003d testCore.fetchReminders();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(0, reminderList.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testReminder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        byDate \u003d LocalDateTime.now().plusHours(23);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testDeadline \u003d new Deadline(\"Test\", byDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testDeadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e reminderList \u003d testCore.fetchReminders();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(1, reminderList.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 47
    }
  },
  {
    "path": "src/test/java/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests the schedule obtained for a given day is accurate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "public class ScheduleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static LocalDateTime byDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Deadline testDeadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        byDate \u003d LocalDateTime.of(2001, 3, 1, 1, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testDeadline \u003d new Deadline(\"Test\", byDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testDeadline);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testSchedule() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e scheduleReceived \u003d testCore.scheduleForDay(\"01/03/2001\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(1, scheduleReceived.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testNegativeSchedule() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        ArrayList\u003cString\u003e scheduleReceived \u003d testCore.scheduleForDay(\"01/02/2001\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(0, scheduleReceived.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 45
    }
  },
  {
    "path": "src/test/java/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.SearchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * unit test for search command feature."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Hans kurnia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": " * @version 1.1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Testing valid search Command creation\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testValidSearchCommandCreation() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        SearchCommand actualCmd \u003d new SearchCommand((long) 3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        long duration \u003d actualCmd.getDurationToFind();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertEquals((long) 3, duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with valid search input\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserValid() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"search 3\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with negative search input\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserNegative() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            ParserFactory.parse(\"search -3\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    @DisplayName(\"Test Parser with invalid search input\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    void testParserInvalidLong() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"search h\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 4,
      "hanskw4267": 28,
      "-": 16,
      "fauzt": 2
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Priority;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for storage class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private static Deadline deadlineTest \u003d new Deadline(\"Test\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        LocalDateTime.of(2019, 12, 12, 19, 0));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        ArrayList\u003cTask\u003e testList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks \u003d new TaskList(testList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/GsonTest\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        tasks.add(deadlineTest);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testSave() throws ChronologerException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        storage.saveFile(tasks.getTasks());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String jsonString \u003d Files.readString(Paths.get(String.valueOf(file)), StandardCharsets.US_ASCII);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        String expectedJson \u003d \"[{\\\"type\\\":\\\"DEADLINE\\\",\\\"description\\\":\\\"Test\\\",\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            + \"\\\"startDate\\\":{\\\"date\\\":{\\\"year\\\":2019,\\\"month\\\":12,\\\"day\\\":12},\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            + \"\\\"time\\\":{\\\"hour\\\":19,\\\"minute\\\":0,\\\"second\\\":0,\\\"nano\\\":0}},\\\"location\\\":\\\"\\\",\\\"priority\\\":\\\"MEDIUM\\\",\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            + \"\\\"reminder\\\":{\\\"reminderDate\\\":{\\\"date\\\":{\\\"year\\\":2019,\\\"month\\\":12,\\\"day\\\":11},\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            + \"\\\"time\\\":{\\\"hour\\\":19,\\\"minute\\\":0,\\\"second\\\":0,\\\"nano\\\":0}}},\\\"comment\\\":\\\"\\\",\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            + \"\\\"isIgnored\\\":false,\\\"isDone\\\":false,\\\"modCode\\\":\\\"\\\"}]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(expectedJson, jsonString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testLoad() throws ChronologerException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        testSave();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        TaskList tasks \u003d storage.loadFile(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Task task \u003d tasks.getTasks().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(task.getDescription(), deadlineTest.getDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(task.getStartDate(), deadlineTest.getStartDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(Priority.MEDIUM, task.getPriority());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    static void teardownSetup() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hanskw4267": 1,
      "TanYiXiang": 74,
      "fauzt": 1
    }
  },
  {
    "path": "src/test/java/TaskScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.TaskScheduleCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TaskScheduleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Field[] getTaskScheduleCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields \u003d new Field[4];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"durationToSchedule\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"indexOfTask\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2] \u003d command.getClass().getDeclaredField(\"indexOfDeadline\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3] \u003d command.getClass().getDeclaredField(\"deadlineDate\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2].setAccessible(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3].setAccessible(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Setups the necessary base to carry out the test operations."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/ArrayList\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"0\", startDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo filler \u003d new Todo(\"1\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(filler);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testCommandByIndexInput() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command test \u003d new TaskScheduleCommand(1, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields \u003d getTaskScheduleCommandFields(test);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long testDuration \u003d (Long) commandFields[0].get(test);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Integer testIndexOfTodo \u003d (Integer) commandFields[1].get(test);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo testTodo \u003d (Todo) tasks.getTasks().get(testIndexOfTodo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Integer testIndexOfDeadline \u003d (Integer) commandFields[2].get(test);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Deadline testDeadline \u003d (Deadline) tasks.getTasks().get(testIndexOfDeadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime testDeadlineDate \u003d (LocalDateTime) commandFields[3].get(test);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo expectedTodo \u003d (Todo) tasks.getTasks().get(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Deadline expectedDeadline \u003d (Deadline) tasks.getTasks().get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertNull(testDuration);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertSame(testTodo, expectedTodo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertSame(testDeadline, expectedDeadline);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertNull(testDeadlineDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testCommandByDateInput() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime expectedDeadlineDate \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command test \u003d new TaskScheduleCommand(1, expectedDeadlineDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields \u003d getTaskScheduleCommandFields(test);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long testDuration \u003d (Long) commandFields[0].get(test);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Integer testIndexOfTodo \u003d (Integer) commandFields[1].get(test);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo testTodo \u003d (Todo) tasks.getTasks().get(testIndexOfTodo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Integer testIndexOfDeadline \u003d (Integer) commandFields[2].get(test);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        LocalDateTime testDeadlineDate \u003d (LocalDateTime) commandFields[3].get(test);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Todo expectedTodo \u003d (Todo) tasks.getTasks().get(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertNull(testDuration);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertSame(testTodo, expectedTodo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertNull(testIndexOfDeadline);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(testDeadlineDate, expectedDeadlineDate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testIndexOutOfBoundException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(-1, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(1, -1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(2, 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(1, 2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testIndexException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(1, 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(0, 0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testDateException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            LocalDateTime exceptionDate \u003d LocalDateTime.now().minusMinutes(1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            Command test \u003d new TaskScheduleCommand(1, exceptionDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            test.execute(tasks, storage, history);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 11,
      "fauzt": 132
    }
  },
  {
    "path": "src/test/java/TaskSchedulerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.TaskScheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Tests for TaskScheduler logic and ensure it finds the correct periods and return the correct results."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class TaskSchedulerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime firstDeadlineStartDate \u003d LocalDateTime.now().plusDays(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime secondDeadlineStartDate \u003d LocalDateTime.now().plusDays(2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime firstEventStartDate \u003d LocalDateTime.now().plusDays(1).plusHours(4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime firstEventEndDate \u003d LocalDateTime.now().plusDays(1).plusHours(8);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime secondEventStartDate \u003d LocalDateTime.now().plusDays(1).plusHours(9);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime secondEventEndDate \u003d LocalDateTime.now().plusDays(1).plusHours(11);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime thirdEventStartDate \u003d LocalDateTime.now().plusDays(1).plusHours(15);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime thirdEventEndDate \u003d LocalDateTime.now().plusDays(1).plusHours(18);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime eventAtNowStartDate \u003d LocalDateTime.now().minusHours(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime eventAtNowEndDate \u003d LocalDateTime.now().plusHours(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime eventAtFirstDeadlineStartDate \u003d firstDeadlineStartDate.minusHours(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static LocalDateTime eventAtFirstDeadlineEndDate \u003d firstDeadlineStartDate.plusHours(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     * Populates the schedule with necessary tasks to carry out the test operations."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event firstEvent \u003d new Event(\"first event\", firstEventStartDate, firstEventEndDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(firstEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event secondEvent \u003d new Event(\"second event\", secondEventStartDate, secondEventEndDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(secondEvent);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event thirdEvent \u003d new Event(\"third event\", thirdEventStartDate, thirdEventEndDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        tasks.add(thirdEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private static TaskList createNewTaskList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return new TaskList(list);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testTaskSchedulerForEmptySchedule() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleByDeadline(tasks, taskDuration, firstDeadlineStartDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d \"You can schedule this task from now till the deadline.\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testTaskSchedulerForFilledSchedule() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleByDeadline(tasks, taskDuration, secondDeadlineStartDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d String.format(\"You can schedule this task from now till %s\\n\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                firstEventStartDate.format(DateTimeExtractor.DATE_FORMATTER))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + String.format(\"You can schedule this task from %s till %s\\n\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                secondEventEndDate.format(DateTimeExtractor.DATE_FORMATTER),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                thirdEventStartDate.format(DateTimeExtractor.DATE_FORMATTER))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + String.format(\"You can schedule this task from %s till %s\\n\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                thirdEventEndDate.format(DateTimeExtractor.DATE_FORMATTER),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                secondDeadlineStartDate.format(DateTimeExtractor.DATE_FORMATTER));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testSchedulingWithEventAroundNow() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        TaskList testTasks \u003d createNewTaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event testEvent \u003d new Event(\"test event\", eventAtNowStartDate, eventAtNowEndDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        testTasks.add(testEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleByDeadline(testTasks, taskDuration, firstDeadlineStartDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d String.format(\"You can schedule this task from %s till %s\\n\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                eventAtNowEndDate.format(DateTimeExtractor.DATE_FORMATTER),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                firstDeadlineStartDate.format(DateTimeExtractor.DATE_FORMATTER));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testSchedulingWithEventAroundDeadline() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        TaskList testTasks \u003d createNewTaskList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Event testEvent \u003d new Event(\"test event\", eventAtFirstDeadlineStartDate,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                eventAtFirstDeadlineEndDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        testTasks.add(testEvent);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleByDeadline(testTasks, taskDuration, firstDeadlineStartDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d String.format(\"You can schedule this task from now till %s\\n\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                eventAtFirstDeadlineStartDate.format(DateTimeExtractor.DATE_FORMATTER));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testTaskSchedulerForNoFreeSlots() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 29;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleByDeadline(tasks, taskDuration, secondDeadlineStartDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d \"There is no free slot to insert the task. Consider freeing up your schedule.\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testForExceededDuration() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 25;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleByDeadline(tasks, taskDuration, firstDeadlineStartDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d \"The duration is too long to be done within now and the deadline.\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testForExceededDurationWithHardLimit() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 24 * 30 + 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleTask(tasks, taskDuration);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d \"The duration is too long to be done within the next 30 days.\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testSchedulingForEmptyScheduleWithHardLimit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        TaskList testTasks \u003d createNewTaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleTask(testTasks, taskDuration);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d \"You can schedule this task anytime.\\n\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void testFilledScheduleWithHardLimit() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long taskDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String testOutput \u003d TaskScheduler.scheduleTask(tasks, taskDuration);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        String expectedOutput \u003d String.format(\"You can schedule this task from now till %s\\n\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                firstEventStartDate.format(DateTimeExtractor.DATE_FORMATTER))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + String.format(\"You can schedule this task from %s till %s\\n\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                secondEventEndDate.format(DateTimeExtractor.DATE_FORMATTER),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                thirdEventStartDate.format(DateTimeExtractor.DATE_FORMATTER))"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                + String.format(\"You can schedule this task from %s till %s\\n\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                thirdEventEndDate.format(DateTimeExtractor.DATE_FORMATTER),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                LocalDateTime.now().plusDays(30).format(DateTimeExtractor.DATE_FORMATTER));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue(testOutput.contains(expectedOutput));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 159
    }
  },
  {
    "path": "src/test/java/ThemeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.ThemeCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests theme functionality."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "class ThemeTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testTheme;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testThemeChange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ObservableList\u003cInteger\u003e test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets up the required components before the test is done."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public static void setup() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testTheme \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testThemeChange \u003d new TaskList(testTheme);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        test \u003d testThemeChange.getCurrentSetting();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testPresetTheme() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        int indexOfThemeInObservableList \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(0, test.get(indexOfThemeInObservableList));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testThemeChange() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String messageToUser \u003d testThemeChange.updateTheme(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"Theme changed!\", messageToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testThemeRepeat() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        String messageToUser \u003d testThemeChange.updateTheme(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"Theme cannot be changed!\", messageToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(4)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testThemeCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command theme \u003d new ThemeCommand(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        theme.execute(testThemeChange, null, null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"Theme changed!\", UiMessageHandler.getOutputForGui());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 64
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.DateTimeExtractor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.parser.ParserFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the To-do class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Todo todo \u003d new Todo(\"testing todo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testTodoCreation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "        String title \u003d todo.getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(title, \"testing todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(todo.toString(), \"[\\u2605\\u2605][T][\\u2718] testing todo\"); //Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    public void whenExceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            ParserFactory.parse(\"todo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testTodoWithinPeriod() throws ChronologerException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime from;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime to;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            from \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 0800\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            to \u003d DateTimeExtractor.extractDateTime(\"01/01/2019 2200\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Todo newTodo \u003d new Todo(\"testTodo\", from, to);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "            Assertions.assertEquals(newTodo.getStartDate(), from);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "            throw new ChronologerException(ChronologerException.wrongDateOrTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 10,
      "hanskw4267": 3,
      "TanYiXiang": 3,
      "-": 27,
      "fauzt": 6
    }
  },
  {
    "path": "src/test/java/UndoRedoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.RedoCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.UndoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests undo/redo functionality."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "class UndoRedoTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File v1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File v2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File v3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Todo testUndoableTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets up the required components before the test is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testUndoableTask \u003d new Todo(\"testVersion\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/Test\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        v1 \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/v1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        v2 \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/v2\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        v3 \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/v3\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history \u003d new ChronologerStateList(v1, v2, v3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState(testCore.getTasks());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testRedo() throws ChronologerException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testUndoableTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState(testCore.getTasks());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.updateListOfTasks(history.undo());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.updateListOfTasks(history.redo());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(1, testCore.getTasks().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        // Revert to original state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.updateListOfTasks(history.undo());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testUndo() throws ChronologerException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.add(testUndoableTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.addState(testCore.getTasks());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore.updateListOfTasks(history.undo());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(0, testCore.getTasks().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(3)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testRedoCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command redo \u003d new RedoCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        redo.execute(testCore, storage, history);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"Redo successful!\", UiMessageHandler.getOutputForGui());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(4)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testUndoCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command undo \u003d new UndoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        undo.execute(testCore, storage, history);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"Undo successful!\", UiMessageHandler.getOutputForGui());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void teardownSetup() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        assert file.delete();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 102
    }
  },
  {
    "path": "src/test/java/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.StoreVersionCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.RestoreVersionCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.ChronologerStateList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests version storing and restoring functionality."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "class VersionTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File v1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File v2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static File v3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ChronologerStateList history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testStore;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCurrent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testRestore;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testVersionCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testVersion;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static Todo testVersionTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets up the required components before the test is done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testStore \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCurrent \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testRestore \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testVersionTask \u003d new Todo(\"testVersion\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testVersion \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testStore.add(testVersionTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testRestore.add(testVersionTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testRestore.add(testVersionTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testVersionCommand \u003d new TaskList(testVersion);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        file \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/Test\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        v1 \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/v1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        v2 \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/v2\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        v3 \u003d new File(System.getProperty(\"user.dir\") + \"/src/test/v3\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history \u003d new ChronologerStateList(v1, v2, v3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        storage \u003d new Storage(file);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testStoreVersion() throws ChronologerException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.storeVersion(testStore,1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCurrent \u003d history.restoreVersion(testCurrent,1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(1, testCurrent.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testRestoreVersion() throws ChronologerException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        history.storeVersion(testRestore,2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCurrent \u003d history.restoreVersion(testCurrent,2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(2, testCurrent.size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testStoreVersionCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command store \u003d new StoreVersionCommand(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        store.execute(testVersionCommand, storage, history);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testVersionCommand.updateListOfTasks(history.restoreVersion(testVersionCommand.getTasks(),1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(0, testVersionCommand.getSize());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testRestoreVersionCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command restore \u003d new RestoreVersionCommand(2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        restore.execute(testVersionCommand, storage, history);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(2, testVersionCommand.getSize());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void teardownSetup() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        assert v1.delete();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        assert v2.delete();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 101
    }
  },
  {
    "path": "src/test/java/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * This class implements the unit testing code for the ViewCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @version v1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hanskw4267"
        },
        "content": "    private LocalDateTime testDate \u003d LocalDateTime.of(2019, 9, 23, 2, 2, 2, 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testView() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline task1 \u003d new Deadline(\"tester\", testDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e testIfNull \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        test.add(task1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList testisClash \u003d new TaskList(test);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testIfNull \u003d testisClash.schedule(\"23/09/2019\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertTrue((testIfNull.size() \u003e 0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 5,
      "hanskw4267": 3,
      "-": 22,
      "fauzt": 1
    }
  },
  {
    "path": "src/test/java/WeekTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.command.WeekCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import chronologer.ui.UiMessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0310898"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0310898"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * Tests week command functionality."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0310898"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @author Sai Ganesh Suresh"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0310898"
        },
        "content": " * @version v1.4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0310898"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0310898"
        },
        "content": "class WeekTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static ArrayList\u003cTask\u003e testCoreList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static TaskList testCore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static String outputMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    private static final int CURRENT_WEEK_INDICATOR \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     * Sets up the required components before the test is done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0310898"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCoreList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        testCore \u003d new TaskList(testCoreList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(1)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testValidWeek() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        outputMessage \u003d testCore.updateWeek(CURRENT_WEEK_INDICATOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"You are viewing the same week!\", outputMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    @Order(2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    public void testWeekCommand() throws ChronologerException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Command week \u003d new WeekCommand(CURRENT_WEEK_INDICATOR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        week.execute(testCore, null, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0310898"
        },
        "content": "        Assertions.assertEquals(\"You are viewing the same week!\", UiMessageHandler.getOutputForGui());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0310898"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0310898"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0310898"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0310898": 51
    }
  },
  {
    "path": "src/test/java/chronologer/parser/EditParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.EditCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for edit parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class EditParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Field[] getEditCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Field[] commandFields \u003d new Field[2];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"indexOfTask\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"newDescription\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void assertEqualsTaskScheduleCommand(Field[] test, Field[] expected, Command testCommand,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                                                 Command expectedCommand) throws IllegalAccessException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEditParser() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        EditParser editParser \u003d new EditParser(\"edit 2 test something\", \"edit\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Command testEditCommand \u003d editParser.parse();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Command expectedEditCommand \u003d new EditCommand(1, \"test something\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Field[] editTestFields \u003d getEditCommandFields(testEditCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Field[] editFields \u003d getEditCommandFields(expectedEditCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(1, editParser.indexOfTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assertEqualsTaskScheduleCommand(editTestFields, editFields, testEditCommand, expectedEditCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEmptyDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            new EditParser(\"edit 1\", \"edit\").parse();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEmptyIndex() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            new EditParser(\"edit\", \"edit\").parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testNegativeIndex() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse((\"edit -1 New description\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 68
    }
  },
  {
    "path": "src/test/java/chronologer/parser/PriorityParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.command.PriorityCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * Test class for priority parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @author Tan Yi Xiang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " * @version V1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "class PriorityParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private Field[] getPriorityCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Field[] commandFields \u003d new Field[2];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"indexOfTask\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"priorityString\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    private void assertEqualsPriorityCommand(Field[] test, Field[] expected, Command testCommand,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "                                            Command expectedCommand) throws IllegalAccessException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testPriorityParser() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        PriorityParser priorityParser \u003d new PriorityParser(\"priority 1 high\", \"priority\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Command testCommand \u003d priorityParser.parse();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Command expectedCommand \u003d new PriorityCommand(0, \"high\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Field[] priorityTestFields \u003d getPriorityCommandFields(testCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Field[] priorityFields \u003d getPriorityCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertEquals(0, priorityParser.indexOfTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        assertEqualsPriorityCommand(priorityTestFields, priorityFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testEmptyIndex() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse(\"priority\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    void testNegativeIndex() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "            ParserFactory.parse((\"priority -1 low\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanYiXiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanYiXiang": 61
    }
  },
  {
    "path": "src/test/java/chronologer/parser/ScheduleParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fauzt"
        },
        "content": "package chronologer.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.command.TaskScheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import chronologer.exception.ChronologerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fauzt"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fauzt"
        },
        "content": "//@@author fauzt"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fauzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * Tests for ScheduleParser when receiving schedule instructions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fauzt"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @author Fauzan Adipratama"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fauzt"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fauzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fauzt"
        },
        "content": "public class ScheduleParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    LocalDateTime deadlineDate \u003d LocalDateTime.of(2019,11,10,12,0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private Field[] getTaskScheduleCommandFields(Command command) throws NoSuchFieldException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] commandFields \u003d new Field[4];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0] \u003d command.getClass().getDeclaredField(\"durationToSchedule\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1] \u003d command.getClass().getDeclaredField(\"indexOfTask\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2] \u003d command.getClass().getDeclaredField(\"indexOfDeadline\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3] \u003d command.getClass().getDeclaredField(\"deadlineDate\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[0].setAccessible(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[1].setAccessible(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[2].setAccessible(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        commandFields[3].setAccessible(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        return commandFields;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    private void assertEqualsTaskScheduleCommand(Field[] test, Field[] expected, Command testCommand,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fauzt"
        },
        "content": "                                                 Command expectedCommand)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            throws IllegalAccessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[0].get(testCommand), expected[0].get(expectedCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[1].get(testCommand), expected[1].get(expectedCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[2].get(testCommand), expected[2].get(expectedCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(test[3].get(testCommand), expected[3].get(expectedCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testParseTodoIndexAndDeadlineIndex() throws ChronologerException, NoSuchFieldException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            IllegalAccessException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ScheduleParser testParser \u003d new ScheduleParser(\"schedule 2 /by 1\", \"schedule\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command testCommand \u003d testParser.parse();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command expectedCommand \u003d new TaskScheduleCommand(1, 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleTestFields \u003d getTaskScheduleCommandFields(testCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleFields \u003d getTaskScheduleCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(1, testParser.indexOfTask);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsTaskScheduleCommand(scheduleTestFields, scheduleFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testParseTodoIndexAndDeadlineDate() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ScheduleParser testParser \u003d new ScheduleParser(\"schedule 2 /by 10/11/2019 1200\", \"schedule\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command testCommand \u003d testParser.parse();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command expectedCommand \u003d new TaskScheduleCommand(1, deadlineDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleTestFields \u003d getTaskScheduleCommandFields(testCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleFields \u003d getTaskScheduleCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(1, testParser.indexOfTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsTaskScheduleCommand(scheduleTestFields, scheduleFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testParseTodoIndexAndNoDate() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ScheduleParser testParser \u003d new ScheduleParser(\"schedule 2\", \"schedule\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command testCommand \u003d testParser.parse();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command expectedCommand \u003d new TaskScheduleCommand(1, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleTestFields \u003d getTaskScheduleCommandFields(testCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleFields \u003d getTaskScheduleCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertEquals(1, testParser.indexOfTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsTaskScheduleCommand(scheduleTestFields, scheduleFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testParseDurationAndDeadlineIndex() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ScheduleParser testParser \u003d new ScheduleParser(\"schedule 2 -r /by 1\", \"schedule\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command testCommand \u003d testParser.parse();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long expectedDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command expectedCommand \u003d new TaskScheduleCommand(expectedDuration, 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleTestFields \u003d getTaskScheduleCommandFields(testCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleFields \u003d getTaskScheduleCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsTaskScheduleCommand(scheduleTestFields, scheduleFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testParseDurationAndDeadlineDate() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ScheduleParser testParser \u003d new ScheduleParser(\"schedule 2 -r /by 10/11/2019 1200\", \"schedule\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command testCommand \u003d testParser.parse();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long expectedDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command expectedCommand \u003d new TaskScheduleCommand(expectedDuration, deadlineDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleTestFields \u003d getTaskScheduleCommandFields(testCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleFields \u003d getTaskScheduleCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsTaskScheduleCommand(scheduleTestFields, scheduleFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testParseDurationAndNoDate() throws ChronologerException, NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        ScheduleParser testParser \u003d new ScheduleParser(\"schedule 2 -r\", \"schedule\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command testCommand \u003d testParser.parse();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Long expectedDuration \u003d (long) 2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Command expectedCommand \u003d new TaskScheduleCommand(expectedDuration, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleTestFields \u003d getTaskScheduleCommandFields(testCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Field[] scheduleFields \u003d getTaskScheduleCommandFields(expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        assertEqualsTaskScheduleCommand(scheduleTestFields, scheduleFields, testCommand, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testExceptionsForEmptyParameters() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule \", \"schedule\").parse();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule /by \", \"schedule\").parse();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule 2 /by \", \"schedule\").parse();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule /by 1\", \"schedule\").parse();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testExceptionsForInvalidParameters() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule a /by 1 \", \"schedule\").parse();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule 2 /by a\", \"schedule\").parse();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule 2 /by aa/aa/aaaa\", \"schedule\").parse();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fauzt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    void testExceptionsForInvalidDates() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule 2 /by 00/00/0000 0000\", \"schedule\").parse();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        Assertions.assertThrows(ChronologerException.class, () -\u003e {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fauzt"
        },
        "content": "            new ScheduleParser(\"schedule 2 /by 12/10/2019\", \"schedule\").parse();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fauzt"
        },
        "content": "        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fauzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fauzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fauzt": 156
    }
  }
]
