[
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * This class is created to work around a bug in Shadow. Check stackoverflow.com/questions/52569724/javafx-11-create-a-jar-file-with-gradle/52571719#52571719"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        Launcher.main(args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/duke/command/AddOrderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to add an \u003ccode\u003eOrder\u003c/code\u003e object to an \u003ccode\u003eOrderList\u003c/code\u003e object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AddOrderCommand(Order toAdd) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addOrder(toAdd, bakingList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Order added\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingList.getOrderList().remove(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Undo: Add order\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Redo: Add order\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void addOrder(Order order, BakingList bakingList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        bakingList.getOrderList().add(0, order);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17,
      "-": 29
    }
  },
  {
    "path": "src/main/java/duke/command/AddSaleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class AddSaleCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale sale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public AddSaleCommand(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sale \u003d new Sale();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        addSale(sale, bakingList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingList.getSaleList().remove(sale);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void addSale(Sale sale, BakingList bakingList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingList.getSaleList().add(0, sale);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "chekjun": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command that is executable by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param bakingList A BakingList object containing application data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param storage    A Storage object specifying the location of the data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param ui         A UI controller object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException If the execution fails."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteOrderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to set the status of an \u003ccode\u003eOrder\u003c/code\u003e object to \u003ccode\u003eCOMPLETED\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CompleteOrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param params The parameters specifying details of the order."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public CompleteOrderCommand(Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        orders \u003d CommandParser.getOrders(bakingList.getOrderList(), params);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            order.setStatus(Order.Status.COMPLETED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteOrderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to remove an \u003ccode\u003eOrder\u003c/code\u003e object from an \u003ccode\u003eOrderList\u003c/code\u003e object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cOrder\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cInteger\u003e toDeleteIndexes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DeleteOrderCommand(int... index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c index.length; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            toDeleteIndexes.add(index[i]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DeleteOrderCommand(int start, int end) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            toDeleteIndexes.add(i);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DeleteOrderCommand(List\u003cInteger\u003e toDeleteIndexes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.toDeleteIndexes \u003d toDeleteIndexes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d 0; i \u003c toDeleteIndexes.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingList.getOrderList().add(toDeleteIndexes.get(i), toDelete.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Undo: Remove order\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Redo: Remove order\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i : toDeleteIndexes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (i \u003e\u003d bakingList.getOrderList().size() || i \u003c 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(Message.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            toDelete.add(bakingList.getOrderList().get(i));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingList.getOrderList().removeAll(toDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Order removed\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 37,
      "-": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteSaleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class DeleteSaleCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale sale;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public DeleteSaleCommand(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        checkParameters();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.sale \u003d CommandParser.getSaleByIndexOrId(bakingList.getSaleList(), params);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.index \u003d CommandParser.getSaleIndex(bakingList.getSaleList(), params);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingList.getSaleList().remove(sale);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        bakingList.getSaleList().add(index, sale);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void checkParameters() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (!(params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                ^ params.containsKey(\"i\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                ^ params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Too many parameters\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (!params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u0026\u0026 !params.containsKey(\"i\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u0026\u0026 !params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Too few parameters\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale getSale(List\u003cSale\u003e sales) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"secondary\") || params.containsKey(\"i\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return getSaleByIndexParameter(sales);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else if (params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please specify an order\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale getSaleByIndexParameter(List\u003cSale\u003e sales) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String indexParameter;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            indexParameter \u003d params.get(\"secondary\").get(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            indexParameter \u003d params.get(\"i\").get(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            index \u003d Integer.parseInt(indexParameter) - 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return sales.get(index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please enter a valid index.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (IndexOutOfBoundsException i) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Index out of bound\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "chekjun": 84
    }
  },
  {
    "path": "src/main/java/duke/command/EditOrderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to edit the properties of an \u003ccode\u003eOrder\u003c/code\u003e object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EditOrderCommand extends OrderCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Order order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Order unmodifiedOrder \u003d new Order();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param params the parameters specifying details of the order."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditOrderCommand(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(params.containsKey(\"i\") \u003d\u003d !params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please specify order ID or index\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public EditOrderCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        copyOrder(order, unmodifiedOrder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order \u003d getOrder(bakingList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CommandParser.modifyOrdrer(params, order);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order \u003d getOrder(bakingList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        copyOrder(unmodifiedOrder, order);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CommandParser.modifyOrdrer(params, order);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Order getOrder(BakingList bakingList) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (params.containsKey((\"i\"))) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return getOrderByIndex(bakingList, params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return getOrderById(bakingList, params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Order getOrderById(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        long id;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            id \u003d Long.parseLong(params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please provide a valid order ID\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Order order : bakingList.getOrderList()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (order.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                return order;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeException(\"Unknown ID\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Order getOrderByIndex(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d Integer.parseInt(params.get(\"i\").get(0)) - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please provide a valid index\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d bakingList.getOrderList().size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Index out of bound.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return bakingList.getOrderList().get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void copyOrder(Order to, Order from) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.setStatus(from.getStatus());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.setDeliveryDate(from.getDeliveryDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.setCustomerContact(from.getCustomerContact());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.setCustomerName(from.getCustomerName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.setRemarks(from.getRemarks());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.setId(from.getId());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        to.getItems().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Map.Entry\u003cString, Integer\u003e entry : from.getItems().entrySet()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            to.addItem(entry.getKey(), entry.getValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 38,
      "-": 78
    }
  },
  {
    "path": "src/main/java/duke/command/EditSaleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.decrypted.CommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class EditSaleCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale sale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale unmodifiedSale \u003d new Sale();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public EditSaleCommand(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (!(params.containsKey(\"i\") \u003d\u003d !params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please specify order ID or index\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sale \u003d getSale(bakingList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        copySale(unmodifiedSale, sale);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        copySale(sale, unmodifiedSale);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshSaleList(bakingList.getSaleList(), bakingList.getSaleList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        sale \u003d getSale(bakingList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        CommandParser.modifySale(params, sale);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale getSale(BakingList bakingList) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey((\"i\"))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return getSaleByIndex(bakingList, params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return getSaleById(bakingList, params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale getSaleById(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        long id;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            id \u003d Long.parseLong(params.get(\"id\").get(0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please provide a valid order ID\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Sale sale : bakingList.getSaleList()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            if (sale.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                return sale;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        throw new DukeException(\"Unknown ID\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Sale getSaleByIndex(BakingList bakingList, String i) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            index \u003d Integer.parseInt(params.get(\"i\").get(0)) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please provide a valid index\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d bakingList.getSaleList().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Index out of bound.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return bakingList.getSaleList().get(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void modifySale(Sale sale, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"desc\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setDescription(params.get(\"desc\").get(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"contact\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setValue(Double.parseDouble(params.get(\"value\").get(0)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"rmk\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setRemarks(params.get(\"rmk\").get(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"at\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setSaleDate(TimeParser.convertStringToDate(params.get(\"at\").get(0)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void copySale(Sale to, Sale from) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        to.setId(from.getId());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        to.setDescription(from.getDescription());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        to.setValue(from.getValue());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        to.setSaleDate(from.getSaleDate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        to.setRemarks(from.getRemarks());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "chekjun": 112
    }
  },
  {
    "path": "src/main/java/duke/command/ExecuteShortcutCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.decrypted.OldParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command to execute a user-defined set of commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ExecuteShortcutCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cCommand\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param lines A list containing user inputs. Each entry represents a line of user input is to be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *              converted to a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DukeException if fails to convert any line into a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ExecuteShortcutCommand(@JsonProperty(\"lines\") List\u003cString\u003e lines) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                Command command \u003d OldParser.getCommand(line.strip(), new HashMap\u003cString, ExecuteShortcutCommand\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                commands.add(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //TODO: Improve catching"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Error when adding shortcut: \" + e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ListIterator\u003cCommand\u003e itr \u003d commands.listIterator(commands.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        while (itr.hasPrevious()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Command command \u003d itr.previous();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                ((UndoableCommand) command).undo(bakingList, storage, ui);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Undo: Execute shortcut\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Redo: Execute shortcut\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (Command command : commands) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            command.execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Shortcut executed successfully\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns a list containing user inputs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @return A list containing user inputs. Each entry represents a line of user input is to be converted to"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cString\u003e getLines() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Sets a set of inputs to be converted to \u003ccode\u003eCommand\u003c/code\u003e objects."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param lines A list containing user inputs. Each entry represents a line of user input is to be"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *              converted to a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setLines(List\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 81,
      "liushiru": 8
    }
  },
  {
    "path": "src/main/java/duke/command/OrderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public abstract class OrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"order\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5
    }
  },
  {
    "path": "src/main/java/duke/command/RedoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command that restores any actions that have been previously undone using undo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 3,
      "chekjun": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/command/SetShortcutCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * A command to set a new shortcut. A shortcut is a set of user-defined commands that can be executed by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * entering the shortcut keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class SetShortcutCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private ExecuteShortcutCommand unmodifiedExecuteShortCutCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Set\u003cString\u003e reservedWords \u003d Set.of("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \"undo\", \"redo\", \"order\", \"recipe\", \"add\", \"remove\", \"edit\", \"done\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param line A line of user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DukeException if shortcut name contains the application\u0027s reserved words."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public SetShortcutCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        splitIntoLines(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (containsReservedWords(name)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Cannot contain reserved words\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (unmodifiedExecuteShortCutCommand \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            System.out.println(\"here\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingList.getShortcuts().remove(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            bakingList.getShortcuts().put(name, unmodifiedExecuteShortCutCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Undo: Set shortcut\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Redo: Set shortcut\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ExecuteShortcutCommand executeShortcutCommand \u003d new ExecuteShortcutCommand(lines);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (bakingList.getShortcuts().containsKey(name)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            unmodifiedExecuteShortCutCommand \u003d bakingList.getShortcuts().get(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        bakingList.getShortcuts().put(name, executeShortcutCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ui.showMessage(\"Shortcut added\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private void splitIntoLines(String line) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"^\\\\w+\\\\s+(\\\\w+)\\\\s+\\\\\\\"(.*?)\\\\\\\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(line);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Please enter valid parameters\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.name \u003d matcher.group(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.lines \u003d Arrays.asList(matcher.group(2).split(\";\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private boolean containsReservedWords(String str) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return reservedWords.contains(str.strip());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 82,
      "liushiru": 2
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A command that reverses the action of an earlier action."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 3,
      "chekjun": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/duke/command/UndoableCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * UndoableCommand is the abstract base class for all commands that supports redo and undo operations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Reverses the action of an earlier action."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param bakingList A BakingList object containing application data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param storage    A Storage object specifying the location of the data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param ui         A UI controller object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DukeException If data file is damaged."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Restores any actions that have been previously undone using undo."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param bakingList A BakingList object containing application data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param storage    A Storage object specifying the location of the data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param ui         A UI controller object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DukeException If data file is damaged."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 20,
      "chekjun": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/command/recipe/AddRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.command.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.entities.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.entities.recipe.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public AddRecipeCommand(Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Execute the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param bakingList A BakingList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param storage    A Storage object which specifies the location of the data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param ui         A Ui object capable of controlling GUI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws DukeException If the execution fails."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        recipe \u003d getRecipe();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        addRecipe(recipe, bakingList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ui.refreshRecipeListPage(bakingList.getRecipeList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private void addRecipe(Recipe recipe, BakingList bakingList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingList.getRecipeList().add(0, recipe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Recipe getRecipe() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (params.containsKey(\"name\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            Recipe recipe \u003d new Recipe(params.get(\"name\").get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (params.containsKey(\"ingt\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                //check if it is in the existing ingredient list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                for (int i \u003d 0; i \u003c params.get(\"ingt\").size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    recipe.addIngredient(new Ingredient(params.get(\"ingt\").get(i)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            if (params.containsKey(\"step\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                for (int i \u003d 0; i \u003c params.get(\"step\").size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    recipe.addStep(new Step(params.get(\"step\").get(i)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return recipe;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        System.out.println(\"AddRecipeCommand.java function execute return null\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 70
    }
  },
  {
    "path": "src/main/java/duke/command/recipe/DeleteRecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.command.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.command.UndoableCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.entities.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class DeleteRecipeCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e params;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public DeleteRecipeCommand(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.params \u003d params;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Execute the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param bakingList A BakingList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param storage    A Storage object which specifies the location of the data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @param ui         A Ui object capable of controlling GUI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * @throws DukeException If the execution fails."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void execute(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.recipe \u003d getRecipe(bakingList.getRecipeList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        bakingList.getRecipeList().remove(recipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ui.refreshRecipeListPage(bakingList.getRecipeList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Recipe getRecipe(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            String indexParams \u003d params.get(\"secondary\").get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            return recipes.get(Integer.parseInt(indexParams));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        System.out.println(\"DeleteRecipeCommand function getRecipe return null\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void undo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void redo(BakingList bakingList, Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 59
    }
  },
  {
    "path": "src/main/java/duke/commons/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Message {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"This is an unknown command.\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Command format is wrong.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Prefix does not exists.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is invalid.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY \u003d \"Item name or quantity is not specified.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_FORMAT \u003d \"Number format is invalid.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d \"Range is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 7,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/commons/Utility.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import org.ocpsoft.prettytime.shade.edu.emory.mathcs.backport.java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public final class Utility {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void checkParameters(Map\u003cString, List\u003cString\u003e\u003e parameters, String[] acceptedParameters, Boolean hasPrimary, Boolean hasSecondary)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!hasPrimary \u0026\u0026 parameters.keySet().contains(\"primary\")) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Invalid parameter: \" + \"primary\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!hasSecondary \u0026\u0026 parameters.keySet().contains(\"secondary\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Invalid parameter: \" + \"secondary\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Set\u003cString\u003e acceptedSet \u003d new HashSet\u003cString\u003e(Arrays.asList(acceptedParameters));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        acceptedSet.add(\"line\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        acceptedSet.add(\"primary\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        acceptedSet.add(\"secondary\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        acceptedSet.add(\"cmd\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String key : parameters.keySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (!acceptedSet.contains(key)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Invalid parameter: \" + key);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 32
    }
  },
  {
    "path": "src/main/java/duke/entities/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "package duke.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image picture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private int expiryPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient(@JsonProperty String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public Ingredient(String name, double cost) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /////////////"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //For UI design purpose"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /////////////"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d \"cheese\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        expiryPeriod \u003d 365;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        cost \u003d 22.02;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //setPicture(\"cheese\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getExpiryPeriod() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return expiryPeriod;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setExpiryPeriod(int expiryPeriod) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.expiryPeriod \u003d expiryPeriod;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setCost(double cost) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "/*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setPicture (String pic_name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "             this.picture \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    new Image(new FileInputStream(currentDir + \"\\\\src\\\\main\\\\resources\\\\images\\\\\" + pic_name +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                            \".png\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": "*/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Image getPicture() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.picture;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 12,
      "Lim Wen Han Eugene": 10,
      "-": 53
    }
  },
  {
    "path": "src/main/java/duke/entities/Order.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static enum Status {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ACTIVE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        COMPLETED,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        CANCELED"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private long id \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private String customerName \u003d \"customer\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String customerContact \u003d \"N/A\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date deliveryDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Map\u003cString, Integer\u003e items \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String remarks \u003d \"N/A\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Status status \u003d Status.ACTIVE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order(@JsonProperty(\"customerName\") String customerName,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                 @JsonProperty(\"customerContact\") String customerContact,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                 @JsonProperty(\"deliveryDate\") Date deliveryDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.customerContact \u003d customerContact;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addItem(String itemName, int quantity) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        items.put(itemName, quantity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCustomerName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return customerName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCustomerContact() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return customerContact;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDeliveryDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return deliveryDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cString, Integer\u003e getItems() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return items;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCustomerName(String customerName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (customerName.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.customerName \u003d \"N/A\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCustomerContact(String customerContact) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (customerContact.equals(\"\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.customerContact \u003d \"N/A\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.customerContact \u003d customerContact;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDeliveryDate(Date deliveryDate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deliveryDate \u003d deliveryDate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setItems(Map\u003cString, Integer\u003e items) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.items \u003d items;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (remarks.equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.remarks \u003d \"N/A\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setId(long id) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setStatus(Status status) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 31,
      "-": 78
    }
  },
  {
    "path": "src/main/java/duke/entities/Sale.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class Sale {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private long id \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String description \u003d \"description\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private double value \u003d 0.0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private Date saleDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private String remarks \u003d \"N/A\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Sale() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Sale(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                @JsonProperty(\"value\") double value,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                @JsonProperty(\"saleDate\") Date saleDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public Date getSaleDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return saleDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public String getRemarks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return remarks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setId(long id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setValue(double value) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSaleDate(Date saleDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleDate \u003d saleDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setRemarks(String remarks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.remarks \u003d remarks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 67
    }
  },
  {
    "path": "src/main/java/duke/entities/inventory/InventoryList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "package duke.entities.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    private LinkedHashMap\u003cIngredient, Integer\u003e InventoryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    InventoryList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        InventoryList \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    InventoryList(LinkedHashMap\u003cIngredient, Integer\u003e Ingredients) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        this.InventoryList \u003d Ingredients;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public LinkedHashMap\u003cIngredient, Integer\u003e getInventoryList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        return InventoryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public void add(Ingredient ingredient, int quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        InventoryList.put(ingredient, quantity);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public void remove(Ingredient ingredient) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        InventoryList.remove(ingredient);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lim Wen Han Eugene": 30
    }
  },
  {
    "path": "src/main/java/duke/entities/inventory/ShoppingList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "package duke.entities.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "public class ShoppingList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    private LinkedHashMap\u003cIngredient, Integer\u003e ShoppingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    ShoppingList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        ShoppingList \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    ShoppingList(LinkedHashMap\u003cIngredient, Integer\u003e Ingredients) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        this.ShoppingList \u003d Ingredients;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public LinkedHashMap\u003cIngredient, Integer\u003e getInventoryList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        return ShoppingList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public void add(Ingredient ingredient, int quantity) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        ShoppingList.put(ingredient, quantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    public void remove(Ingredient ingredient) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        ShoppingList.remove(ingredient);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lim Wen Han Eugene": 29
    }
  },
  {
    "path": "src/main/java/duke/entities/recipe/Recipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.entities.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private List\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private List\u003cStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private double cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private int difficultyLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Recipe(@JsonProperty String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Recipe() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recipe init() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d \"Cheese Cake\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cStep\u003e stepList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Step step1 \u003d new Step(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        step1.init();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        stepList.add(step1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.steps \u003d stepList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredients.add(new Ingredient(\"cream\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        ingredients.add(new Ingredient(\"cheese\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        cost \u003d 20.22;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        difficultyLevel \u003d 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d 40;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        int time \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (Step step : steps) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            time +\u003d step.getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public int getDifficultyLevel() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return difficultyLevel;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cIngredient\u003e getIngredients() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.ingredients;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStep\u003e getSteps() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.steps;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredients.add(ingredient);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void addStep(Step step) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        steps.add(step);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 35,
      "-": 46,
      "Lim Wen Han Eugene": 1
    }
  },
  {
    "path": "src/main/java/duke/entities/recipe/Step.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.entities.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int time; //in minutes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Step() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Step(@JsonProperty String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d parseTime(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cIngredient\u003e parseIngredient(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        //Assume able to return a list of integer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003cIngredient\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int parseTime(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Step init() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        description \u003d \"add cream to cheese\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d 30;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 9,
      "-": 34,
      "Lim Wen Han Eugene": 1
    }
  },
  {
    "path": "src/main/java/duke/entities/recipe/recipeIngredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": "package duke.entities.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": "public class recipeIngredient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private Ingredient ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public recipeIngredient(Ingredient ingredient, @JsonProperty String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public Ingredient getIngredient() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liushiru": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/CommandManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.RedoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.UndoableCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Manager class of commands. An undo stack and redo stack is managed by CommandManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandManager {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cUndoableCommand\u003e undoStack \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cUndoableCommand\u003e redoStack \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private BakingList bakingList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandManager(BakingList bakingList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.bakingList \u003d bakingList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Runs a command. If the command is a subclass of \u003ccode\u003eUndoableCommand\u003ccode\u003e, puts it in undo stack."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param command The command to be executed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DukeException if execution fails."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(Command command) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (command instanceof UndoCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            undo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (command instanceof RedoCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            redo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(bakingList, storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                undoStack.add((UndoableCommand) command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void undo() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (undoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"No task to be undone.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        undoStack.get(undoStack.size() - 1).undo(bakingList, storage, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        redoStack.add(undoStack.get(undoStack.size() - 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        undoStack.remove(undoStack.size() - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void redo() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (redoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"No task to be redone.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        redoStack.get(redoStack.size() - 1).redo(bakingList, storage, ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        undoStack.add(redoStack.get(redoStack.size() - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        redoStack.remove(redoStack.size() - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 8,
      "-": 58
    }
  },
  {
    "path": "src/main/java/duke/logic/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.BakingHomeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.BakingList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Storage STORAGE \u003d new Storage(\"baking.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static BakingList bakingList \u003d new BakingList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandManager commandManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            bakingList \u003d STORAGE.deserialize();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.disableInput();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.initializePages();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.refreshOrderList(bakingList.getOrderList(), bakingList.getOrderList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showOrderPage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //////////"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showRecipePage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //////////"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandManager \u003d new CommandManager(bakingList, STORAGE, ui);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeInput(String input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Command command \u003d new BakingHomeParser().parseCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandManager.execute(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (DukeException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 4,
      "-": 40
    }
  },
  {
    "path": "src/main/java/duke/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Prefixes mapped to their respective arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 58
    }
  },
  {
    "path": "src/main/java/duke/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PREAMBLE_ARGS_FORMAT \u003d Pattern.compile(\"^([^-]+)?\\\\s*(.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PREFIX_VALUE_FORMAT \u003d Pattern.compile(\"(-\\\\w+)\\\\s*([^-]+|-\\\\w+)?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String preamble \u003d extractPreambleAndArgs(argsString).get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d extractPreambleAndArgs(argsString).get(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d extractArgs(prefixes, argsString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        map.put(new Prefix(\"\"), preamble);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cString\u003e extractPreambleAndArgs(String argString) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PREAMBLE_ARGS_FORMAT.matcher(argString.strip());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        res.add(matcher.group(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        res.add(matcher.group(2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static ArgumentMultimap extractArgs(Prefix[] prefixes, String args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cPrefix\u003e prefixList \u003d Arrays.asList(prefixes);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PREFIX_VALUE_FORMAT.matcher(args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String prefixString \u003d matcher.group(1).strip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Prefix prefix \u003d new Prefix(prefixString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String value \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (matcher.group(2) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                value \u003d matcher.group(2).strip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (prefixList.contains(prefix)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.put(prefix, value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_PREFIX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 71
    }
  },
  {
    "path": "src/main/java/duke/parser/BakingHomeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.OrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.order.OrderCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Parsers user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class BakingHomeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used to get primary command word."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 1: primary command word."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 2: (optional) sub-command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern PRIMARY_COMMAND_FORMAT \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(.+)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d PRIMARY_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String primaryCommand \u003d matcher.group(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String subCommandAndArgs \u003d matcher.group(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (primaryCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return new OrderCommandParser().parse(subCommandAndArgs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 38
    }
  },
  {
    "path": "src/main/java/duke/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_ITEM \u003d new Prefix(\"-item\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_NAME \u003d new Prefix(\"-name\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_CONTACT \u003d new Prefix(\"-contact\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_REMARKS \u003d new Prefix(\"-rmk\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_DEADLINE \u003d new Prefix(\"-by\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_STATUS \u003d new Prefix(\"-status\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static final Prefix PREFIX_ORDER_INDEX \u003d new Prefix(\"-i\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5,
      "-": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static List\u003cInteger\u003e getIndexes(String indexString) throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (indexString.contains(\"~\")) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            indexes \u003d getIndexesInInterval(indexString);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            indexes \u003d getIndexesFromString(indexString);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cInteger\u003e getIndexesInInterval(String interval) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] startAndEndIndexes \u003d interval.split(\"~\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            start \u003d Integer.parseInt(startAndEndIndexes[0]) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            end \u003d Integer.parseInt(startAndEndIndexes[1]) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (start \u003e end) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            result.add(i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cInteger\u003e getIndexesFromString(String string) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] indexStrings \u003d string.split(\",\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String indexString : indexStrings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                result.add(Integer.parseInt(indexString) - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 52
    }
  },
  {
    "path": "src/main/java/duke/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * E.g. \u0027-item\u0027 in \u0027order add -item bread, 2\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 39
    }
  },
  {
    "path": "src/main/java/duke/parser/SubCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public interface SubCommandParser\u003cT extends Command\u003e extends Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used to get sub-command and args."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 1: Sub-command word."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Capture group 2: (Optional) Args."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static final Pattern SUB_COMMAND_AND_ARGS_FORMAT \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(.*)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static String getSubCommandWord(String subCommandAndArgs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d SUB_COMMAND_AND_ARGS_FORMAT.matcher(subCommandAndArgs.trim());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return matcher.group(1).strip();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    static String getArgs(String subCommandAndArgs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        final Matcher matcher \u003d SUB_COMMAND_AND_ARGS_FORMAT.matcher(subCommandAndArgs.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return matcher.group(2).strip();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 35
    }
  },
  {
    "path": "src/main/java/duke/parser/TimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.ocpsoft.prettytime.PrettyTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.ocpsoft.prettytime.nlp.PrettyTimeParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parse time. Convert between date object and String date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static PrettyTime prettyTime \u003d new PrettyTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static PrettyTimeParser prettyTimeParser \u003d new PrettyTimeParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"EEE, MMM d, yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a Date object to a String representing the date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date Date object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a String representing the date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (date.getTime() - System.currentTimeMillis() \u003e 1000 * 3600 * 24 * 5) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateFormat.format(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return prettyTime.format(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a String representing the date to a Date object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param str a String representing the date. Must be in correct format: dd-MM-yyyy HHmm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Date object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if the String is of incorrect format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Date convertStringToDate(String str) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDate\u003e dates \u003d prettyTimeParser.parse(str);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (dates.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new ParseException(Message.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return dates.get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 4,
      "liushiru": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/duke/parser/decrypted/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.command.recipe.AddRecipeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import duke.command.recipe.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static Command parseSaleAdd(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new AddSaleCommand(params);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static Command parseSaleDelete(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new DeleteSaleCommand(params);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Command parseOrderEdit(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new EditOrderCommand(params);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static Command parseSaleEdit(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return new EditSaleCommand(params);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void modifyOrdrer(Map\u003cString, List\u003cString\u003e\u003e params, Order order) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"name\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            order.setCustomerName(params.get(\"name\").get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"contact\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            order.setCustomerContact(params.get(\"contact\").get(0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"rmk\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            order.setRemarks(params.get(\"rmk\").get(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"by\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            order.setDeliveryDate(TimeParser.convertStringToDate(params.get(\"by\").get(0)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"status\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                order.setStatus(Order.Status.valueOf(params.get(\"status\").get(0).toUpperCase()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Invalid status\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addItemsToOrder(params, order);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static void modifySale(Map\u003cString, List\u003cString\u003e\u003e params, Sale sale) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"desc\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setDescription(params.get(\"desc\").get(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"value\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setValue(Double.parseDouble(params.get(\"value\").get(0)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"at\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            sale.setSaleDate(TimeParser.convertStringToDate(params.get(\"at\").get(0)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lim Chek Jun"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static void addItemsToOrder(Map\u003cString, List\u003cString\u003e\u003e params, Order order) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!params.containsKey(\"item\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String item : params.get(\"item\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String[] itemAndQty \u003d item.split(\",\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty.length \u003c 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Must have item name and quantity\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty[0].strip().equals(\"\") || itemAndQty[1].strip().equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Item name and quantity should not be empty\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                order.addItem(itemAndQty[0].strip(), Integer.parseInt(itemAndQty[1].strip()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Quantity should be an integer\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //////////////////////////////////////////////////////////////////////////////////"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Command parseRecipeDelete(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new DeleteRecipeCommand(params);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public static Command parseRecipeAdd(Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return new AddRecipeCommand(params);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void checkParameters(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!(params.containsKey(\"secondary\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                || params.containsKey(\"i\"))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                \u0026\u0026 !params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"must contain ids or indexes or both\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"secondary\") \u0026\u0026 (params.containsKey(\"i\") || params.containsKey(\"id\"))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Primary parameter cannot co-exist with -i or -id.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static List\u003cOrder\u003e getOrders(List\u003cOrder\u003e orders, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        checkParameters(params);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cOrder\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d getOrderIndexes(params);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (index \u003e\u003d orders.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Invalid index\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            result.add(orders.get(index));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static List\u003cInteger\u003e getOrderIndexes(Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (params.get(\"secondary\").get(0).contains(\"~\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                indexes \u003d getIndexesInInterval(params.get(\"secondary\").get(0));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                indexes \u003d getIndexesFromString(params.get(\"secondary\").get(0));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            assert (params.get(\"i\") !\u003d null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (params.get(\"i\").get(0).contains(\"~\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                indexes \u003d getIndexesInInterval(params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                indexes \u003d getIndexesFromString(params.get(\"i\").get(0));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cInteger\u003e getIndexesInInterval(String interval) throws DukeException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] startAndEndIndexes \u003d interval.split(\"~\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int start;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        int end;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            start \u003d Integer.parseInt(startAndEndIndexes[0]) - 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            end \u003d Integer.parseInt(startAndEndIndexes[1]) - 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Wrong number format\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (start \u003e end) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Starting index should be no more than ending index\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            result.add(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static List\u003cInteger\u003e getIndexesFromString(String string) throws DukeException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String[] indexStrings \u003d string.split(\",\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        List\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String indexString : indexStrings) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                result.add(Integer.parseInt(indexString) - 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Wrong number format\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static Sale getSaleByIndexOrId(List\u003cSale\u003e sales, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        checkParameters(params);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"secondary\") || params.containsKey(\"i\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            int index \u003d getSaleIndex(sales, params);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            return sales.get(index);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else if (params.containsKey(\"id\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please specify an order\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public static int getSaleIndex(List\u003cSale\u003e sales, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        String indexParameter;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (params.containsKey(\"secondary\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            indexParameter \u003d params.get(\"secondary\").get(0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            indexParameter \u003d params.get(\"i\").get(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            index \u003d Integer.parseInt(indexParameter) - 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Please enter a valid index.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d sales.size()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            throw new DukeException(\"Index out of bound\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 139,
      "Lim Chek Jun": 1,
      "liushiru": 12,
      "chekjun": 58
    }
  },
  {
    "path": "src/main/java/duke/parser/decrypted/OldParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.decrypted;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Parse user input into commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OldParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final Set\u003cString\u003e reservedParameters \u003d new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            \"line\", \"primary\", \"secondary\", \"cmd\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_REDO \u003d \"redo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_ORDER \u003d \"order\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_ORDER_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_ORDER_DELETE \u003d \"remove\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_ORDER_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_ORDER_COMPLETE \u003d \"done\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static final String COMMAND_SHORTCUT \u003d \"short\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Parses user input into a \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param line the user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @return the command from user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @throws DukeException if input is not valid command or command parameters are invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public static Command getCommand(String line, Map\u003cString, ExecuteShortcutCommand\u003e shortcuts) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (shortcuts.containsKey(line.strip())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return shortcuts.get(line.strip());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Map\u003cString, List\u003cString\u003e\u003e params \u003d parseCommandAndParams(line);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String commandWord \u003d params.get(\"cmd\").get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_ORDER:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return parseOrder(line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_UNDO:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return parseUndo(line);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_REDO:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return parseRedo(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_SHORTCUT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return new SetShortcutCommand(line);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(Message.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Map\u003cString, List\u003cString\u003e\u003e parseCommandAndParams(String line) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Map\u003cString, List\u003cString\u003e\u003e params \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addToParameter(\"line\", line, params);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        parseCommandAndPrimaryAndSecondary(line, params);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        parseParameterBlocks(line, params);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return params;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void parseCommandAndPrimaryAndSecondary(String line, Map\u003cString, List\u003cString\u003e\u003e params)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Regex to get the command word and the sub command, and primary parameter."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Pattern commandWordPattern \u003d Pattern.compile(\"^(\\\\w+)\\\\s*(\\\\w+)?\\\\s*([^-]+)?\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Matcher commandWordMatcher \u003d commandWordPattern.matcher(line);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (!commandWordMatcher.find()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            throw new DukeException(\"Please enter a command\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //In \"order remove 1\", \"order\" is \"cmd\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        addToParameter(\"cmd\", commandWordMatcher.group(1).strip(), params);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (commandWordMatcher.group(2) !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //In \"order remove 1\", \"remove\" is \"primary\"."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            addToParameter(\"primary\", commandWordMatcher.group(2).strip(), params);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (commandWordMatcher.group(3) !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //In \"order remove 1\", \"1\" is \"secondary\"."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                addToParameter(\"secondary\", commandWordMatcher.group(3).strip(), params);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void parseParameterBlocks(String line, Map\u003cString, List\u003cString\u003e\u003e params) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        //Regex to get each parameter block. e.g. \"-at some place\" is one command block."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Pattern paramsPattern \u003d Pattern.compile(\"(-\\\\w+ [^-]+|-\\\\w+)\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Matcher paramsMatcher \u003d paramsPattern.matcher(line);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        while (paramsMatcher.find()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String s \u003d paramsMatcher.group().strip();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (s.isEmpty() || s.isBlank()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            //Regex to get parameter and value."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            // e.g. in \"-at some place\", \"at\" is the parameter and \"some place\" is the value."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Pattern attrAndValuePattern \u003d Pattern.compile(\"-(\\\\w+) ([^-]+)|-(\\\\w+)\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            Matcher attrAndValueMatcher \u003d attrAndValuePattern.matcher(s);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (!attrAndValueMatcher.find()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Please enter valid parameters\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (attrAndValueMatcher.group(2) \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (reservedParameters.contains(attrAndValueMatcher.group(3))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    throw new DukeException(\"Parameters contain reserved words\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (!params.containsKey(attrAndValueMatcher.group(3))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    addToParameter(attrAndValueMatcher.group(3), \"\", params);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    params.get(attrAndValueMatcher.group(3)).add(\"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (reservedParameters.contains(attrAndValueMatcher.group(1))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    throw new DukeException(\"Parameters contain reserved words\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                if (!params.containsKey(attrAndValueMatcher.group(1))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    addToParameter(attrAndValueMatcher.group(1).strip(), attrAndValueMatcher.group(2), params);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    params.get(attrAndValueMatcher.group(1).strip()).add(attrAndValueMatcher.group(2));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void addToParameter(String key, String value, Map\u003cString, List\u003cString\u003e\u003e params) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        params.put(key, new ArrayList\u003cString\u003e() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                add(value);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Command parseOrder(String line) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Map\u003cString, List\u003cString\u003e\u003e params \u003d parseCommandAndParams(line);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assert params.size() \u003e 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (params.get(\"primary\").get(0)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_ORDER_ADD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //return CommandParser.parseOrderAdd(params);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_ORDER_DELETE:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                //return CommandParser.parseOrderDelete(params);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_ORDER_EDIT:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return CommandParser.parseOrderEdit(params);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case COMMAND_ORDER_COMPLETE:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return new CompleteOrderCommand(params);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new DukeException(\"Invalid command\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Command parseUndo(String line) throws DukeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new UndoCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static Command parseRedo(String line) throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new RedoCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 172
    }
  },
  {
    "path": "src/main/java/duke/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class ParseException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/order/AddOrderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.AddOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.commons.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_NAME,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_CONTACT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_STATUS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_REMARKS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        Order order \u003d new Order();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.setCustomerName(map.getValue(CliSyntax.PREFIX_ORDER_NAME).orElse(\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.setCustomerContact(map.getValue(CliSyntax.PREFIX_ORDER_CONTACT).orElse(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.setRemarks(map.getValue(CliSyntax.PREFIX_ORDER_REMARKS).orElse(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.setStatus(Order.Status.valueOf(map.getValue("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_STATUS).orElse(\"ACTIVE\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                .toUpperCase())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        order.setDeliveryDate(TimeParser.convertStringToDate("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                map.getValue(CliSyntax.PREFIX_ORDER_DEADLINE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                        .orElse(\"now\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (map.getValue(CliSyntax.PREFIX_ORDER_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            addItemsToOder(map.getAllValues(CliSyntax.PREFIX_ORDER_ITEM), order);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new AddOrderCommand(order);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private static void addItemsToOder(List\u003cString\u003e itemArg, Order toAdd) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        if (itemArg.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        for (String itemString : itemArg) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            String[] itemAndQty \u003d itemString.split(\",\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            if (itemAndQty[0].strip().equals(\"\") || itemAndQty[1].strip().equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_ITEM_MISSING_NAME_OR_QUANTITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                toAdd.addItem(itemAndQty[0].strip(), Integer.parseInt(itemAndQty[1].strip()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                throw new ParseException(Message.MESSAGE_INVALID_NUMBER_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 59
    }
  },
  {
    "path": "src/main/java/duke/parser/order/DeleteOrderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.DeleteOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_INDEX"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new DeleteOrderCommand(ParserUtil.getIndexes(map.getPreamble()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/order/EditOrderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.EditOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public EditOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        ArgumentMultimap map \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_INDEX,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_NAME,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_CONTACT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_ITEM,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_DEADLINE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_STATUS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                CliSyntax.PREFIX_ORDER_REMARKS"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return new EditOrderCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 26
    }
  },
  {
    "path": "src/main/java/duke/parser/order/OrderCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.AddOrderCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.DeleteOrderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.EditOrderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.OrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.SubCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class OrderCommandParser implements SubCommandParser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public OrderCommand parse(String subCommandAndArgs) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String subCommand \u003d SubCommandParser.getSubCommandWord(subCommandAndArgs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        String args \u003d SubCommandParser.getArgs(subCommandAndArgs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        switch (subCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return new AddOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return new DeleteOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "            case EditOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                return new EditOrderCommandParser().parse(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 27
    }
  },
  {
    "path": "src/main/java/duke/storage/BakingList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.command.ExecuteShortcutCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class BakingList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cOrder\u003e orderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private List\u003cSale\u003e saleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    private Map\u003cString, ExecuteShortcutCommand\u003e shortcuts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private List\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return orderList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public List\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        return recipeList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public List\u003cSale\u003e getSaleList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        return saleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOrderList(List\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.orderList \u003d orderList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void setSaleList(List\u003cSale\u003e saleList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.saleList \u003d saleList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public Map\u003cString, ExecuteShortcutCommand\u003e getShortcuts() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        return shortcuts;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setRecipeList(List\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.recipeList \u003d recipeList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    public void setShortcuts(Map\u003cString, ExecuteShortcutCommand\u003e shortcuts) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        this.shortcuts \u003d shortcuts;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 18,
      "liushiru": 5,
      "chekjun": 10,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores tasks in file and reads tasks from file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path the path to store the file, including the file name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Serialize BakingList to json file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param bakingList the TaskList to serialize."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if fails to serialize due to IO exception."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serialize(BakingList bakingList) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            //mapper.setDateFormat(new SimpleDateFormat(TimeParser.getDatePattern()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mapper.writerWithType(BakingList.class).writeValue(new File(path), bakingList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"IO Exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * Deserializes BakingList from file. If the file is not found, creates new file and returns an empty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     * BakingList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a BakingList object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if file is damaged."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public BakingList deserialize() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        BakingList bakingList \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            //mapper.setDateFormat(new SimpleDateFormat(TimeParser.getDatePattern()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            bakingList \u003d mapper.readValue(new File(path), BakingList.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return bakingList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException i) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (i instanceof FileNotFoundException) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                return new BakingList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                i.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"IO exception when loading data\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 4,
      "chekjun": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/duke/ui/InventoryPage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class InventoryPage extends AnchorPane {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public InventoryPage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/InventoryPage.fxml\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "Lim Wen Han Eugene": 2
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.jfoenix.controls.JFXButton;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.logic.Duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    //Popup box"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox popUp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label popUpLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    JFXButton popUpButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    //Main page"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label currentPage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private AnchorPane pagePane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    //Sidebar"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private JFXButton recipeButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private JFXButton orderButton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private JFXButton inventoryButton;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private JFXButton salesButton;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private OrderPage orderPage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private RecipePage recipePage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private InventoryPage inventoryPage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private SalePage salePage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Ui ui \u003d new Ui(this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d new Duke(ui);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        duke.executeInput(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleOk() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowRecipe() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showRecipePage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowOrder() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showOrderPage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowInventory() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showInventoryPage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private void handleShowSale() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        showSalePage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void initializePages() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        orderPage \u003d new OrderPage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setPageAnchor(orderPage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        recipePage \u003d new RecipePage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        AnchorPane.setLeftAnchor(recipePage, 0.0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        AnchorPane.setRightAnchor(recipePage, 0.0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        AnchorPane.setTopAnchor(recipePage, 0.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        AnchorPane.setBottomAnchor(recipePage, 4.0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setPageAnchor(recipePage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryPage \u003d new InventoryPage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        setPageAnchor(inventoryPage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        salePage \u003d new SalePage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        AnchorPane.setLeftAnchor(salePage, 0.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        AnchorPane.setRightAnchor(salePage, 0.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        AnchorPane.setTopAnchor(salePage, 0.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        AnchorPane.setBottomAnchor(salePage, 4.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        setPageAnchor(salePage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void showMessage(String message) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpLabel.setText(message);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        popUpLabel.setTextFill(Color.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().add(\"message-popup\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().add(\"message-popup\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void showErrorPopUp(String message) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpLabel.setText(message);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpLabel.setTextFill(Color.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        popUpButton.getStyleClass().add(\"error-popup\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().clear();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.getStyleClass().add(\"error-popup\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        popUp.setVisible(true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void refreshOrderList(List\u003cOrder\u003e orders, List\u003cOrder\u003e all) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        this.orderPage.refreshOrderList(orders, all);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void refreshRecipeListPage(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        this.recipePage.refreshRecipeListPage(recipes);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void showOrderPage() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().add(orderPage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        currentPage.setText(\"Orders\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void refreshSaleList(List\u003cSale\u003e sales, List\u003cSale\u003e all) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        this.salePage.refreshSaleList(sales, all);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    void showRecipePage() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().add(recipePage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        currentPage.setText(\"Recipes\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    void showInventoryPage() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().add(inventoryPage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        currentPage.setText(\"Inventory\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    void showSalePage() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        pagePane.getChildren().clear();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        pagePane.getChildren().add(salePage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        orderButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        inventoryButton.setButtonType(JFXButton.ButtonType.FLAT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        salesButton.setButtonType(JFXButton.ButtonType.RAISED);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        currentPage.setText(\"Sales\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    void disableInput() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setPageAnchor(AnchorPane page) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(page, 0.0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(page, 0.0);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(page, 0.0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(page, 4.0);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 6,
      "liushiru": 4,
      "chekjun": 16,
      "-": 182
    }
  },
  {
    "path": "src/main/java/duke/ui/OrderCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * Controller for OrderCard. An OrderCard displays an order, including its creation time, customer, items,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": " * delivery date, index, and status."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liujiajun"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderCard extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private AnchorPane innerPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane itemFlow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label contact;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label remarks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * Constructor for OrderCard."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param order       The order to displayed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     * @param indexNumber The index of the order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public OrderCard(Order order, int indexNumber) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/OrderCard.fxml\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(Long.toString(order.getId()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        index.setText(\"#\" + Integer.toString(indexNumber));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.setText(TimeParser.convertDateToString(order.getDeliveryDate()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(order.getCustomerName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        contact.setText(order.getCustomerContact());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        remarks.setText(order.getRemarks());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.setText(order.getStatus().toString().toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.getStyleClass().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        status.getStyleClass().addAll(\"status-\" + order.getStatus().toString().toLowerCase());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String itemName : order.getItems().keySet()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            itemFlow.getChildren().add(new OrderItemBox(itemName, order.getItems().get(itemName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 11,
      "liushiru": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/duke/ui/RecipePage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.recipe.Step;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.recipe.IngredientBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecipePage extends AnchorPane {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private AnchorPane recipeShowPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AnchorPane recipeListPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label recipeName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox difficultyLevel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox ingredients;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    private ListView\u003cString\u003e steps;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox recipeList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label timeLabel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private TableView\u003cRecipe\u003e recipeTable;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Recipe rcp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecipePage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/RecipePage.fxml\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Recipe recipe \u003d new Recipe(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        recipe.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        List\u003cRecipe\u003e rpl \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        rpl.add(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        refreshRecipeListPage(rpl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return rcp.getName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showRecipeShowPane() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Recipe recipe \u003d new Recipe(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        recipe.init();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeShowPane.setVisible(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeListPane.setVisible(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeName.setText(recipe.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Image image1 \u003d new Image(new FileInputStream(currentDir + \"\\\\src\\\\main\\\\resources\\\\images\\\\star.png\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            difficultyLevel.getChildren().clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            for (int i \u003d 0; i \u003c recipe.getDifficultyLevel(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageView star \u003d new ImageView();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                star.setImage(image1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                star.setFitHeight(28);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                star.setPreserveRatio(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                difficultyLevel.getChildren().add(star);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ingredients.getChildren().clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Ingredient ingredient : recipe.getIngredients()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            IngredientBox ingredientBox \u003d new IngredientBox(ingredient);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            ingredient.init();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            ingredients.getChildren().add(ingredientBox);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        steps.getItems().clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        //Solution taken from: https://stackoverflow.com/questions/13869013/how-to-automatically-wrap-javafx-2-listview"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            steps.setCellFactory(new Callback\u003cListView\u003cString\u003e, ListCell\u003cString\u003e\u003e() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                public ListCell\u003cString\u003e call(ListView\u003cString\u003e list) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    final ListCell cell \u003d new ListCell() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        private Text text;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        public void updateItem(Object item, boolean empty) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            if (!isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                text \u003d new Text(item.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                text.setWrappingWidth(steps.getPrefWidth());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                setGraphic(text);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                setFont(new Font(\"Arial\", 15));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    };"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    return cell;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        for (Step step : recipe.getSteps()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            steps.getItems().add(\"Step \" + index++ + \". \" + step.getDescription());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        timeLabel.setText(recipe.getTime() + \" mins\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        timeLabel.setFont(new Font(\"Gabriola\", 20));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    //RecipeList"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    void refreshRecipeListPage(List\u003cRecipe\u003e rpl) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeListPane.setVisible(true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeShowPane.setVisible(false);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cRecipe\u003e recipeObservableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Recipe recipe : rpl) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            recipeObservableList.add(recipe);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        recipeTable.getColumns().clear();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (rpl.size() !\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            TableColumn\u003cRecipe, Void\u003e indexColumn \u003d new TableColumn\u003c\u003e(\"S/N\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            indexColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            indexColumn.setPrefWidth(70);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            indexColumn.setResizable(true);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            //Solution below adapted from: https://stackoverflow.com/questions/31212400/adding-index-of-records-in-a-javafx-tableview-column"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ///////////////////////////////////////////////////////index column"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                indexColumn.setCellFactory(col -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    // just a default table cell:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    TableCell\u003cRecipe, Void\u003e cell \u003d new TableCell\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    cell.textProperty().bind(Bindings.createStringBinding(() -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        if (cell.isEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            return null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                            return Integer.toString(cell.getIndex() + 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    }, cell.emptyProperty(), cell.indexProperty()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                    return cell;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                });"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "liushiru"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            ////////////////////////////////index column created"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            TableColumn\u003cRecipe, String\u003e nameColumn \u003d new TableColumn\u003c\u003e(\"Name\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            nameColumn.setMinWidth(150);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            nameColumn.setPrefWidth(500);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            nameColumn.setResizable(true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            nameColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"name\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            TableColumn\u003cRecipe, Integer\u003e timeColumn \u003d new TableColumn\u003c\u003e(\"Time\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            timeColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            timeColumn.setPrefWidth(100);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            timeColumn.setResizable(true);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            timeColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"time\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            TableColumn\u003cRecipe, Double\u003e costColumn \u003d new TableColumn\u003c\u003e(\"Cost\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            costColumn.setMinWidth(50);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            costColumn.setPrefWidth(70);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            costColumn.setResizable(true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            costColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"cost\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            TableColumn\u003cRecipe, Integer\u003e difficultyLevelColumn \u003d new TableColumn\u003c\u003e(\"Difficulty Level\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            difficultyLevelColumn.setMinWidth(70);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            difficultyLevelColumn.setPrefWidth(300);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            difficultyLevelColumn.setResizable(true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            difficultyLevelColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"difficultyLevel\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            recipeTable.setItems(recipeObservableList);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            recipeTable.getColumns().addAll(indexColumn, nameColumn, timeColumn, costColumn,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    difficultyLevelColumn);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 1,
      "liushiru": 56,
      "-": 153,
      "Lim Wen Han Eugene": 1
    }
  },
  {
    "path": "src/main/java/duke/ui/SalePage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "public class SalePage extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    private VBox saleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public SalePage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/SalePage.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void refreshSaleList(List\u003cSale\u003e saleList, List\u003cSale\u003e all) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        saleList.getChildren().clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        for (Sale sale : saleList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            saleList.getChildren().add(new SaleCard(sale, i));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            ++i;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chekjun": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "import duke.entities.Sale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.entities.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.showMessage(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.showErrorPopUp(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showOrderPage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.showOrderPage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showRecipePage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.showRecipePage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void showSalePage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        mainWindow.showSalePage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initializePages() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.initializePages();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void refreshOrderList(List\u003cOrder\u003e orders, List\u003cOrder\u003e all) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.refreshOrderList(orders, all);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    public void refreshRecipeListPage(List\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "liushiru"
        },
        "content": "        mainWindow.refreshRecipeListPage(recipeList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    public void refreshSaleList(List\u003cSale\u003e sale, List\u003cSale\u003e all) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        mainWindow.refreshSaleList(sale, all);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void disableInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.disableInput();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "liushiru": 4,
      "chekjun": 9,
      "-": 42
    }
  },
  {
    "path": "src/main/java/duke/ui/recipe/IngredientBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "import duke.entities.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class IngredientBox extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView ingredientPic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    //private ImageView ingredientPic \u003d new ImageView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label ingredientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ingredient ingredient;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public IngredientBox(Ingredient ingredient) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/recipe/IngredientBox\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \".fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ingredient.init();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ingredientName.setText(ingredient.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ingredientPic.setImage(ingredient.getPicture());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ingredientPic.setFitHeight(50);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.ingredientPic.setPreserveRatio(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "Lim Wen Han Eugene": 1
    }
  },
  {
    "path": "src/main/resources/css/duke.css",
    "fileType": "css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".root {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: WHITE;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/*.jfx-text-field {*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/*    -fx-font-weight: BOLD;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/*    -fx-prompt-text-fill: #808080;*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/*    -jfx-focus-color: #4059A9;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/*    -jfx-unfocus-color: #4d4d4d;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/*    -fx-max-width: 300;*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane:focused {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-pane .corner {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".jfx-list-view {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-cell-horizontal-margin: 0.0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-cell-vertical-margin: 5.0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-vertical-gap: 10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -jfx-expanded: false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-completed {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #00bfa5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-active {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #32cb00;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ".status-canceled {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #bdbdbd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-radius: 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-padding: 4;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".error-popup {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 25;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: rgb(237, 107, 96);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".message-popup {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 25;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-background-color: #00bfa5;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "liujiajun": 14,
      "-": 53
    }
  },
  {
    "path": "src/main/resources/css/recipe.css",
    "fileType": "css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: rgba(151, 217, 143, 0.5);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .column-header {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: rgba(151, 217, 143, 0.5);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .table-column {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-hbar-policy: never;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-vbar-policy: never;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".table-view .table-cell {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane:horizontal \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane:vertical \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-padding: 0 0.05em 0 0.05em;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liushiru"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-background-color: rgba(62, 135, 52, 0.5);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liushiru"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liushiru"
        },
        "content": "    -fx-box-border: transparent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liushiru"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "liushiru": 37
    }
  },
  {
    "path": "src/main/resources/view/InventoryPage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "\u003cfx:root prefHeight\u003d\"591.0\" prefWidth\u003d\"857.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.5\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                  \u003cTitledPane fx:id\u003d\"inventoryListPane\" animated\u003d\"false\" prefHeight\u003d\"211.0\" prefWidth\u003d\"600.0\" text\u003d\"Inventory List\" textFill\u003d\"#c51a1a\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                      \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                              \u003cTableView fx:id\u003d\"inventoryTable\" prefHeight\u003d\"162.0\" prefWidth\u003d\"594.0\" AnchorPane.bottomAnchor\u003d\"-10.0\" AnchorPane.leftAnchor\u003d\"-10.0\" AnchorPane.rightAnchor\u003d\"-10.0\" AnchorPane.topAnchor\u003d\"-10.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                \u003ccolumns\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                    \u003cTableColumn fx:id\u003d\"inventoryListNum\" prefWidth\u003d\"75.0\" text\u003d\"S/N\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"inventoryListIngredient\" prefWidth\u003d\"425.0\" text\u003d\"Ingredient\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"inventoryListQuantity\" minWidth\u003d\"0.0\" prefWidth\u003d\"300.0\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                \u003c/columns\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                              \u003c/TableView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                  \u003cTitledPane fx:id\u003d\"shoppingListPane\" animated\u003d\"false\" prefWidth\u003d\"598.0\" text\u003d\"Shopping List\" textFill\u003d\"#c51a1a\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                      \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                              \u003cTableView fx:id\u003d\"shoppingTable\" prefHeight\u003d\"165.33333333333334\" prefWidth\u003d\"596.0\" AnchorPane.bottomAnchor\u003d\"-10.0\" AnchorPane.leftAnchor\u003d\"-10.0\" AnchorPane.rightAnchor\u003d\"-10.0\" AnchorPane.topAnchor\u003d\"-10.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                \u003ccolumns\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                    \u003cTableColumn fx:id\u003d\"shoppingListNum\" prefWidth\u003d\"75.0\" text\u003d\"S/N\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"shoppingListIngredient\" prefWidth\u003d\"325.0\" text\u003d\"Ingredient\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                  \u003cTableColumn fx:id\u003d\"shoppingListQuantity\" minWidth\u003d\"0.0\" prefWidth\u003d\"200.0\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                    \u003cTableColumn fx:id\u003d\"shoppingListPrice\" prefWidth\u003d\"200.0\" text\u003d\"Price\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                                \u003c/columns\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                              \u003c/TableView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "                  \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lim Wen Han Eugene"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "-": 6,
      "Lim Wen Han Eugene": 54
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.jfoenix.controls.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane prefWidth\u003d\"1000.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"200.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                    AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cJFXTextField fx:id\u003d\"userInput\" focusColor\u003d\"#00bfa5\" layoutX\u003d\"10.0\" layoutY\u003d\"493.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                              onAction\u003d\"#handleUserInput\" prefHeight\u003d\"33.0\" prefWidth\u003d\"338.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                              promptText\u003d\"Enter any duke.command to start\" AnchorPane.bottomAnchor\u003d\"6.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                              AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"currentPage\" text\u003d\"Orders\" textFill\u003d\"#5086ec\" AnchorPane.leftAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                       AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cFont name\u003d\"Arial Bold\" size\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSeparator prefHeight\u003d\"3.0\" prefWidth\u003d\"200.0\" AnchorPane.leftAnchor\u003d\"15.0\" AnchorPane.rightAnchor\u003d\"15.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                           AnchorPane.topAnchor\u003d\"45.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"pagePane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"40.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                            AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cAnchorPane visible\u003d\"false\" AnchorPane.bottomAnchor\u003d\"40.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                            AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                    minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"324.0\" prefWidth\u003d\"268.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                                    styleClass\u003d\"edge-to-edge\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cJFXListView fx:id\u003d\"taskList\" prefHeight\u003d\"401.0\" prefWidth\u003d\"413.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cHBox fx:id\u003d\"popUp\" alignment\u003d\"BOTTOM_CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"523.0\" maxHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                      prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"60.0\" AnchorPane.leftAnchor\u003d\"10.0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                      AnchorPane.rightAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel fx:id\u003d\"popUpLabel\" alignment\u003d\"CENTER\" maxHeight\u003d\"30.0\" prefHeight\u003d\"30.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                               text\u003d\"fvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfdfvfvdvfd\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cJFXButton fx:id\u003d\"popUpButton\" alignment\u003d\"CENTER\" defaultButton\u003d\"true\" minWidth\u003d\"61.0\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                   onAction\u003d\"#handleOk\" prefHeight\u003d\"30.0\" prefWidth\u003d\"61.0\" text\u003d\"Okay\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cAnchorPane maxWidth\u003d\"200.0\" minWidth\u003d\"200.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    style\u003d\"-fx-background-color: #00bfa5;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                      AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"110.0\" prefWidth\u003d\"200.0\" text\u003d\"BakingHome\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                               textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cFont name\u003d\"Arial Bold\" size\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cJFXButton fx:id\u003d\"recipeButton\" onAction\u003d\"#handleShowRecipe\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                   text\u003d\"Recipes\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cJFXButton fx:id\u003d\"orderButton\" onAction\u003d\"#handleShowOrder\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                                   text\u003d\"Orders\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cJFXButton fx:id\u003d\"inventoryButton\" onAction\u003d\"#handleShowInventory\" prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                   prefWidth\u003d\"200.0\" text\u003d\"Inventory\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cJFXButton fx:id\u003d\"salesButton\" onAction\u003d\"#handleShowSale\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                   text\u003d\"Sales\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cfont\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/font\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/JFXButton\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chekjun": 1,
      "-": 98
    }
  },
  {
    "path": "src/main/resources/view/OrderCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"230.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"800.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         style\u003d\"-fx-background-color: white;\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                    style\u003d\"-fx-background-color: white; -fx-border-color: #CCCCCC; -fx-effect: dropshadow(three-pass-box, grey, 10.0,0, 0, 0);\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                    AnchorPane.bottomAnchor\u003d\"15.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                      AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"45.0\" prefWidth\u003d\"200.0\" spacing\u003d\"10.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                              style\u003d\"-fx-background-color: #5086ec;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" text\u003d\"#14g4ar\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"status\" alignment\u003d\"CENTER\" text\u003d\"active\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                       textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"deadline\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                                       style\u003d\"-fx-background-color: white; -fx-background-radius: 5; -fx-padding: 4;\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                       text\u003d\"March 18\" textAlignment\u003d\"CENTER\" textFill\u003d\"#5086ec\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"17.0\" fitWidth\u003d\"17.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/alarm-clock.png\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/name.png\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" text\u003d\"Jiajun\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/phone-contact.png\"/\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"contact\" alignment\u003d\"CENTER\" text\u003d\"83486144\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/commentary.png\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"remarks\" alignment\u003d\"CENTER\" text\u003d\"No nuts\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                                            style\u003d\"-fx-background-color: white;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFlowPane fx:id\u003d\"itemFlow\" alignment\u003d\"CENTER_LEFT\" columnHalignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  hgap\u003d\"10.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  style\u003d\"-fx-background-color: white;\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Order ID:\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" text\u003d\"Jiajun\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Created on:\"\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cLabel fx:id\u003d\"creationDate\" alignment\u003d\"CENTER\" text\u003d\"01/01/1999 18:00\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                                       textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\"/\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 9,
      "-": 187
    }
  },
  {
    "path": "src/main/resources/view/RecipePage.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liushiru"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXTextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "\u003cfx:root prefHeight\u003d\"591.0\" prefWidth\u003d\"877.0\" stylesheets\u003d\"@../css/recipe.css\" type\u003d\"AnchorPane\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"recipeShowPane\" layoutX\u003d\"193.0\" layoutY\u003d\"47.0\" visible\u003d\"false\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"47.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cSplitPane dividerPositions\u003d\"0.444007858546169\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"511.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-background-color: white;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"169.0\" prefWidth\u003d\"768.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cHBox fx:id\u003d\"ingredients\" alignment\u003d\"CENTER\" layoutX\u003d\"293.0\" layoutY\u003d\"86.0\" prefHeight\u003d\"137.0\" prefWidth\u003d\"798.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"86.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"299.0\" prefWidth\u003d\"798.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cListView fx:id\u003d\"steps\" layoutX\u003d\"2.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"768.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cAnchorPane fx:id\u003d\"panepanepane\" layoutX\u003d\"1.0\" prefHeight\u003d\"77.0\" prefWidth\u003d\"859.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cLabel fx:id\u003d\"recipeName\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutY\u003d\"6.0\" text\u003d\"RECIPE_NAME\" textAlignment\u003d\"CENTER\" textFill\u003d\"#96663b\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cFont name\u003d\"Gabriola\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cSeparator layoutY\u003d\"76.0\" AnchorPane.leftAnchor\u003d\"300.0\" AnchorPane.rightAnchor\u003d\"300.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cHBox fx:id\u003d\"difficultyLevel\" alignment\u003d\"CENTER\" layoutY\u003d\"39.0\" opacity\u003d\"0.17\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                  prefHeight\u003d\"33.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cLabel fx:id\u003d\"timeLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"674.0\" layoutY\u003d\"16.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"50.0\" text\u003d\"Time\" AnchorPane.rightAnchor\u003d\"26.0\" AnchorPane.topAnchor\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cImageView fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" layoutX\u003d\"624.0\" layoutY\u003d\"8.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.rightAnchor\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cimage\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cImage url\u003d\"@../images/alarm-clock.png\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/image\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"recipeListPane\" prefHeight\u003d\"566.0\" prefWidth\u003d\"770.0\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    AnchorPane.leftAnchor\u003d\"30.0\" AnchorPane.rightAnchor\u003d\"30.0\" AnchorPane.topAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                    xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cSplitPane dividerPositions\u003d\"0.15655577299412915\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"566.0\" prefWidth\u003d\"770.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                            \u003cAnchorPane maxHeight\u003d\"80.0\" minHeight\u003d\"80.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"80.0\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                        prefWidth\u003d\"478.0\" stylesheets\u003d\"@../css/duke.css\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"293.0\" layoutY\u003d\"22.0\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                           prefHeight\u003d\"77.0\" prefWidth\u003d\"758.0\" text\u003d\"All Recipes\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                           AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                           AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                            \u003cFont name\u003d\"Arial\" size\u003d\"25.0\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"435.0\" prefWidth\u003d\"768.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                    \u003cSplitPane dividerPositions\u003d\"0.7871485943775101\" orientation\u003d\"VERTICAL\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                               AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                        \u003citems\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cScrollPane fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"379.0\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                        prefWidth\u003d\"815.0\" vbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                    \u003cTableView fx:id\u003d\"recipeTable\" stylesheets\u003d\"@../css/duke.css\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                        \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                            \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\"/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                        \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                                \u003c/content\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                            \u003cJFXTextArea prefHeight\u003d\"113.0\" prefWidth\u003d\"815.0\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                         promptText\u003d\"Add Recipe Here (Ctrl + Enter)\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "                                                         style\u003d\"-fx-background-color: white;\"/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                        \u003c/items\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "liushiru"
        },
        "content": "                                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 28,
      "liushiru": 13,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/SaleCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chekjun"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"230.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-background-color: white;\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"innerPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white; -fx-border-color: #CCCCCC; -fx-effect: dropshadow(three-pass-box, grey, 10.0,0, 0, 0);\" AnchorPane.bottomAnchor\u003d\"15.0\" AnchorPane.leftAnchor\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"50.0\" AnchorPane.topAnchor\u003d\"15.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"45.0\" prefWidth\u003d\"200.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #5086ec;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"index\" text\u003d\"#14g4ar\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"deadline\" alignment\u003d\"CENTER\" style\u003d\"-fx-background-color: white; -fx-background-radius: 5; -fx-padding: 4;\" text\u003d\"March 18\" textAlignment\u003d\"CENTER\" textFill\u003d\"#5086ec\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"17.0\" fitWidth\u003d\"17.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/alarm-clock.png\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/name.png\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"name\" alignment\u003d\"CENTER\" text\u003d\"Set A\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/phone-contact.png\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"contact\" alignment\u003d\"CENTER\" text\u003d\"\\$9.49\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cimage\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cImage url\u003d\"@../images/commentary.png\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/image\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"remarks\" alignment\u003d\"CENTER\" text\u003d\"No dairy\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"60.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFlowPane fx:id\u003d\"itemFlow\" alignment\u003d\"CENTER_LEFT\" columnHalignment\u003d\"CENTER\" hgap\u003d\"10.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-background-color: white;\" vgap\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                                \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/content\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cSeparator prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003cHBox alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"18.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Sale ID:\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"id\" alignment\u003d\"CENTER\" text\u003d\"Chek Jun\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Created on:\"\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003cLabel fx:id\u003d\"creationDate\" alignment\u003d\"CENTER\" text\u003d\"29/05/1997 12:30\" textFill\u003d\"#96663b\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cFont name\u003d\"Arial\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                        \u003cInsets left\u003d\"5.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chekjun"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chekjun"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chekjun"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chekjun"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chekjun"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chekjun": 177
    }
  },
  {
    "path": "src/test/java/duke/Command/DeleteOrderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "package duke.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "public class DeleteOrderCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 5
    }
  },
  {
    "path": "src/test/java/duke/entities/OrderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "import duke.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private void createOrder_withRemarksAndOneItem_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            Order order \u003d new Order(\"jj\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"12345678\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    TimeParser.convertStringToDate(\"10/10/2019 18:00\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            order.setRemarks(\"no nuts\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            order.addItem(\"cake\", 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"no nuts\", order.getRemarks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"jj\", order.getCustomerName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(1, order.getItems().size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void createOrder_invalidDate_dukeException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Order order \u003d new Order(\"jj\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"12345678\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    TimeParser.convertStringToDate(\"123\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"Please enter date in correct format: dd/mm/yyyy hhmm. e.g. 18/12/1999 18:00.\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.commons.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.entities.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.parser.TimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private void serializeAndDeserialize_bakingListWithOnlyOrderList_success() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Order order \u003d new Order(\"jj\", \"1234\", TimeParser.convertStringToDate(\"10/10/1999 18:00\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        BakingList bakingList \u003d new BakingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        bakingList.getOrderList().add(order);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new Storage(\"baking.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.serialize(bakingList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        BakingList deserializedBakingList \u003d storage.deserialize();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "liujiajun"
        },
        "content": "        assertEquals(\"jj\", deserializedBakingList.getOrderList().get(0).getCustomerName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "liujiajun": 2,
      "-": 20
    }
  }
]
